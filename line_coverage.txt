Line Coverage: 


Coverage of Test Suite: comp5111.assignment.cut.Regression__Test

comp5111.assignment.cut.Subject$NumberTasks
21 Lines from a total of 156 Lines were covered.
Percentage: 13.461538461538462%

comp5111.assignment.cut.Subject$CharTasks
6 Lines from a total of 9 Lines were covered.
Percentage: 66.66666666666667%

comp5111.assignment.cut.Subject$GregorianTasks
15 Lines from a total of 62 Lines were covered.
Percentage: 24.193548387096776%

comp5111.assignment.cut.Subject$ArrayTasks
5 Lines from a total of 19 Lines were covered.
Percentage: 26.31578947368421%

comp5111.assignment.cut.Subject
1 Lines from a total of 1 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
20 Lines from a total of 98 Lines were covered.
Percentage: 20.408163265306122%

comp5111.assignment.cut.Subject$StringTasks
63 Lines from a total of 153 Lines were covered.
Percentage: 41.1764705882353%

comp5111.assignment.cut.Subject$BooleanTasks
1 Lines from a total of 4 Lines were covered.
Percentage: 25.0%

Overall Line Coverage: 26.294820717131472%



In the following part you can see which lines were executed. Before every statement you can see a number which indicates the line on which the statement was found
After each listed instructions you can find a NO if the line wasn't executed and a YES if it was. Only the first executed statement belonging to a specific line will be shown

comp5111.assignment.cut.Subject$NumberTasks


In the following all of the lines which were covered will be shown: 

(1313): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1346): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1219): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1350): l2 = 0  YES
(1351): l3 = l1  YES
(1352): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1353): if $stack13 == 0 goto (branch)  YES
(1292): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1356): if l2 <= 1 goto (branch)  YES
(1197): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(1359): if l4 != 0 goto l3 = l3 + 1  YES
(1296): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1200): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(1360): return 0  YES
(1297): $stack3 = new java.lang.NumberFormatException  YES
(1299): $stack2 = new java.math.BigDecimal  YES
(1334): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1335): return 0  YES
(1337): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1340): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1215): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES

In the following all of the instructions which were not covered will be shown: 

(1026): $stack62 = new java.lang.NumberFormatException  NO 
(1030): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1031): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1034): return l13#63  NO 
(1293): return null  NO 
(1039): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1044): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1045): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1046): return l13#69  NO 
(1050): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1052): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1058): $stack88 = new java.lang.NumberFormatException  NO 
(1063): if l10 <= -1 goto l8 = null  NO 
(1064): $stack58 = l10 + 1  NO 
(1066): l8 = null  NO 
(1068): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1071): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1076): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1080): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1338): return 0  NO 
(1085): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1341): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1086): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1342): return 0  NO 
(1087): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1088): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1344): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1089): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1090): return l12#81  NO 
(1092): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1093): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1094): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1095): return l13#69  NO 
(1097): return l14  NO 
(1354): l2 = l2 + 1  NO 
(1101): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1357): return 0  NO 
(1102): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1363): return 1  NO 
(1115): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  NO 
(1116): if l2 == 45 goto $stack7 = 1  NO 
(1118): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  NO 
(1377): $stack2 = l0 - l1  NO 
(1148): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(900): specialinvoke l0.<java.lang.Object: void <init>()>()  NO 
(1160): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1161): return 1  NO 
(1163): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1164): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1165): return 0  NO 
(1168): return 1  NO 
(1181): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  NO 
(1182): return null  NO 
(1184): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  NO 
(934): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  NO 
(935): return null  NO 
(937): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  NO 
(938): $stack151 = new java.lang.NumberFormatException  NO 
(941): $stack16 = newarray (java.lang.String)[3]  NO 
(942): l2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1198): return null  NO 
(943): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  NO 
(944): l4 = 0  NO 
(945): l6 = lengthof $stack16  NO 
(946): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  NO 
(947): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(948): goto [?= (branch)]  NO 
(951): if l4 <= 0 goto $stack19 = l2 - 1  NO 
(952): l5#11 = 0  NO 
(953): l6 = l4  NO 
(954): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(955): if l5#11 == 48 goto l4 = l4 + 1  NO 
(956): goto [?= l6 = l2 - l4]  NO 
(958): l4 = l4 + 1  NO 
(960): l6 = l2 - l4  NO 
(1216): return null  NO 
(961): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(964): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(965): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(967): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(969): $stack19 = l2 - 1  NO 
(973): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  NO 
(974): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  NO 
(1234): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  NO 
(979): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  NO 
(1235): return null  NO 
(980): if l9 <= -1 goto (branch)  NO 
(981): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(1237): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  NO 
(982): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(983): $stack114 = new java.lang.NumberFormatException  NO 
(985): $stack116 = l9 + 1  NO 
(988): $stack107 = l9 + 1  NO 
(990): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(992): if l10 <= -1 goto (branch)  NO 
(993): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(994): $stack105 = new java.lang.NumberFormatException  NO 
(1251): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  NO 
(996): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1252): return null  NO 
(1254): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  NO 
(999): if $stack119 == 0 goto $stack101 = l2  NO 
(1255): $stack25 = new java.lang.NumberFormatException  NO 
(1001): l7#20 = null  NO 
(1257): l1 = 0  NO 
(1258): l2 = 10  NO 
(1003): if l11 == 0 goto (branch)  NO 
(1259): l3 = 0  NO 
(1004): if l10 <= -1 goto l8 = null  NO 
(1260): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  NO 
(1005): $stack98 = l10 + 1  NO 
(1261): if l4 != 45 goto (branch)  NO 
(1262): l3 = 1  NO 
(1007): l8 = null  NO 
(1263): l1 = 1  NO 
(1264): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  NO 
(1265): l1 = 1  NO 
(1010): $stack60 = l2 - 1  NO 
(1267): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  NO 
(1012): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  NO 
(1268): l2 = 16  NO 
(1269): l1 = l1 + 2  NO 
(1270): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  NO 
(1015): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(1271): l2 = 16  NO 
(1272): l1 = l1 + 1  NO 
(1017): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1273): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  NO 
(1274): l2 = 8  NO 
(1019): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1275): l1 = l1 + 1  NO 
(1278): $stack9 = new java.math.BigInteger  NO 
(1023): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1279): if l3 == 0 goto $stack11 = $stack9  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the lines which were covered will be shown: 

(1536): if l0 < 65 goto $stack1 = 0  YES
(1569): $stack2 = l0 - l1  YES
(1555): if l0 < 97 goto $stack1 = 0  YES
(1460): if l0 >= 128 goto $stack1 = 0  YES
(1479): if l0 < 32 goto $stack1 = 0  YES
(1517): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES

In the following all of the instructions which were not covered will be shown: 

(1441): if l0 == null goto $stack2 = l1  NO 
(1400): specialinvoke l0.<java.lang.Object: void <init>()>()  NO 
(1498): if l0 < 32 goto $stack1 = 1  NO 


comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the lines which were covered will be shown: 

(1760): if l1 == 4 goto return 30  YES
(1728): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1761): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1762): $stack4 = new java.lang.IllegalArgumentException  YES
(1827): return  YES
(1732): $stack1 = l0 & 3  YES
(1861): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1862): $stack8 = new java.lang.IllegalArgumentException  YES
(1812): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1684): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1815): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1818): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1819): $stack7 = new java.lang.IllegalArgumentException  YES
(1821): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1759): if l1 == 1 goto return 31  YES

In the following all of the instructions which were not covered will be shown: 

(1922): if l0 != 1 goto (branch)  NO 
(1923): if l0 != 2 goto (branch)  NO 
(1924): if l0 != 3 goto (branch)  NO 
(1925): if l0 != 4 goto (branch)  NO 
(1926): if l0 != 5 goto (branch)  NO 
(1927): if l0 != 6 goto (branch)  NO 
(1928): if l0 != 7 goto (branch)  NO 
(1929): if l0 != 8 goto (branch)  NO 
(1930): if l0 != 9 goto (branch)  NO 
(1931): if l0 != 10 goto (branch)  NO 
(1932): if l0 != 11 goto (branch)  NO 
(1933): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  NO 
(1935): $stack1 = new java.lang.IllegalArgumentException  NO 
(1813): $stack3 = new java.lang.IllegalArgumentException  NO 
(1816): $stack5 = new java.lang.IllegalArgumentException  NO 
(1822): $stack10 = new java.lang.IllegalArgumentException  NO 
(1824): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1729): $stack7 = l0 & 3  NO 
(1864): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  NO 
(1865): $stack37 = new java.lang.IllegalArgumentException  NO 
(1867): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1870): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  NO 
(1871): l4 = l0 % 100  NO 
(1872): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  NO 
(1874): if l4 >= 0 goto (branch)  NO 
(1875): l4 = l4 + 100  NO 
(1878): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  NO 
(1879): l4 = l4 + -1  NO 
(1880): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  NO 
(1881): l4 = 99  NO 
(1882): l5 = l5 + -1  NO 
(1887): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  NO 
(1888): $stack14 = l2 + l3  NO 
(1890): if l7 > 0 goto return l7  NO 
(1891): l7 = l7 + 7  NO 
(1894): return l7  NO 
(1901): $stack4 = new java.lang.StringBuilder  NO 
(1902): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  NO 
(1903): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  NO 
(1904): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  NO 
(1905): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1907): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  NO 
(1908): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  NO 
(1909): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  NO 
(1910): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1912): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  NO 
(1913): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the lines which were covered will be shown: 

(1619): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1641): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1609): if l0 == null goto $stack1 = 0  YES
(1579): $stack0 = newarray (java.lang.String)[0]  YES
(1630): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES

In the following all of the instructions which were not covered will be shown: 

(1664): $stack4 = lengthof l0  NO 
(1665): $stack14 = lengthof l0  NO 
(1667): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  NO 
(1668): l3 = l2  NO 
(1669): $stack12 = l0[l3]  NO 
(1574): specialinvoke l0.<java.lang.Object: void <init>()>()  NO 
(1670): return l3  NO 
(1673): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  NO 
(1674): l3 = l2  NO 
(1675): $stack9 = l0[l3]  NO 
(1676): return l3  NO 
(1680): return -1  NO 
(1661): if l0 == null goto return -1  NO 
(1662): return -1  NO 


comp5111.assignment.cut.Subject


In the following all of the lines which were covered will be shown: 

(12): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the lines which were covered will be shown: 

(100): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(103): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(104): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(105): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(42): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  YES
(14): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(16): $stack0 = newarray (java.lang.String)[0]  YES
(81): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(115): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(84): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(212): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(116): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(245): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(213): l2 = 0  YES
(117): return 0  YES
(214): $stack5 = l1[l2]  YES
(249): return l0  YES
(218): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(30): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  YES
(222): return 1  YES

In the following all of the instructions which were not covered will be shown: 

(265): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  NO 
(266): $stack39 = newarray (java.lang.String)[1]  NO 
(269): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(270): $stack11 = new java.util.ArrayList  NO 
(271): $stack12 = new java.lang.StringBuilder  NO 
(272): l4 = 0  NO 
(273): l6 = lengthof l1  NO 
(274): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(276): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(277): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(279): if l8 != 63 goto (branch)  NO 
(280): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(281): if l4 == 42 goto l4 = l8  NO 
(282): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(285): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(287): l4 = l8  NO 
(289): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(290): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(293): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(51): if l0 != 47 goto (branch)  NO 
(52): return 92  NO 
(54): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  NO 
(55): return 47  NO 
(57): $stack1 = new java.lang.IllegalArgumentException  NO 
(82): return null  NO 
(101): return -1  NO 
(121): l2 = 1  NO 
(122): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(123): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(124): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(125): return 0  NO 
(128): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(129): return 0  NO 
(134): return 1  NO 
(144): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  NO 
(145): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(146): return 0  NO 
(148): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(149): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  NO 
(150): return 0  NO 
(152): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  NO 
(153): if l1 == 0 goto $stack13 = lengthof l2  NO 
(154): $stack28 = new java.util.ArrayList  NO 
(155): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(157): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(158): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(159): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(161): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(163): $stack13 = lengthof l2  NO 
(164): return 0  NO 
(166): l3#27 = 0  NO 
(167): l4 = 0  NO 
(168): l5 = 0  NO 
(169): l6 = l2[l5]  NO 
(170): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  NO 
(171): l4 = l4 + 1  NO 
(172): if l4 <= 1 goto l3#27 = l3#27 + 1  NO 
(173): return 0  NO 
(176): l4 = 0  NO 
(178): $stack17 = lengthof l2  NO 
(179): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(180): return 0  NO 
(182): l3#27 = l3#27 + 2  NO 
(183): goto [?= l5 = l5 + 1]  NO 
(185): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  NO 
(186): return 0  NO 
(190): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  NO 
(192): return 0  NO 
(193): goto [?= (branch)]  NO 
(194): if l7 < 0 goto return 0  NO 
(195): return 0  NO 
(198): l3#27 = l3#27 + 1  NO 
(200): if l3#27 > 8 goto $stack15 = 0  NO 
(216): $stack13 = lengthof l1  NO 
(219): return 0  NO 
(232): if l0 == 47 goto $stack1 = 1  NO 
(246): $stack2 = new java.lang.IllegalArgumentException  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the lines which were covered will be shown: 

(512): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(535): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(663): if l0 == null goto return 1  YES
(666): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(667): l3 = l2 - 1  YES
(668): l4 = lengthof l1  YES
(412): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(669): l5 = l4 - 1  YES
(413): return 0  YES
(670): l6 = 0  YES
(671): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(415): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(672): l8 = 0  YES
(416): l2 = 1  YES
(673): $stack13 = l1[l8]  YES
(417): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(418): return 0  YES
(553): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(556): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(557): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(559): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(560): $stack11 = new java.util.ArrayList  YES
(688): return 1  YES
(561): l4 = 0  YES
(562): $stack12 = l2[0]  YES
(563): l6 = 0 + 1  YES
(448): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(451): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(323): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(452): if l1 >= 2 goto l2 = l1 - 1  YES
(580): $stack16 = new java.lang.String  YES
(581): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(455): l2 = l1 - 1  YES
(456): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(457): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(458): if l4 != 10 goto return l3  YES
(716): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(461): return l3  YES
(345): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(346): if l1 != 0 goto l2 = 0  YES
(347): return 1  YES
(349): l2 = 0  YES
(350): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(351): return 0  YES
(611): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(612): return 0  YES
(614): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(615): l3 = lengthof l1  YES
(616): l4 = l2 - 1  YES
(617): l5 = l3 - 1  YES
(490): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(618): l6 = 0  YES
(619): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(620): l8 = 0  YES
(621): $stack15 = l1[l8]  YES
(494): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(502): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(503): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(377): if l0 == null goto $stack2 = 1  YES
(505): if l2 != 10 goto (branch)  YES
(636): return 0  YES
(509): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(510): l1#2 = l1#2 + 1  YES

In the following all of the instructions which were not covered will be shown: 

(790): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  NO 
(791): if l2 != 0 goto (branch)  NO 
(792): return l0  NO 
(795): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  NO 
(796): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(797): l2 = l2 + -1  NO 
(799): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  NO 
(800): return l0  NO 
(802): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(803): l2 = l2 + -1  NO 
(806): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(297): specialinvoke l0.<java.lang.Object: void <init>()>()  NO 
(554): return null  NO 
(564): $stack23 = l2[l6]  NO 
(565): if l7 != l5 goto (branch)  NO 
(566): goto [?= l6 = l6 + 1]  NO 
(568): if l1 == 0 goto $stack25 = new java.lang.String  NO 
(569): l8 = l6 - 1  NO 
(570): if l8 == l4 goto (branch)  NO 
(571): $stack38 = new java.lang.String  NO 
(572): l4 = l8  NO 
(574): goto [?= l5 = l7]  NO 
(575): $stack25 = new java.lang.String  NO 
(576): l4 = l6  NO 
(833): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  NO 
(578): l5 = l7  NO 
(834): return 0  NO 
(836): l1 = 0  NO 
(837): l2 = 0  NO 
(838): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(839): l4 = 0  NO 
(840): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(841): return 1  NO 
(843): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(844): l1 = 1  NO 
(845): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(846): l2 = 1  NO 
(849): if l1 == 0 goto $stack8 = 0  NO 
(863): if l0 == null goto return l0  NO 
(864): return l0  NO 
(354): return 1  NO 
(867): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  NO 
(869): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(870): return l0  NO 
(873): l4 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(875): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  NO 
(877): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  NO 
(622): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(878): l0#4 = l2  NO 
(624): return 1  NO 
(880): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  NO 
(881): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  NO 
(626): if l8 != l5 goto (branch)  NO 
(628): return 1  NO 
(885): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  NO 
(630): if l6 >= l4 goto l8 = l8 + 1  NO 
(631): return 1  NO 
(887): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  NO 
(890): return l0#4  NO 
(664): return 1  NO 
(674): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(676): return 0  NO 
(421): return 1  NO 
(678): if l8 != l5 goto (branch)  NO 
(680): return 0  NO 
(682): if l6 >= l3 goto l8 = l8 + 1  NO 
(683): return 0  NO 
(449): return null  NO 
(453): return ""  NO 
(459): $stack11 = l2 - 1  NO 
(742): if l0 != l1 goto (branch)  NO 
(743): return 1  NO 
(745): if l0 == null goto return 0  NO 
(746): return 0  NO 
(491): return l0  NO 
(748): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(749): return 0  NO 
(495): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  NO 
(751): $stack6 = l0 instanceof java.lang.String  NO 
(496): if l1 == 13 goto return ""  NO 
(752): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  NO 
(497): return ""  NO 
(499): return l0  NO 
(755): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(756): l3 = 0  NO 
(757): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(758): return 0  NO 
(761): return 1  NO 
(506): $stack11 = l1#2 - 1  NO 
(507): l1#2 = l1#2 + -1  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the lines which were covered will be shown: 

(1381): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 

(1393): if l0 != l1 goto (branch)  NO 
(1394): return 0  NO 
(1396): if l0 == 0 goto $stack2 = -1  NO 



Coverage of Test Suite: comp5111.assignment.cut.RegressionTest0

comp5111.assignment.cut.Subject$NumberTasks
67 Lines from a total of 156 Lines were covered.
Percentage: 42.94871794871795%

comp5111.assignment.cut.Subject$CharTasks
9 Lines from a total of 9 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$GregorianTasks
54 Lines from a total of 62 Lines were covered.
Percentage: 87.09677419354838%

comp5111.assignment.cut.Subject$ArrayTasks
18 Lines from a total of 19 Lines were covered.
Percentage: 94.73684210526316%

comp5111.assignment.cut.Subject
1 Lines from a total of 1 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
50 Lines from a total of 98 Lines were covered.
Percentage: 51.02040816326531%

comp5111.assignment.cut.Subject$StringTasks
119 Lines from a total of 153 Lines were covered.
Percentage: 77.77777777777777%

comp5111.assignment.cut.Subject$BooleanTasks
4 Lines from a total of 4 Lines were covered.
Percentage: 100.0%

Overall Line Coverage: 64.14342629482071%



In the following part you can see which lines were executed. Before every statement you can see a number which indicates the line on which the statement was found
After each listed instructions you can find a NO if the line wasn't executed and a YES if it was. Only the first executed statement belonging to a specific line will be shown

comp5111.assignment.cut.Subject$NumberTasks


In the following all of the lines which were covered will be shown: 

(900): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1292): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1297): $stack3 = new java.lang.NumberFormatException  YES
(1299): $stack2 = new java.math.BigDecimal  YES
(1181): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1184): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1313): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1058): $stack88 = new java.lang.NumberFormatException  YES
(934): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(938): $stack151 = new java.lang.NumberFormatException  YES
(1197): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941): $stack16 = newarray (java.lang.String)[3]  YES
(942): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(943): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1200): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(944): l4 = 0  YES
(945): l6 = lengthof $stack16  YES
(946): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(1334): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1335): return 0  YES
(951): if l4 <= 0 goto $stack19 = l2 - 1  YES
(1337): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1340): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1215): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1346): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1219): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1350): l2 = 0  YES
(1351): l3 = l1  YES
(1352): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1353): if $stack13 == 0 goto (branch)  YES
(969): $stack19 = l2 - 1  YES
(1356): if l2 <= 1 goto (branch)  YES
(973): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(974): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(1359): if l4 != 0 goto l3 = l3 + 1  YES
(1360): return 0  YES
(1234): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(979): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(980): if l9 <= -1 goto (branch)  YES
(1237): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1115): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1116): if l2 == 45 goto $stack7 = 1  YES
(1118): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(992): if l10 <= -1 goto (branch)  YES
(1377): $stack2 = l0 - l1  YES
(1251): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(999): if $stack119 == 0 goto $stack101 = l2  YES
(1255): $stack25 = new java.lang.NumberFormatException  YES
(1257): l1 = 0  YES
(1001): l7#20 = null  YES
(1258): l2 = 10  YES
(1259): l3 = 0  YES
(1003): if l11 == 0 goto (branch)  YES
(1260): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1004): if l10 <= -1 goto l8 = null  YES
(1261): if l4 != 45 goto (branch)  YES
(1007): l8 = null  YES
(1264): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1010): $stack60 = l2 - 1  YES
(1267): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1012): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(1270): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1273): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1278): $stack9 = new java.math.BigInteger  YES

In the following all of the instructions which were not covered will be shown: 

(1026): $stack62 = new java.lang.NumberFormatException  NO 
(1030): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1031): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1034): return l13#63  NO 
(1293): return null  NO 
(1039): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1044): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1045): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1046): return l13#69  NO 
(1050): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1052): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1063): if l10 <= -1 goto l8 = null  NO 
(1064): $stack58 = l10 + 1  NO 
(1066): l8 = null  NO 
(1068): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1071): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1076): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1080): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1338): return 0  NO 
(1085): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1341): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1086): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1342): return 0  NO 
(1087): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1088): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1344): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1089): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1090): return l12#81  NO 
(1092): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1093): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1094): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1095): return l13#69  NO 
(1097): return l14  NO 
(1354): l2 = l2 + 1  NO 
(1101): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1357): return 0  NO 
(1102): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1363): return 1  NO 
(1148): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1160): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1161): return 1  NO 
(1163): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1164): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1165): return 0  NO 
(1168): return 1  NO 
(1182): return null  NO 
(935): return null  NO 
(1198): return null  NO 
(947): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(948): goto [?= (branch)]  NO 
(952): l5#11 = 0  NO 
(953): l6 = l4  NO 
(954): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(955): if l5#11 == 48 goto l4 = l4 + 1  NO 
(956): goto [?= l6 = l2 - l4]  NO 
(958): l4 = l4 + 1  NO 
(960): l6 = l2 - l4  NO 
(1216): return null  NO 
(961): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(964): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(965): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(967): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1235): return null  NO 
(981): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(982): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(983): $stack114 = new java.lang.NumberFormatException  NO 
(985): $stack116 = l9 + 1  NO 
(988): $stack107 = l9 + 1  NO 
(990): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(993): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(994): $stack105 = new java.lang.NumberFormatException  NO 
(996): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1252): return null  NO 
(1005): $stack98 = l10 + 1  NO 
(1262): l3 = 1  NO 
(1263): l1 = 1  NO 
(1265): l1 = 1  NO 
(1268): l2 = 16  NO 
(1269): l1 = l1 + 2  NO 
(1015): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(1271): l2 = 16  NO 
(1272): l1 = l1 + 1  NO 
(1017): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1274): l2 = 8  NO 
(1019): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1275): l1 = l1 + 1  NO 
(1023): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1279): if l3 == 0 goto $stack11 = $stack9  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the lines which were covered will be shown: 

(1536): if l0 < 65 goto $stack1 = 0  YES
(1569): $stack2 = l0 - l1  YES
(1441): if l0 == null goto $stack2 = l1  YES
(1555): if l0 < 97 goto $stack1 = 0  YES
(1460): if l0 >= 128 goto $stack1 = 0  YES
(1479): if l0 < 32 goto $stack1 = 0  YES
(1400): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1498): if l0 < 32 goto $stack1 = 1  YES
(1517): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the lines which were covered will be shown: 

(1922): if l0 != 1 goto (branch)  YES
(1923): if l0 != 2 goto (branch)  YES
(1924): if l0 != 3 goto (branch)  YES
(1925): if l0 != 4 goto (branch)  YES
(1926): if l0 != 5 goto (branch)  YES
(1927): if l0 != 6 goto (branch)  YES
(1928): if l0 != 7 goto (branch)  YES
(1929): if l0 != 8 goto (branch)  YES
(1930): if l0 != 9 goto (branch)  YES
(1931): if l0 != 10 goto (branch)  YES
(1812): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1684): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1815): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1816): $stack5 = new java.lang.IllegalArgumentException  YES
(1818): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1819): $stack7 = new java.lang.IllegalArgumentException  YES
(1821): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1827): return  YES
(1728): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1732): $stack1 = l0 & 3  YES
(1861): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1862): $stack8 = new java.lang.IllegalArgumentException  YES
(1864): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1865): $stack37 = new java.lang.IllegalArgumentException  YES
(1867): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1870): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1871): l4 = l0 % 100  YES
(1872): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1874): if l4 >= 0 goto (branch)  YES
(1875): l4 = l4 + 100  YES
(1878): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1879): l4 = l4 + -1  YES
(1880): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1881): l4 = 99  YES
(1882): l5 = l5 + -1  YES
(1759): if l1 == 1 goto return 31  YES
(1887): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1760): if l1 == 4 goto return 30  YES
(1888): $stack14 = l2 + l3  YES
(1761): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1762): $stack4 = new java.lang.IllegalArgumentException  YES
(1890): if l7 > 0 goto return l7  YES
(1891): l7 = l7 + 7  YES
(1894): return l7  YES
(1901): $stack4 = new java.lang.StringBuilder  YES
(1902): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  YES
(1903): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1904): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1905): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  YES
(1907): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1908): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1909): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1912): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1913): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  YES

In the following all of the instructions which were not covered will be shown: 

(1932): if l0 != 11 goto (branch)  NO 
(1933): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  NO 
(1935): $stack1 = new java.lang.IllegalArgumentException  NO 
(1813): $stack3 = new java.lang.IllegalArgumentException  NO 
(1822): $stack10 = new java.lang.IllegalArgumentException  NO 
(1824): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1729): $stack7 = l0 & 3  NO 
(1910): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the lines which were covered will be shown: 

(1664): $stack4 = lengthof l0  YES
(1665): $stack14 = lengthof l0  YES
(1667): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1668): l3 = l2  YES
(1669): $stack12 = l0[l3]  YES
(1574): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1641): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1609): if l0 == null goto $stack1 = 0  YES
(1673): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1674): l3 = l2  YES
(1579): $stack0 = newarray (java.lang.String)[0]  YES
(1675): $stack9 = l0[l3]  YES
(1676): return l3  YES
(1680): return -1  YES
(1619): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1661): if l0 == null goto return -1  YES
(1630): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1662): return -1  YES

In the following all of the instructions which were not covered will be shown: 

(1670): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the lines which were covered will be shown: 

(12): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the lines which were covered will be shown: 

(265): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(266): $stack39 = newarray (java.lang.String)[1]  YES
(14): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(16): $stack0 = newarray (java.lang.String)[0]  YES
(144): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(145): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(148): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(149): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(152): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(153): if l1 == 0 goto $stack13 = lengthof l2  YES
(30): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  YES
(163): $stack13 = lengthof l2  YES
(166): l3#27 = 0  YES
(167): l4 = 0  YES
(168): l5 = 0  YES
(169): l6 = l2[l5]  YES
(42): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  YES
(170): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(171): l4 = l4 + 1  YES
(172): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(176): l4 = 0  YES
(178): $stack17 = lengthof l2  YES
(51): if l0 != 47 goto (branch)  YES
(54): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(57): $stack1 = new java.lang.IllegalArgumentException  YES
(185): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(186): return 0  YES
(190): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(192): return 0  YES
(198): l3#27 = l3#27 + 1  YES
(200): if l3#27 > 8 goto $stack15 = 0  YES
(81): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(84): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(212): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(213): l2 = 0  YES
(214): $stack5 = l1[l2]  YES
(216): $stack13 = lengthof l1  YES
(218): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(219): return 0  YES
(222): return 1  YES
(100): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(103): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(104): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232): if l0 == 47 goto $stack1 = 1  YES
(105): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(115): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(116): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(245): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(117): return 0  YES
(249): return l0  YES

In the following all of the instructions which were not covered will be shown: 

(269): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(270): $stack11 = new java.util.ArrayList  NO 
(271): $stack12 = new java.lang.StringBuilder  NO 
(272): l4 = 0  NO 
(273): l6 = lengthof l1  NO 
(274): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(276): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(277): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(279): if l8 != 63 goto (branch)  NO 
(280): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(281): if l4 == 42 goto l4 = l8  NO 
(282): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(285): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(287): l4 = l8  NO 
(289): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(290): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(293): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(52): return 92  NO 
(55): return 47  NO 
(82): return null  NO 
(101): return -1  NO 
(121): l2 = 1  NO 
(122): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(123): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(124): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(125): return 0  NO 
(128): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(129): return 0  NO 
(134): return 1  NO 
(146): return 0  NO 
(150): return 0  NO 
(154): $stack28 = new java.util.ArrayList  NO 
(155): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(157): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(158): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(159): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(161): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(164): return 0  NO 
(173): return 0  NO 
(179): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(180): return 0  NO 
(182): l3#27 = l3#27 + 2  NO 
(183): goto [?= l5 = l5 + 1]  NO 
(193): goto [?= (branch)]  NO 
(194): if l7 < 0 goto return 0  NO 
(195): return 0  NO 
(246): $stack2 = new java.lang.IllegalArgumentException  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the lines which were covered will be shown: 

(512): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(790): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(535): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(791): if l2 != 0 goto (branch)  YES
(792): return l0  YES
(795): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(800): return l0  YES
(802): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(803): l2 = l2 + -1  YES
(806): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(553): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(297): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(556): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(557): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(559): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(560): $stack11 = new java.util.ArrayList  YES
(561): l4 = 0  YES
(562): $stack12 = l2[0]  YES
(563): l6 = 0 + 1  YES
(564): $stack23 = l2[l6]  YES
(565): if l7 != l5 goto (branch)  YES
(566): goto [?= l6 = l6 + 1]  YES
(568): if l1 == 0 goto $stack25 = new java.lang.String  YES
(575): $stack25 = new java.lang.String  YES
(576): l4 = l6  YES
(833): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(834): return 0  YES
(578): l5 = l7  YES
(323): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580): $stack16 = new java.lang.String  YES
(836): l1 = 0  YES
(581): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(837): l2 = 0  YES
(838): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(839): l4 = 0  YES
(840): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(845): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(846): l2 = 1  YES
(849): if l1 == 0 goto $stack8 = 0  YES
(345): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(346): if l1 != 0 goto l2 = 0  YES
(347): return 1  YES
(349): l2 = 0  YES
(350): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(351): return 0  YES
(863): if l0 == null goto return l0  YES
(611): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(867): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(612): return 0  YES
(869): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(614): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(870): return l0  YES
(615): l3 = lengthof l1  YES
(616): l4 = l2 - 1  YES
(617): l5 = l3 - 1  YES
(873): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(618): l6 = 0  YES
(619): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(875): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(620): l8 = 0  YES
(621): $stack15 = l1[l8]  YES
(877): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(878): l0#4 = l2  YES
(880): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(885): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(887): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(377): if l0 == null goto $stack2 = 1  YES
(890): return l0#4  YES
(636): return 0  YES
(663): if l0 == null goto return 1  YES
(664): return 1  YES
(666): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(667): l3 = l2 - 1  YES
(668): l4 = lengthof l1  YES
(412): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(669): l5 = l4 - 1  YES
(413): return 0  YES
(670): l6 = 0  YES
(671): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(415): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(672): l8 = 0  YES
(416): l2 = 1  YES
(673): $stack13 = l1[l8]  YES
(417): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(418): return 0  YES
(421): return 1  YES
(688): return 1  YES
(448): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(451): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(452): if l1 >= 2 goto l2 = l1 - 1  YES
(453): return ""  YES
(455): l2 = l1 - 1  YES
(456): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(457): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(458): if l4 != 10 goto return l3  YES
(716): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(461): return l3  YES
(742): if l0 != l1 goto (branch)  YES
(743): return 1  YES
(745): if l0 == null goto return 0  YES
(490): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(746): return 0  YES
(491): return l0  YES
(748): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(749): return 0  YES
(494): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(495): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(751): $stack6 = l0 instanceof java.lang.String  YES
(496): if l1 == 13 goto return ""  YES
(752): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(499): return l0  YES
(502): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(503): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(505): if l2 != 10 goto (branch)  YES
(509): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(510): l1#2 = l1#2 + 1  YES

In the following all of the instructions which were not covered will be shown: 

(796): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(797): l2 = l2 + -1  NO 
(554): return null  NO 
(569): l8 = l6 - 1  NO 
(570): if l8 == l4 goto (branch)  NO 
(571): $stack38 = new java.lang.String  NO 
(572): l4 = l8  NO 
(574): goto [?= l5 = l7]  NO 
(841): return 1  NO 
(844): l1 = 1  NO 
(864): return l0  NO 
(354): return 1  NO 
(622): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(624): return 1  NO 
(626): if l8 != l5 goto (branch)  NO 
(628): return 1  NO 
(630): if l6 >= l4 goto l8 = l8 + 1  NO 
(631): return 1  NO 
(674): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(676): return 0  NO 
(678): if l8 != l5 goto (branch)  NO 
(680): return 0  NO 
(682): if l6 >= l3 goto l8 = l8 + 1  NO 
(683): return 0  NO 
(449): return null  NO 
(459): $stack11 = l2 - 1  NO 
(497): return ""  NO 
(755): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(756): l3 = 0  NO 
(757): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(758): return 0  NO 
(761): return 1  NO 
(506): $stack11 = l1#2 - 1  NO 
(507): l1#2 = l1#2 + -1  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the lines which were covered will be shown: 

(1393): if l0 != l1 goto (branch)  YES
(1394): return 0  YES
(1396): if l0 == 0 goto $stack2 = -1  YES
(1381): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 




Coverage of Test Suite: comp5111.assignment.cut.RegressionTest1

comp5111.assignment.cut.Subject$NumberTasks
67 Lines from a total of 156 Lines were covered.
Percentage: 42.94871794871795%

comp5111.assignment.cut.Subject$CharTasks
9 Lines from a total of 9 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$GregorianTasks
58 Lines from a total of 62 Lines were covered.
Percentage: 93.54838709677419%

comp5111.assignment.cut.Subject$ArrayTasks
18 Lines from a total of 19 Lines were covered.
Percentage: 94.73684210526316%

comp5111.assignment.cut.Subject
1 Lines from a total of 1 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
50 Lines from a total of 98 Lines were covered.
Percentage: 51.02040816326531%

comp5111.assignment.cut.Subject$StringTasks
119 Lines from a total of 153 Lines were covered.
Percentage: 77.77777777777777%

comp5111.assignment.cut.Subject$BooleanTasks
4 Lines from a total of 4 Lines were covered.
Percentage: 100.0%

Overall Line Coverage: 64.9402390438247%



In the following part you can see which lines were executed. Before every statement you can see a number which indicates the line on which the statement was found
After each listed instructions you can find a NO if the line wasn't executed and a YES if it was. Only the first executed statement belonging to a specific line will be shown

comp5111.assignment.cut.Subject$NumberTasks


In the following all of the lines which were covered will be shown: 

(900): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1292): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1297): $stack3 = new java.lang.NumberFormatException  YES
(1299): $stack2 = new java.math.BigDecimal  YES
(1181): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1184): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1313): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1058): $stack88 = new java.lang.NumberFormatException  YES
(934): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(938): $stack151 = new java.lang.NumberFormatException  YES
(1197): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941): $stack16 = newarray (java.lang.String)[3]  YES
(942): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(943): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1200): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(944): l4 = 0  YES
(945): l6 = lengthof $stack16  YES
(946): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(1334): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1335): return 0  YES
(951): if l4 <= 0 goto $stack19 = l2 - 1  YES
(1337): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1340): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1215): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1346): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1219): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1350): l2 = 0  YES
(1351): l3 = l1  YES
(1352): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1353): if $stack13 == 0 goto (branch)  YES
(969): $stack19 = l2 - 1  YES
(1356): if l2 <= 1 goto (branch)  YES
(973): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(974): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(1359): if l4 != 0 goto l3 = l3 + 1  YES
(1360): return 0  YES
(1234): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(979): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(980): if l9 <= -1 goto (branch)  YES
(1237): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1115): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1116): if l2 == 45 goto $stack7 = 1  YES
(1118): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(992): if l10 <= -1 goto (branch)  YES
(1377): $stack2 = l0 - l1  YES
(1251): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(999): if $stack119 == 0 goto $stack101 = l2  YES
(1255): $stack25 = new java.lang.NumberFormatException  YES
(1257): l1 = 0  YES
(1001): l7#20 = null  YES
(1258): l2 = 10  YES
(1259): l3 = 0  YES
(1003): if l11 == 0 goto (branch)  YES
(1260): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1004): if l10 <= -1 goto l8 = null  YES
(1261): if l4 != 45 goto (branch)  YES
(1007): l8 = null  YES
(1264): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1010): $stack60 = l2 - 1  YES
(1267): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1012): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(1270): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1273): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1278): $stack9 = new java.math.BigInteger  YES

In the following all of the instructions which were not covered will be shown: 

(1026): $stack62 = new java.lang.NumberFormatException  NO 
(1030): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1031): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1034): return l13#63  NO 
(1293): return null  NO 
(1039): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1044): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1045): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1046): return l13#69  NO 
(1050): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1052): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1063): if l10 <= -1 goto l8 = null  NO 
(1064): $stack58 = l10 + 1  NO 
(1066): l8 = null  NO 
(1068): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1071): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1076): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1080): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1338): return 0  NO 
(1085): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1341): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1086): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1342): return 0  NO 
(1087): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1088): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1344): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1089): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1090): return l12#81  NO 
(1092): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1093): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1094): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1095): return l13#69  NO 
(1097): return l14  NO 
(1354): l2 = l2 + 1  NO 
(1101): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1357): return 0  NO 
(1102): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1363): return 1  NO 
(1148): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1160): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1161): return 1  NO 
(1163): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1164): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1165): return 0  NO 
(1168): return 1  NO 
(1182): return null  NO 
(935): return null  NO 
(1198): return null  NO 
(947): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(948): goto [?= (branch)]  NO 
(952): l5#11 = 0  NO 
(953): l6 = l4  NO 
(954): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(955): if l5#11 == 48 goto l4 = l4 + 1  NO 
(956): goto [?= l6 = l2 - l4]  NO 
(958): l4 = l4 + 1  NO 
(960): l6 = l2 - l4  NO 
(1216): return null  NO 
(961): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(964): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(965): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(967): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1235): return null  NO 
(981): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(982): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(983): $stack114 = new java.lang.NumberFormatException  NO 
(985): $stack116 = l9 + 1  NO 
(988): $stack107 = l9 + 1  NO 
(990): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(993): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(994): $stack105 = new java.lang.NumberFormatException  NO 
(996): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1252): return null  NO 
(1005): $stack98 = l10 + 1  NO 
(1262): l3 = 1  NO 
(1263): l1 = 1  NO 
(1265): l1 = 1  NO 
(1268): l2 = 16  NO 
(1269): l1 = l1 + 2  NO 
(1015): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(1271): l2 = 16  NO 
(1272): l1 = l1 + 1  NO 
(1017): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1274): l2 = 8  NO 
(1019): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1275): l1 = l1 + 1  NO 
(1023): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1279): if l3 == 0 goto $stack11 = $stack9  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the lines which were covered will be shown: 

(1536): if l0 < 65 goto $stack1 = 0  YES
(1569): $stack2 = l0 - l1  YES
(1441): if l0 == null goto $stack2 = l1  YES
(1555): if l0 < 97 goto $stack1 = 0  YES
(1460): if l0 >= 128 goto $stack1 = 0  YES
(1479): if l0 < 32 goto $stack1 = 0  YES
(1400): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1498): if l0 < 32 goto $stack1 = 1  YES
(1517): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the lines which were covered will be shown: 

(1922): if l0 != 1 goto (branch)  YES
(1923): if l0 != 2 goto (branch)  YES
(1924): if l0 != 3 goto (branch)  YES
(1925): if l0 != 4 goto (branch)  YES
(1926): if l0 != 5 goto (branch)  YES
(1927): if l0 != 6 goto (branch)  YES
(1928): if l0 != 7 goto (branch)  YES
(1929): if l0 != 8 goto (branch)  YES
(1930): if l0 != 9 goto (branch)  YES
(1931): if l0 != 10 goto (branch)  YES
(1932): if l0 != 11 goto (branch)  YES
(1933): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  YES
(1812): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1684): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1815): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1816): $stack5 = new java.lang.IllegalArgumentException  YES
(1818): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1819): $stack7 = new java.lang.IllegalArgumentException  YES
(1821): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1822): $stack10 = new java.lang.IllegalArgumentException  YES
(1824): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1827): return  YES
(1728): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1732): $stack1 = l0 & 3  YES
(1861): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1862): $stack8 = new java.lang.IllegalArgumentException  YES
(1864): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1865): $stack37 = new java.lang.IllegalArgumentException  YES
(1867): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1870): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1871): l4 = l0 % 100  YES
(1872): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1874): if l4 >= 0 goto (branch)  YES
(1875): l4 = l4 + 100  YES
(1878): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1879): l4 = l4 + -1  YES
(1880): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1881): l4 = 99  YES
(1882): l5 = l5 + -1  YES
(1759): if l1 == 1 goto return 31  YES
(1887): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1760): if l1 == 4 goto return 30  YES
(1888): $stack14 = l2 + l3  YES
(1761): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1762): $stack4 = new java.lang.IllegalArgumentException  YES
(1890): if l7 > 0 goto return l7  YES
(1891): l7 = l7 + 7  YES
(1894): return l7  YES
(1901): $stack4 = new java.lang.StringBuilder  YES
(1902): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  YES
(1903): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1904): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1905): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  YES
(1907): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1908): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1909): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1912): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1913): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  YES

In the following all of the instructions which were not covered will be shown: 

(1935): $stack1 = new java.lang.IllegalArgumentException  NO 
(1813): $stack3 = new java.lang.IllegalArgumentException  NO 
(1729): $stack7 = l0 & 3  NO 
(1910): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the lines which were covered will be shown: 

(1664): $stack4 = lengthof l0  YES
(1665): $stack14 = lengthof l0  YES
(1667): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1668): l3 = l2  YES
(1669): $stack12 = l0[l3]  YES
(1574): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1641): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1609): if l0 == null goto $stack1 = 0  YES
(1673): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1674): l3 = l2  YES
(1579): $stack0 = newarray (java.lang.String)[0]  YES
(1675): $stack9 = l0[l3]  YES
(1676): return l3  YES
(1680): return -1  YES
(1619): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1661): if l0 == null goto return -1  YES
(1630): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1662): return -1  YES

In the following all of the instructions which were not covered will be shown: 

(1670): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the lines which were covered will be shown: 

(12): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the lines which were covered will be shown: 

(265): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(266): $stack39 = newarray (java.lang.String)[1]  YES
(14): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(16): $stack0 = newarray (java.lang.String)[0]  YES
(144): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(145): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(148): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(149): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(152): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(153): if l1 == 0 goto $stack13 = lengthof l2  YES
(30): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  YES
(163): $stack13 = lengthof l2  YES
(166): l3#27 = 0  YES
(167): l4 = 0  YES
(168): l5 = 0  YES
(169): l6 = l2[l5]  YES
(42): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  YES
(170): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(171): l4 = l4 + 1  YES
(172): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(176): l4 = 0  YES
(178): $stack17 = lengthof l2  YES
(51): if l0 != 47 goto (branch)  YES
(54): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(57): $stack1 = new java.lang.IllegalArgumentException  YES
(185): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(186): return 0  YES
(190): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(192): return 0  YES
(198): l3#27 = l3#27 + 1  YES
(200): if l3#27 > 8 goto $stack15 = 0  YES
(81): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(84): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(212): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(213): l2 = 0  YES
(214): $stack5 = l1[l2]  YES
(216): $stack13 = lengthof l1  YES
(218): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(219): return 0  YES
(222): return 1  YES
(100): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(103): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(104): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232): if l0 == 47 goto $stack1 = 1  YES
(105): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(115): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(116): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(245): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(117): return 0  YES
(249): return l0  YES

In the following all of the instructions which were not covered will be shown: 

(269): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(270): $stack11 = new java.util.ArrayList  NO 
(271): $stack12 = new java.lang.StringBuilder  NO 
(272): l4 = 0  NO 
(273): l6 = lengthof l1  NO 
(274): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(276): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(277): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(279): if l8 != 63 goto (branch)  NO 
(280): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(281): if l4 == 42 goto l4 = l8  NO 
(282): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(285): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(287): l4 = l8  NO 
(289): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(290): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(293): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(52): return 92  NO 
(55): return 47  NO 
(82): return null  NO 
(101): return -1  NO 
(121): l2 = 1  NO 
(122): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(123): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(124): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(125): return 0  NO 
(128): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(129): return 0  NO 
(134): return 1  NO 
(146): return 0  NO 
(150): return 0  NO 
(154): $stack28 = new java.util.ArrayList  NO 
(155): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(157): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(158): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(159): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(161): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(164): return 0  NO 
(173): return 0  NO 
(179): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(180): return 0  NO 
(182): l3#27 = l3#27 + 2  NO 
(183): goto [?= l5 = l5 + 1]  NO 
(193): goto [?= (branch)]  NO 
(194): if l7 < 0 goto return 0  NO 
(195): return 0  NO 
(246): $stack2 = new java.lang.IllegalArgumentException  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the lines which were covered will be shown: 

(512): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(790): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(535): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(791): if l2 != 0 goto (branch)  YES
(792): return l0  YES
(795): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(800): return l0  YES
(802): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(803): l2 = l2 + -1  YES
(806): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(553): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(297): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(556): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(557): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(559): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(560): $stack11 = new java.util.ArrayList  YES
(561): l4 = 0  YES
(562): $stack12 = l2[0]  YES
(563): l6 = 0 + 1  YES
(564): $stack23 = l2[l6]  YES
(565): if l7 != l5 goto (branch)  YES
(566): goto [?= l6 = l6 + 1]  YES
(568): if l1 == 0 goto $stack25 = new java.lang.String  YES
(575): $stack25 = new java.lang.String  YES
(576): l4 = l6  YES
(833): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(834): return 0  YES
(578): l5 = l7  YES
(323): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580): $stack16 = new java.lang.String  YES
(836): l1 = 0  YES
(581): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(837): l2 = 0  YES
(838): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(839): l4 = 0  YES
(840): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(845): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(846): l2 = 1  YES
(849): if l1 == 0 goto $stack8 = 0  YES
(345): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(346): if l1 != 0 goto l2 = 0  YES
(347): return 1  YES
(349): l2 = 0  YES
(350): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(351): return 0  YES
(863): if l0 == null goto return l0  YES
(611): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(867): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(612): return 0  YES
(869): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(614): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(870): return l0  YES
(615): l3 = lengthof l1  YES
(616): l4 = l2 - 1  YES
(617): l5 = l3 - 1  YES
(873): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(618): l6 = 0  YES
(619): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(875): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(620): l8 = 0  YES
(621): $stack15 = l1[l8]  YES
(877): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(878): l0#4 = l2  YES
(880): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(885): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(887): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(377): if l0 == null goto $stack2 = 1  YES
(890): return l0#4  YES
(636): return 0  YES
(663): if l0 == null goto return 1  YES
(664): return 1  YES
(666): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(667): l3 = l2 - 1  YES
(668): l4 = lengthof l1  YES
(412): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(669): l5 = l4 - 1  YES
(413): return 0  YES
(670): l6 = 0  YES
(671): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(415): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(672): l8 = 0  YES
(416): l2 = 1  YES
(673): $stack13 = l1[l8]  YES
(417): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(418): return 0  YES
(421): return 1  YES
(688): return 1  YES
(448): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(451): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(452): if l1 >= 2 goto l2 = l1 - 1  YES
(453): return ""  YES
(455): l2 = l1 - 1  YES
(456): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(457): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(458): if l4 != 10 goto return l3  YES
(716): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(461): return l3  YES
(742): if l0 != l1 goto (branch)  YES
(743): return 1  YES
(745): if l0 == null goto return 0  YES
(490): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(746): return 0  YES
(491): return l0  YES
(748): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(749): return 0  YES
(494): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(495): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(751): $stack6 = l0 instanceof java.lang.String  YES
(496): if l1 == 13 goto return ""  YES
(752): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(499): return l0  YES
(502): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(503): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(505): if l2 != 10 goto (branch)  YES
(509): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(510): l1#2 = l1#2 + 1  YES

In the following all of the instructions which were not covered will be shown: 

(796): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(797): l2 = l2 + -1  NO 
(554): return null  NO 
(569): l8 = l6 - 1  NO 
(570): if l8 == l4 goto (branch)  NO 
(571): $stack38 = new java.lang.String  NO 
(572): l4 = l8  NO 
(574): goto [?= l5 = l7]  NO 
(841): return 1  NO 
(844): l1 = 1  NO 
(864): return l0  NO 
(354): return 1  NO 
(622): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(624): return 1  NO 
(626): if l8 != l5 goto (branch)  NO 
(628): return 1  NO 
(630): if l6 >= l4 goto l8 = l8 + 1  NO 
(631): return 1  NO 
(674): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(676): return 0  NO 
(678): if l8 != l5 goto (branch)  NO 
(680): return 0  NO 
(682): if l6 >= l3 goto l8 = l8 + 1  NO 
(683): return 0  NO 
(449): return null  NO 
(459): $stack11 = l2 - 1  NO 
(497): return ""  NO 
(755): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(756): l3 = 0  NO 
(757): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(758): return 0  NO 
(761): return 1  NO 
(506): $stack11 = l1#2 - 1  NO 
(507): l1#2 = l1#2 + -1  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the lines which were covered will be shown: 

(1393): if l0 != l1 goto (branch)  YES
(1394): return 0  YES
(1396): if l0 == 0 goto $stack2 = -1  YES
(1381): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 




Coverage of Test Suite: comp5111.assignment.cut.RegressionTest2

comp5111.assignment.cut.Subject$NumberTasks
67 Lines from a total of 156 Lines were covered.
Percentage: 42.94871794871795%

comp5111.assignment.cut.Subject$CharTasks
9 Lines from a total of 9 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$GregorianTasks
58 Lines from a total of 62 Lines were covered.
Percentage: 93.54838709677419%

comp5111.assignment.cut.Subject$ArrayTasks
18 Lines from a total of 19 Lines were covered.
Percentage: 94.73684210526316%

comp5111.assignment.cut.Subject
1 Lines from a total of 1 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
50 Lines from a total of 98 Lines were covered.
Percentage: 51.02040816326531%

comp5111.assignment.cut.Subject$StringTasks
119 Lines from a total of 153 Lines were covered.
Percentage: 77.77777777777777%

comp5111.assignment.cut.Subject$BooleanTasks
4 Lines from a total of 4 Lines were covered.
Percentage: 100.0%

Overall Line Coverage: 64.9402390438247%



In the following part you can see which lines were executed. Before every statement you can see a number which indicates the line on which the statement was found
After each listed instructions you can find a NO if the line wasn't executed and a YES if it was. Only the first executed statement belonging to a specific line will be shown

comp5111.assignment.cut.Subject$NumberTasks


In the following all of the lines which were covered will be shown: 

(900): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1292): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1297): $stack3 = new java.lang.NumberFormatException  YES
(1299): $stack2 = new java.math.BigDecimal  YES
(1181): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1184): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1313): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1058): $stack88 = new java.lang.NumberFormatException  YES
(934): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(938): $stack151 = new java.lang.NumberFormatException  YES
(1197): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941): $stack16 = newarray (java.lang.String)[3]  YES
(942): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(943): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1200): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(944): l4 = 0  YES
(945): l6 = lengthof $stack16  YES
(946): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(1334): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1335): return 0  YES
(951): if l4 <= 0 goto $stack19 = l2 - 1  YES
(1337): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1340): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1215): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1346): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1219): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1350): l2 = 0  YES
(1351): l3 = l1  YES
(1352): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1353): if $stack13 == 0 goto (branch)  YES
(969): $stack19 = l2 - 1  YES
(1356): if l2 <= 1 goto (branch)  YES
(973): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(974): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(1359): if l4 != 0 goto l3 = l3 + 1  YES
(1360): return 0  YES
(1234): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(979): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(980): if l9 <= -1 goto (branch)  YES
(1237): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1115): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1116): if l2 == 45 goto $stack7 = 1  YES
(1118): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(992): if l10 <= -1 goto (branch)  YES
(1377): $stack2 = l0 - l1  YES
(1251): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(999): if $stack119 == 0 goto $stack101 = l2  YES
(1255): $stack25 = new java.lang.NumberFormatException  YES
(1257): l1 = 0  YES
(1001): l7#20 = null  YES
(1258): l2 = 10  YES
(1259): l3 = 0  YES
(1003): if l11 == 0 goto (branch)  YES
(1260): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1004): if l10 <= -1 goto l8 = null  YES
(1261): if l4 != 45 goto (branch)  YES
(1007): l8 = null  YES
(1264): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1010): $stack60 = l2 - 1  YES
(1267): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1012): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(1270): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1273): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1278): $stack9 = new java.math.BigInteger  YES

In the following all of the instructions which were not covered will be shown: 

(1026): $stack62 = new java.lang.NumberFormatException  NO 
(1030): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1031): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1034): return l13#63  NO 
(1293): return null  NO 
(1039): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1044): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1045): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1046): return l13#69  NO 
(1050): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1052): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1063): if l10 <= -1 goto l8 = null  NO 
(1064): $stack58 = l10 + 1  NO 
(1066): l8 = null  NO 
(1068): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1071): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1076): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1080): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1338): return 0  NO 
(1085): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1341): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1086): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1342): return 0  NO 
(1087): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1088): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1344): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1089): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1090): return l12#81  NO 
(1092): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1093): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1094): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1095): return l13#69  NO 
(1097): return l14  NO 
(1354): l2 = l2 + 1  NO 
(1101): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1357): return 0  NO 
(1102): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1363): return 1  NO 
(1148): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1160): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1161): return 1  NO 
(1163): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1164): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1165): return 0  NO 
(1168): return 1  NO 
(1182): return null  NO 
(935): return null  NO 
(1198): return null  NO 
(947): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(948): goto [?= (branch)]  NO 
(952): l5#11 = 0  NO 
(953): l6 = l4  NO 
(954): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(955): if l5#11 == 48 goto l4 = l4 + 1  NO 
(956): goto [?= l6 = l2 - l4]  NO 
(958): l4 = l4 + 1  NO 
(960): l6 = l2 - l4  NO 
(1216): return null  NO 
(961): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(964): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(965): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(967): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1235): return null  NO 
(981): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(982): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(983): $stack114 = new java.lang.NumberFormatException  NO 
(985): $stack116 = l9 + 1  NO 
(988): $stack107 = l9 + 1  NO 
(990): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(993): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(994): $stack105 = new java.lang.NumberFormatException  NO 
(996): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1252): return null  NO 
(1005): $stack98 = l10 + 1  NO 
(1262): l3 = 1  NO 
(1263): l1 = 1  NO 
(1265): l1 = 1  NO 
(1268): l2 = 16  NO 
(1269): l1 = l1 + 2  NO 
(1015): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(1271): l2 = 16  NO 
(1272): l1 = l1 + 1  NO 
(1017): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1274): l2 = 8  NO 
(1019): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1275): l1 = l1 + 1  NO 
(1023): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1279): if l3 == 0 goto $stack11 = $stack9  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the lines which were covered will be shown: 

(1536): if l0 < 65 goto $stack1 = 0  YES
(1569): $stack2 = l0 - l1  YES
(1441): if l0 == null goto $stack2 = l1  YES
(1555): if l0 < 97 goto $stack1 = 0  YES
(1460): if l0 >= 128 goto $stack1 = 0  YES
(1479): if l0 < 32 goto $stack1 = 0  YES
(1400): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1498): if l0 < 32 goto $stack1 = 1  YES
(1517): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the lines which were covered will be shown: 

(1922): if l0 != 1 goto (branch)  YES
(1923): if l0 != 2 goto (branch)  YES
(1924): if l0 != 3 goto (branch)  YES
(1925): if l0 != 4 goto (branch)  YES
(1926): if l0 != 5 goto (branch)  YES
(1927): if l0 != 6 goto (branch)  YES
(1928): if l0 != 7 goto (branch)  YES
(1929): if l0 != 8 goto (branch)  YES
(1930): if l0 != 9 goto (branch)  YES
(1931): if l0 != 10 goto (branch)  YES
(1932): if l0 != 11 goto (branch)  YES
(1933): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  YES
(1812): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1684): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1815): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1816): $stack5 = new java.lang.IllegalArgumentException  YES
(1818): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1819): $stack7 = new java.lang.IllegalArgumentException  YES
(1821): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1822): $stack10 = new java.lang.IllegalArgumentException  YES
(1824): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1827): return  YES
(1728): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1732): $stack1 = l0 & 3  YES
(1861): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1862): $stack8 = new java.lang.IllegalArgumentException  YES
(1864): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1865): $stack37 = new java.lang.IllegalArgumentException  YES
(1867): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1870): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1871): l4 = l0 % 100  YES
(1872): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1874): if l4 >= 0 goto (branch)  YES
(1875): l4 = l4 + 100  YES
(1878): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1879): l4 = l4 + -1  YES
(1880): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1881): l4 = 99  YES
(1882): l5 = l5 + -1  YES
(1759): if l1 == 1 goto return 31  YES
(1887): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1760): if l1 == 4 goto return 30  YES
(1888): $stack14 = l2 + l3  YES
(1761): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1762): $stack4 = new java.lang.IllegalArgumentException  YES
(1890): if l7 > 0 goto return l7  YES
(1891): l7 = l7 + 7  YES
(1894): return l7  YES
(1901): $stack4 = new java.lang.StringBuilder  YES
(1902): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  YES
(1903): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1904): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1905): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  YES
(1907): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1908): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1909): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1912): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1913): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  YES

In the following all of the instructions which were not covered will be shown: 

(1935): $stack1 = new java.lang.IllegalArgumentException  NO 
(1813): $stack3 = new java.lang.IllegalArgumentException  NO 
(1729): $stack7 = l0 & 3  NO 
(1910): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the lines which were covered will be shown: 

(1664): $stack4 = lengthof l0  YES
(1665): $stack14 = lengthof l0  YES
(1667): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1668): l3 = l2  YES
(1669): $stack12 = l0[l3]  YES
(1574): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1641): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1609): if l0 == null goto $stack1 = 0  YES
(1673): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1674): l3 = l2  YES
(1579): $stack0 = newarray (java.lang.String)[0]  YES
(1675): $stack9 = l0[l3]  YES
(1676): return l3  YES
(1680): return -1  YES
(1619): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1661): if l0 == null goto return -1  YES
(1630): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1662): return -1  YES

In the following all of the instructions which were not covered will be shown: 

(1670): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the lines which were covered will be shown: 

(12): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the lines which were covered will be shown: 

(265): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(266): $stack39 = newarray (java.lang.String)[1]  YES
(14): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(16): $stack0 = newarray (java.lang.String)[0]  YES
(144): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(145): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(148): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(149): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(152): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(153): if l1 == 0 goto $stack13 = lengthof l2  YES
(30): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  YES
(163): $stack13 = lengthof l2  YES
(166): l3#27 = 0  YES
(167): l4 = 0  YES
(168): l5 = 0  YES
(169): l6 = l2[l5]  YES
(42): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  YES
(170): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(171): l4 = l4 + 1  YES
(172): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(176): l4 = 0  YES
(178): $stack17 = lengthof l2  YES
(51): if l0 != 47 goto (branch)  YES
(54): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(57): $stack1 = new java.lang.IllegalArgumentException  YES
(185): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(186): return 0  YES
(190): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(192): return 0  YES
(198): l3#27 = l3#27 + 1  YES
(200): if l3#27 > 8 goto $stack15 = 0  YES
(81): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(84): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(212): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(213): l2 = 0  YES
(214): $stack5 = l1[l2]  YES
(216): $stack13 = lengthof l1  YES
(218): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(219): return 0  YES
(222): return 1  YES
(100): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(103): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(104): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232): if l0 == 47 goto $stack1 = 1  YES
(105): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(115): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(116): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(245): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(117): return 0  YES
(249): return l0  YES

In the following all of the instructions which were not covered will be shown: 

(269): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(270): $stack11 = new java.util.ArrayList  NO 
(271): $stack12 = new java.lang.StringBuilder  NO 
(272): l4 = 0  NO 
(273): l6 = lengthof l1  NO 
(274): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(276): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(277): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(279): if l8 != 63 goto (branch)  NO 
(280): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(281): if l4 == 42 goto l4 = l8  NO 
(282): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(285): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(287): l4 = l8  NO 
(289): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(290): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(293): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(52): return 92  NO 
(55): return 47  NO 
(82): return null  NO 
(101): return -1  NO 
(121): l2 = 1  NO 
(122): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(123): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(124): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(125): return 0  NO 
(128): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(129): return 0  NO 
(134): return 1  NO 
(146): return 0  NO 
(150): return 0  NO 
(154): $stack28 = new java.util.ArrayList  NO 
(155): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(157): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(158): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(159): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(161): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(164): return 0  NO 
(173): return 0  NO 
(179): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(180): return 0  NO 
(182): l3#27 = l3#27 + 2  NO 
(183): goto [?= l5 = l5 + 1]  NO 
(193): goto [?= (branch)]  NO 
(194): if l7 < 0 goto return 0  NO 
(195): return 0  NO 
(246): $stack2 = new java.lang.IllegalArgumentException  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the lines which were covered will be shown: 

(512): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(790): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(535): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(791): if l2 != 0 goto (branch)  YES
(792): return l0  YES
(795): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(800): return l0  YES
(802): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(803): l2 = l2 + -1  YES
(806): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(553): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(297): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(556): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(557): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(559): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(560): $stack11 = new java.util.ArrayList  YES
(561): l4 = 0  YES
(562): $stack12 = l2[0]  YES
(563): l6 = 0 + 1  YES
(564): $stack23 = l2[l6]  YES
(565): if l7 != l5 goto (branch)  YES
(566): goto [?= l6 = l6 + 1]  YES
(568): if l1 == 0 goto $stack25 = new java.lang.String  YES
(575): $stack25 = new java.lang.String  YES
(576): l4 = l6  YES
(833): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(834): return 0  YES
(578): l5 = l7  YES
(323): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580): $stack16 = new java.lang.String  YES
(836): l1 = 0  YES
(581): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(837): l2 = 0  YES
(838): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(839): l4 = 0  YES
(840): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(845): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(846): l2 = 1  YES
(849): if l1 == 0 goto $stack8 = 0  YES
(345): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(346): if l1 != 0 goto l2 = 0  YES
(347): return 1  YES
(349): l2 = 0  YES
(350): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(351): return 0  YES
(863): if l0 == null goto return l0  YES
(611): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(867): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(612): return 0  YES
(869): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(614): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(870): return l0  YES
(615): l3 = lengthof l1  YES
(616): l4 = l2 - 1  YES
(617): l5 = l3 - 1  YES
(873): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(618): l6 = 0  YES
(619): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(875): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(620): l8 = 0  YES
(621): $stack15 = l1[l8]  YES
(877): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(878): l0#4 = l2  YES
(880): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(885): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(887): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(377): if l0 == null goto $stack2 = 1  YES
(890): return l0#4  YES
(636): return 0  YES
(663): if l0 == null goto return 1  YES
(664): return 1  YES
(666): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(667): l3 = l2 - 1  YES
(668): l4 = lengthof l1  YES
(412): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(669): l5 = l4 - 1  YES
(413): return 0  YES
(670): l6 = 0  YES
(671): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(415): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(672): l8 = 0  YES
(416): l2 = 1  YES
(673): $stack13 = l1[l8]  YES
(417): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(418): return 0  YES
(421): return 1  YES
(688): return 1  YES
(448): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(451): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(452): if l1 >= 2 goto l2 = l1 - 1  YES
(453): return ""  YES
(455): l2 = l1 - 1  YES
(456): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(457): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(458): if l4 != 10 goto return l3  YES
(716): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(461): return l3  YES
(742): if l0 != l1 goto (branch)  YES
(743): return 1  YES
(745): if l0 == null goto return 0  YES
(490): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(746): return 0  YES
(491): return l0  YES
(748): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(749): return 0  YES
(494): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(495): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(751): $stack6 = l0 instanceof java.lang.String  YES
(496): if l1 == 13 goto return ""  YES
(752): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(499): return l0  YES
(502): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(503): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(505): if l2 != 10 goto (branch)  YES
(509): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(510): l1#2 = l1#2 + 1  YES

In the following all of the instructions which were not covered will be shown: 

(796): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(797): l2 = l2 + -1  NO 
(554): return null  NO 
(569): l8 = l6 - 1  NO 
(570): if l8 == l4 goto (branch)  NO 
(571): $stack38 = new java.lang.String  NO 
(572): l4 = l8  NO 
(574): goto [?= l5 = l7]  NO 
(841): return 1  NO 
(844): l1 = 1  NO 
(864): return l0  NO 
(354): return 1  NO 
(622): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(624): return 1  NO 
(626): if l8 != l5 goto (branch)  NO 
(628): return 1  NO 
(630): if l6 >= l4 goto l8 = l8 + 1  NO 
(631): return 1  NO 
(674): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(676): return 0  NO 
(678): if l8 != l5 goto (branch)  NO 
(680): return 0  NO 
(682): if l6 >= l3 goto l8 = l8 + 1  NO 
(683): return 0  NO 
(449): return null  NO 
(459): $stack11 = l2 - 1  NO 
(497): return ""  NO 
(755): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(756): l3 = 0  NO 
(757): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(758): return 0  NO 
(761): return 1  NO 
(506): $stack11 = l1#2 - 1  NO 
(507): l1#2 = l1#2 + -1  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the lines which were covered will be shown: 

(1393): if l0 != l1 goto (branch)  YES
(1394): return 0  YES
(1396): if l0 == 0 goto $stack2 = -1  YES
(1381): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 




Coverage of Test Suite: comp5111.assignment.cut.RegressionTest3

comp5111.assignment.cut.Subject$NumberTasks
67 Lines from a total of 156 Lines were covered.
Percentage: 42.94871794871795%

comp5111.assignment.cut.Subject$CharTasks
9 Lines from a total of 9 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$GregorianTasks
58 Lines from a total of 62 Lines were covered.
Percentage: 93.54838709677419%

comp5111.assignment.cut.Subject$ArrayTasks
18 Lines from a total of 19 Lines were covered.
Percentage: 94.73684210526316%

comp5111.assignment.cut.Subject
1 Lines from a total of 1 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
50 Lines from a total of 98 Lines were covered.
Percentage: 51.02040816326531%

comp5111.assignment.cut.Subject$StringTasks
119 Lines from a total of 153 Lines were covered.
Percentage: 77.77777777777777%

comp5111.assignment.cut.Subject$BooleanTasks
4 Lines from a total of 4 Lines were covered.
Percentage: 100.0%

Overall Line Coverage: 64.9402390438247%



In the following part you can see which lines were executed. Before every statement you can see a number which indicates the line on which the statement was found
After each listed instructions you can find a NO if the line wasn't executed and a YES if it was. Only the first executed statement belonging to a specific line will be shown

comp5111.assignment.cut.Subject$NumberTasks


In the following all of the lines which were covered will be shown: 

(900): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1292): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1297): $stack3 = new java.lang.NumberFormatException  YES
(1299): $stack2 = new java.math.BigDecimal  YES
(1181): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1184): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1313): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1058): $stack88 = new java.lang.NumberFormatException  YES
(934): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(938): $stack151 = new java.lang.NumberFormatException  YES
(1197): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941): $stack16 = newarray (java.lang.String)[3]  YES
(942): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(943): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1200): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(944): l4 = 0  YES
(945): l6 = lengthof $stack16  YES
(946): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(1334): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1335): return 0  YES
(951): if l4 <= 0 goto $stack19 = l2 - 1  YES
(1337): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1340): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1215): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1346): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1219): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1350): l2 = 0  YES
(1351): l3 = l1  YES
(1352): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1353): if $stack13 == 0 goto (branch)  YES
(969): $stack19 = l2 - 1  YES
(1356): if l2 <= 1 goto (branch)  YES
(973): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(974): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(1359): if l4 != 0 goto l3 = l3 + 1  YES
(1360): return 0  YES
(1234): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(979): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(980): if l9 <= -1 goto (branch)  YES
(1237): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1115): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1116): if l2 == 45 goto $stack7 = 1  YES
(1118): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(992): if l10 <= -1 goto (branch)  YES
(1377): $stack2 = l0 - l1  YES
(1251): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(999): if $stack119 == 0 goto $stack101 = l2  YES
(1255): $stack25 = new java.lang.NumberFormatException  YES
(1257): l1 = 0  YES
(1001): l7#20 = null  YES
(1258): l2 = 10  YES
(1259): l3 = 0  YES
(1003): if l11 == 0 goto (branch)  YES
(1260): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1004): if l10 <= -1 goto l8 = null  YES
(1261): if l4 != 45 goto (branch)  YES
(1007): l8 = null  YES
(1264): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1010): $stack60 = l2 - 1  YES
(1267): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1012): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(1270): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1273): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1278): $stack9 = new java.math.BigInteger  YES

In the following all of the instructions which were not covered will be shown: 

(1026): $stack62 = new java.lang.NumberFormatException  NO 
(1030): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1031): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1034): return l13#63  NO 
(1293): return null  NO 
(1039): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1044): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1045): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1046): return l13#69  NO 
(1050): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1052): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1063): if l10 <= -1 goto l8 = null  NO 
(1064): $stack58 = l10 + 1  NO 
(1066): l8 = null  NO 
(1068): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1071): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1076): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1080): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1338): return 0  NO 
(1085): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1341): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1086): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1342): return 0  NO 
(1087): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1088): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1344): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1089): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1090): return l12#81  NO 
(1092): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1093): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1094): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1095): return l13#69  NO 
(1097): return l14  NO 
(1354): l2 = l2 + 1  NO 
(1101): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1357): return 0  NO 
(1102): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1363): return 1  NO 
(1148): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1160): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1161): return 1  NO 
(1163): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1164): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1165): return 0  NO 
(1168): return 1  NO 
(1182): return null  NO 
(935): return null  NO 
(1198): return null  NO 
(947): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(948): goto [?= (branch)]  NO 
(952): l5#11 = 0  NO 
(953): l6 = l4  NO 
(954): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(955): if l5#11 == 48 goto l4 = l4 + 1  NO 
(956): goto [?= l6 = l2 - l4]  NO 
(958): l4 = l4 + 1  NO 
(960): l6 = l2 - l4  NO 
(1216): return null  NO 
(961): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(964): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(965): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(967): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1235): return null  NO 
(981): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(982): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(983): $stack114 = new java.lang.NumberFormatException  NO 
(985): $stack116 = l9 + 1  NO 
(988): $stack107 = l9 + 1  NO 
(990): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(993): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(994): $stack105 = new java.lang.NumberFormatException  NO 
(996): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1252): return null  NO 
(1005): $stack98 = l10 + 1  NO 
(1262): l3 = 1  NO 
(1263): l1 = 1  NO 
(1265): l1 = 1  NO 
(1268): l2 = 16  NO 
(1269): l1 = l1 + 2  NO 
(1015): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(1271): l2 = 16  NO 
(1272): l1 = l1 + 1  NO 
(1017): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1274): l2 = 8  NO 
(1019): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1275): l1 = l1 + 1  NO 
(1023): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1279): if l3 == 0 goto $stack11 = $stack9  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the lines which were covered will be shown: 

(1536): if l0 < 65 goto $stack1 = 0  YES
(1569): $stack2 = l0 - l1  YES
(1441): if l0 == null goto $stack2 = l1  YES
(1555): if l0 < 97 goto $stack1 = 0  YES
(1460): if l0 >= 128 goto $stack1 = 0  YES
(1479): if l0 < 32 goto $stack1 = 0  YES
(1400): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1498): if l0 < 32 goto $stack1 = 1  YES
(1517): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the lines which were covered will be shown: 

(1922): if l0 != 1 goto (branch)  YES
(1923): if l0 != 2 goto (branch)  YES
(1924): if l0 != 3 goto (branch)  YES
(1925): if l0 != 4 goto (branch)  YES
(1926): if l0 != 5 goto (branch)  YES
(1927): if l0 != 6 goto (branch)  YES
(1928): if l0 != 7 goto (branch)  YES
(1929): if l0 != 8 goto (branch)  YES
(1930): if l0 != 9 goto (branch)  YES
(1931): if l0 != 10 goto (branch)  YES
(1932): if l0 != 11 goto (branch)  YES
(1933): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  YES
(1812): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1684): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1815): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1816): $stack5 = new java.lang.IllegalArgumentException  YES
(1818): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1819): $stack7 = new java.lang.IllegalArgumentException  YES
(1821): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1822): $stack10 = new java.lang.IllegalArgumentException  YES
(1824): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1827): return  YES
(1728): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1732): $stack1 = l0 & 3  YES
(1861): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1862): $stack8 = new java.lang.IllegalArgumentException  YES
(1864): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1865): $stack37 = new java.lang.IllegalArgumentException  YES
(1867): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1870): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1871): l4 = l0 % 100  YES
(1872): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1874): if l4 >= 0 goto (branch)  YES
(1875): l4 = l4 + 100  YES
(1878): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1879): l4 = l4 + -1  YES
(1880): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1881): l4 = 99  YES
(1882): l5 = l5 + -1  YES
(1759): if l1 == 1 goto return 31  YES
(1887): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1760): if l1 == 4 goto return 30  YES
(1888): $stack14 = l2 + l3  YES
(1761): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1762): $stack4 = new java.lang.IllegalArgumentException  YES
(1890): if l7 > 0 goto return l7  YES
(1891): l7 = l7 + 7  YES
(1894): return l7  YES
(1901): $stack4 = new java.lang.StringBuilder  YES
(1902): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  YES
(1903): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1904): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1905): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  YES
(1907): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1908): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1909): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1912): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1913): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  YES

In the following all of the instructions which were not covered will be shown: 

(1935): $stack1 = new java.lang.IllegalArgumentException  NO 
(1813): $stack3 = new java.lang.IllegalArgumentException  NO 
(1729): $stack7 = l0 & 3  NO 
(1910): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the lines which were covered will be shown: 

(1664): $stack4 = lengthof l0  YES
(1665): $stack14 = lengthof l0  YES
(1667): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1668): l3 = l2  YES
(1669): $stack12 = l0[l3]  YES
(1574): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1641): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1609): if l0 == null goto $stack1 = 0  YES
(1673): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1674): l3 = l2  YES
(1579): $stack0 = newarray (java.lang.String)[0]  YES
(1675): $stack9 = l0[l3]  YES
(1676): return l3  YES
(1680): return -1  YES
(1619): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1661): if l0 == null goto return -1  YES
(1630): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1662): return -1  YES

In the following all of the instructions which were not covered will be shown: 

(1670): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the lines which were covered will be shown: 

(12): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the lines which were covered will be shown: 

(265): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(266): $stack39 = newarray (java.lang.String)[1]  YES
(14): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(16): $stack0 = newarray (java.lang.String)[0]  YES
(144): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(145): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(148): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(149): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(152): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(153): if l1 == 0 goto $stack13 = lengthof l2  YES
(30): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  YES
(163): $stack13 = lengthof l2  YES
(166): l3#27 = 0  YES
(167): l4 = 0  YES
(168): l5 = 0  YES
(169): l6 = l2[l5]  YES
(42): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  YES
(170): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(171): l4 = l4 + 1  YES
(172): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(176): l4 = 0  YES
(178): $stack17 = lengthof l2  YES
(51): if l0 != 47 goto (branch)  YES
(54): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(57): $stack1 = new java.lang.IllegalArgumentException  YES
(185): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(186): return 0  YES
(190): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(192): return 0  YES
(198): l3#27 = l3#27 + 1  YES
(200): if l3#27 > 8 goto $stack15 = 0  YES
(81): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(84): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(212): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(213): l2 = 0  YES
(214): $stack5 = l1[l2]  YES
(216): $stack13 = lengthof l1  YES
(218): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(219): return 0  YES
(222): return 1  YES
(100): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(103): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(104): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232): if l0 == 47 goto $stack1 = 1  YES
(105): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(115): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(116): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(245): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(117): return 0  YES
(249): return l0  YES

In the following all of the instructions which were not covered will be shown: 

(269): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(270): $stack11 = new java.util.ArrayList  NO 
(271): $stack12 = new java.lang.StringBuilder  NO 
(272): l4 = 0  NO 
(273): l6 = lengthof l1  NO 
(274): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(276): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(277): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(279): if l8 != 63 goto (branch)  NO 
(280): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(281): if l4 == 42 goto l4 = l8  NO 
(282): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(285): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(287): l4 = l8  NO 
(289): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(290): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(293): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(52): return 92  NO 
(55): return 47  NO 
(82): return null  NO 
(101): return -1  NO 
(121): l2 = 1  NO 
(122): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(123): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(124): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(125): return 0  NO 
(128): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(129): return 0  NO 
(134): return 1  NO 
(146): return 0  NO 
(150): return 0  NO 
(154): $stack28 = new java.util.ArrayList  NO 
(155): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(157): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(158): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(159): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(161): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(164): return 0  NO 
(173): return 0  NO 
(179): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(180): return 0  NO 
(182): l3#27 = l3#27 + 2  NO 
(183): goto [?= l5 = l5 + 1]  NO 
(193): goto [?= (branch)]  NO 
(194): if l7 < 0 goto return 0  NO 
(195): return 0  NO 
(246): $stack2 = new java.lang.IllegalArgumentException  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the lines which were covered will be shown: 

(512): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(790): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(535): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(791): if l2 != 0 goto (branch)  YES
(792): return l0  YES
(795): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(800): return l0  YES
(802): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(803): l2 = l2 + -1  YES
(806): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(553): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(297): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(556): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(557): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(559): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(560): $stack11 = new java.util.ArrayList  YES
(561): l4 = 0  YES
(562): $stack12 = l2[0]  YES
(563): l6 = 0 + 1  YES
(564): $stack23 = l2[l6]  YES
(565): if l7 != l5 goto (branch)  YES
(566): goto [?= l6 = l6 + 1]  YES
(568): if l1 == 0 goto $stack25 = new java.lang.String  YES
(575): $stack25 = new java.lang.String  YES
(576): l4 = l6  YES
(833): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(834): return 0  YES
(578): l5 = l7  YES
(323): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580): $stack16 = new java.lang.String  YES
(836): l1 = 0  YES
(581): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(837): l2 = 0  YES
(838): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(839): l4 = 0  YES
(840): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(845): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(846): l2 = 1  YES
(849): if l1 == 0 goto $stack8 = 0  YES
(345): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(346): if l1 != 0 goto l2 = 0  YES
(347): return 1  YES
(349): l2 = 0  YES
(350): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(351): return 0  YES
(863): if l0 == null goto return l0  YES
(611): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(867): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(612): return 0  YES
(869): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(614): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(870): return l0  YES
(615): l3 = lengthof l1  YES
(616): l4 = l2 - 1  YES
(617): l5 = l3 - 1  YES
(873): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(618): l6 = 0  YES
(619): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(875): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(620): l8 = 0  YES
(621): $stack15 = l1[l8]  YES
(877): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(878): l0#4 = l2  YES
(880): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(885): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(887): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(377): if l0 == null goto $stack2 = 1  YES
(890): return l0#4  YES
(636): return 0  YES
(663): if l0 == null goto return 1  YES
(664): return 1  YES
(666): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(667): l3 = l2 - 1  YES
(668): l4 = lengthof l1  YES
(412): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(669): l5 = l4 - 1  YES
(413): return 0  YES
(670): l6 = 0  YES
(671): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(415): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(672): l8 = 0  YES
(416): l2 = 1  YES
(673): $stack13 = l1[l8]  YES
(417): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(418): return 0  YES
(421): return 1  YES
(688): return 1  YES
(448): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(451): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(452): if l1 >= 2 goto l2 = l1 - 1  YES
(453): return ""  YES
(455): l2 = l1 - 1  YES
(456): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(457): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(458): if l4 != 10 goto return l3  YES
(716): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(461): return l3  YES
(742): if l0 != l1 goto (branch)  YES
(743): return 1  YES
(745): if l0 == null goto return 0  YES
(490): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(746): return 0  YES
(491): return l0  YES
(748): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(749): return 0  YES
(494): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(495): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(751): $stack6 = l0 instanceof java.lang.String  YES
(496): if l1 == 13 goto return ""  YES
(752): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(499): return l0  YES
(502): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(503): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(505): if l2 != 10 goto (branch)  YES
(509): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(510): l1#2 = l1#2 + 1  YES

In the following all of the instructions which were not covered will be shown: 

(796): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(797): l2 = l2 + -1  NO 
(554): return null  NO 
(569): l8 = l6 - 1  NO 
(570): if l8 == l4 goto (branch)  NO 
(571): $stack38 = new java.lang.String  NO 
(572): l4 = l8  NO 
(574): goto [?= l5 = l7]  NO 
(841): return 1  NO 
(844): l1 = 1  NO 
(864): return l0  NO 
(354): return 1  NO 
(622): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(624): return 1  NO 
(626): if l8 != l5 goto (branch)  NO 
(628): return 1  NO 
(630): if l6 >= l4 goto l8 = l8 + 1  NO 
(631): return 1  NO 
(674): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(676): return 0  NO 
(678): if l8 != l5 goto (branch)  NO 
(680): return 0  NO 
(682): if l6 >= l3 goto l8 = l8 + 1  NO 
(683): return 0  NO 
(449): return null  NO 
(459): $stack11 = l2 - 1  NO 
(497): return ""  NO 
(755): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(756): l3 = 0  NO 
(757): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(758): return 0  NO 
(761): return 1  NO 
(506): $stack11 = l1#2 - 1  NO 
(507): l1#2 = l1#2 + -1  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the lines which were covered will be shown: 

(1393): if l0 != l1 goto (branch)  YES
(1394): return 0  YES
(1396): if l0 == 0 goto $stack2 = -1  YES
(1381): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 




Coverage of Test Suite: comp5111.assignment.cut.RegressionTest4

comp5111.assignment.cut.Subject$NumberTasks
67 Lines from a total of 156 Lines were covered.
Percentage: 42.94871794871795%

comp5111.assignment.cut.Subject$CharTasks
9 Lines from a total of 9 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$GregorianTasks
58 Lines from a total of 62 Lines were covered.
Percentage: 93.54838709677419%

comp5111.assignment.cut.Subject$ArrayTasks
18 Lines from a total of 19 Lines were covered.
Percentage: 94.73684210526316%

comp5111.assignment.cut.Subject
1 Lines from a total of 1 Lines were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
50 Lines from a total of 98 Lines were covered.
Percentage: 51.02040816326531%

comp5111.assignment.cut.Subject$StringTasks
119 Lines from a total of 153 Lines were covered.
Percentage: 77.77777777777777%

comp5111.assignment.cut.Subject$BooleanTasks
4 Lines from a total of 4 Lines were covered.
Percentage: 100.0%

Overall Line Coverage: 64.9402390438247%



In the following part you can see which lines were executed. Before every statement you can see a number which indicates the line on which the statement was found
After each listed instructions you can find a NO if the line wasn't executed and a YES if it was. Only the first executed statement belonging to a specific line will be shown

comp5111.assignment.cut.Subject$NumberTasks


In the following all of the lines which were covered will be shown: 

(900): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1292): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1297): $stack3 = new java.lang.NumberFormatException  YES
(1299): $stack2 = new java.math.BigDecimal  YES
(1181): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1184): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1313): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1058): $stack88 = new java.lang.NumberFormatException  YES
(934): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(938): $stack151 = new java.lang.NumberFormatException  YES
(1197): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941): $stack16 = newarray (java.lang.String)[3]  YES
(942): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(943): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1200): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(944): l4 = 0  YES
(945): l6 = lengthof $stack16  YES
(946): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(1334): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1335): return 0  YES
(951): if l4 <= 0 goto $stack19 = l2 - 1  YES
(1337): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1340): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1215): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1346): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1219): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1350): l2 = 0  YES
(1351): l3 = l1  YES
(1352): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1353): if $stack13 == 0 goto (branch)  YES
(969): $stack19 = l2 - 1  YES
(1356): if l2 <= 1 goto (branch)  YES
(973): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(974): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(1359): if l4 != 0 goto l3 = l3 + 1  YES
(1360): return 0  YES
(1234): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(979): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(980): if l9 <= -1 goto (branch)  YES
(1237): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1115): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1116): if l2 == 45 goto $stack7 = 1  YES
(1118): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(992): if l10 <= -1 goto (branch)  YES
(1377): $stack2 = l0 - l1  YES
(1251): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(999): if $stack119 == 0 goto $stack101 = l2  YES
(1255): $stack25 = new java.lang.NumberFormatException  YES
(1257): l1 = 0  YES
(1001): l7#20 = null  YES
(1258): l2 = 10  YES
(1259): l3 = 0  YES
(1003): if l11 == 0 goto (branch)  YES
(1260): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1004): if l10 <= -1 goto l8 = null  YES
(1261): if l4 != 45 goto (branch)  YES
(1007): l8 = null  YES
(1264): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1010): $stack60 = l2 - 1  YES
(1267): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1012): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(1270): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1273): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1278): $stack9 = new java.math.BigInteger  YES

In the following all of the instructions which were not covered will be shown: 

(1026): $stack62 = new java.lang.NumberFormatException  NO 
(1030): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1031): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1034): return l13#63  NO 
(1293): return null  NO 
(1039): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1044): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1045): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1046): return l13#69  NO 
(1050): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1052): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1063): if l10 <= -1 goto l8 = null  NO 
(1064): $stack58 = l10 + 1  NO 
(1066): l8 = null  NO 
(1068): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1071): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1076): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1080): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1338): return 0  NO 
(1085): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1341): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1086): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1342): return 0  NO 
(1087): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1088): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1344): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1089): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1090): return l12#81  NO 
(1092): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1093): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1094): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1095): return l13#69  NO 
(1097): return l14  NO 
(1354): l2 = l2 + 1  NO 
(1101): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1357): return 0  NO 
(1102): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1363): return 1  NO 
(1148): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1160): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1161): return 1  NO 
(1163): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1164): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1165): return 0  NO 
(1168): return 1  NO 
(1182): return null  NO 
(935): return null  NO 
(1198): return null  NO 
(947): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(948): goto [?= (branch)]  NO 
(952): l5#11 = 0  NO 
(953): l6 = l4  NO 
(954): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(955): if l5#11 == 48 goto l4 = l4 + 1  NO 
(956): goto [?= l6 = l2 - l4]  NO 
(958): l4 = l4 + 1  NO 
(960): l6 = l2 - l4  NO 
(1216): return null  NO 
(961): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(964): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(965): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(967): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1235): return null  NO 
(981): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(982): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(983): $stack114 = new java.lang.NumberFormatException  NO 
(985): $stack116 = l9 + 1  NO 
(988): $stack107 = l9 + 1  NO 
(990): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(993): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(994): $stack105 = new java.lang.NumberFormatException  NO 
(996): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1252): return null  NO 
(1005): $stack98 = l10 + 1  NO 
(1262): l3 = 1  NO 
(1263): l1 = 1  NO 
(1265): l1 = 1  NO 
(1268): l2 = 16  NO 
(1269): l1 = l1 + 2  NO 
(1015): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(1271): l2 = 16  NO 
(1272): l1 = l1 + 1  NO 
(1017): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1274): l2 = 8  NO 
(1019): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1275): l1 = l1 + 1  NO 
(1023): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1279): if l3 == 0 goto $stack11 = $stack9  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the lines which were covered will be shown: 

(1536): if l0 < 65 goto $stack1 = 0  YES
(1569): $stack2 = l0 - l1  YES
(1441): if l0 == null goto $stack2 = l1  YES
(1555): if l0 < 97 goto $stack1 = 0  YES
(1460): if l0 >= 128 goto $stack1 = 0  YES
(1479): if l0 < 32 goto $stack1 = 0  YES
(1400): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1498): if l0 < 32 goto $stack1 = 1  YES
(1517): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the lines which were covered will be shown: 

(1922): if l0 != 1 goto (branch)  YES
(1923): if l0 != 2 goto (branch)  YES
(1924): if l0 != 3 goto (branch)  YES
(1925): if l0 != 4 goto (branch)  YES
(1926): if l0 != 5 goto (branch)  YES
(1927): if l0 != 6 goto (branch)  YES
(1928): if l0 != 7 goto (branch)  YES
(1929): if l0 != 8 goto (branch)  YES
(1930): if l0 != 9 goto (branch)  YES
(1931): if l0 != 10 goto (branch)  YES
(1932): if l0 != 11 goto (branch)  YES
(1933): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  YES
(1812): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1684): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1815): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1816): $stack5 = new java.lang.IllegalArgumentException  YES
(1818): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1819): $stack7 = new java.lang.IllegalArgumentException  YES
(1821): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1822): $stack10 = new java.lang.IllegalArgumentException  YES
(1824): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1827): return  YES
(1728): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1732): $stack1 = l0 & 3  YES
(1861): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1862): $stack8 = new java.lang.IllegalArgumentException  YES
(1864): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1865): $stack37 = new java.lang.IllegalArgumentException  YES
(1867): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1870): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1871): l4 = l0 % 100  YES
(1872): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1874): if l4 >= 0 goto (branch)  YES
(1875): l4 = l4 + 100  YES
(1878): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1879): l4 = l4 + -1  YES
(1880): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1881): l4 = 99  YES
(1882): l5 = l5 + -1  YES
(1759): if l1 == 1 goto return 31  YES
(1887): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1760): if l1 == 4 goto return 30  YES
(1888): $stack14 = l2 + l3  YES
(1761): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1762): $stack4 = new java.lang.IllegalArgumentException  YES
(1890): if l7 > 0 goto return l7  YES
(1891): l7 = l7 + 7  YES
(1894): return l7  YES
(1901): $stack4 = new java.lang.StringBuilder  YES
(1902): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  YES
(1903): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1904): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1905): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  YES
(1907): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1908): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1909): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1912): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1913): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  YES

In the following all of the instructions which were not covered will be shown: 

(1935): $stack1 = new java.lang.IllegalArgumentException  NO 
(1813): $stack3 = new java.lang.IllegalArgumentException  NO 
(1729): $stack7 = l0 & 3  NO 
(1910): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the lines which were covered will be shown: 

(1664): $stack4 = lengthof l0  YES
(1665): $stack14 = lengthof l0  YES
(1667): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1668): l3 = l2  YES
(1669): $stack12 = l0[l3]  YES
(1574): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1641): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1609): if l0 == null goto $stack1 = 0  YES
(1673): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1674): l3 = l2  YES
(1579): $stack0 = newarray (java.lang.String)[0]  YES
(1675): $stack9 = l0[l3]  YES
(1676): return l3  YES
(1680): return -1  YES
(1619): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1661): if l0 == null goto return -1  YES
(1630): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1662): return -1  YES

In the following all of the instructions which were not covered will be shown: 

(1670): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the lines which were covered will be shown: 

(12): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the lines which were covered will be shown: 

(265): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(266): $stack39 = newarray (java.lang.String)[1]  YES
(14): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(16): $stack0 = newarray (java.lang.String)[0]  YES
(144): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(145): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(148): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(149): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(152): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(153): if l1 == 0 goto $stack13 = lengthof l2  YES
(30): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  YES
(163): $stack13 = lengthof l2  YES
(166): l3#27 = 0  YES
(167): l4 = 0  YES
(168): l5 = 0  YES
(169): l6 = l2[l5]  YES
(42): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  YES
(170): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(171): l4 = l4 + 1  YES
(172): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(176): l4 = 0  YES
(178): $stack17 = lengthof l2  YES
(51): if l0 != 47 goto (branch)  YES
(54): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(57): $stack1 = new java.lang.IllegalArgumentException  YES
(185): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(186): return 0  YES
(190): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(192): return 0  YES
(198): l3#27 = l3#27 + 1  YES
(200): if l3#27 > 8 goto $stack15 = 0  YES
(81): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(84): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(212): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(213): l2 = 0  YES
(214): $stack5 = l1[l2]  YES
(216): $stack13 = lengthof l1  YES
(218): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(219): return 0  YES
(222): return 1  YES
(100): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(103): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(104): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232): if l0 == 47 goto $stack1 = 1  YES
(105): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(115): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(116): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(245): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(117): return 0  YES
(249): return l0  YES

In the following all of the instructions which were not covered will be shown: 

(269): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(270): $stack11 = new java.util.ArrayList  NO 
(271): $stack12 = new java.lang.StringBuilder  NO 
(272): l4 = 0  NO 
(273): l6 = lengthof l1  NO 
(274): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(276): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(277): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(279): if l8 != 63 goto (branch)  NO 
(280): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(281): if l4 == 42 goto l4 = l8  NO 
(282): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(285): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(287): l4 = l8  NO 
(289): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(290): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(293): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(52): return 92  NO 
(55): return 47  NO 
(82): return null  NO 
(101): return -1  NO 
(121): l2 = 1  NO 
(122): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(123): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(124): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(125): return 0  NO 
(128): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(129): return 0  NO 
(134): return 1  NO 
(146): return 0  NO 
(150): return 0  NO 
(154): $stack28 = new java.util.ArrayList  NO 
(155): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(157): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(158): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(159): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(161): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(164): return 0  NO 
(173): return 0  NO 
(179): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(180): return 0  NO 
(182): l3#27 = l3#27 + 2  NO 
(183): goto [?= l5 = l5 + 1]  NO 
(193): goto [?= (branch)]  NO 
(194): if l7 < 0 goto return 0  NO 
(195): return 0  NO 
(246): $stack2 = new java.lang.IllegalArgumentException  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the lines which were covered will be shown: 

(512): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(790): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(535): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(791): if l2 != 0 goto (branch)  YES
(792): return l0  YES
(795): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(800): return l0  YES
(802): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(803): l2 = l2 + -1  YES
(806): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(553): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(297): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(556): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(557): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(559): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(560): $stack11 = new java.util.ArrayList  YES
(561): l4 = 0  YES
(562): $stack12 = l2[0]  YES
(563): l6 = 0 + 1  YES
(564): $stack23 = l2[l6]  YES
(565): if l7 != l5 goto (branch)  YES
(566): goto [?= l6 = l6 + 1]  YES
(568): if l1 == 0 goto $stack25 = new java.lang.String  YES
(575): $stack25 = new java.lang.String  YES
(576): l4 = l6  YES
(833): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(834): return 0  YES
(578): l5 = l7  YES
(323): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580): $stack16 = new java.lang.String  YES
(836): l1 = 0  YES
(581): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(837): l2 = 0  YES
(838): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(839): l4 = 0  YES
(840): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(845): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(846): l2 = 1  YES
(849): if l1 == 0 goto $stack8 = 0  YES
(345): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(346): if l1 != 0 goto l2 = 0  YES
(347): return 1  YES
(349): l2 = 0  YES
(350): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(351): return 0  YES
(863): if l0 == null goto return l0  YES
(611): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(867): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(612): return 0  YES
(869): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(614): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(870): return l0  YES
(615): l3 = lengthof l1  YES
(616): l4 = l2 - 1  YES
(617): l5 = l3 - 1  YES
(873): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(618): l6 = 0  YES
(619): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(875): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(620): l8 = 0  YES
(621): $stack15 = l1[l8]  YES
(877): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(878): l0#4 = l2  YES
(880): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(885): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(887): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(377): if l0 == null goto $stack2 = 1  YES
(890): return l0#4  YES
(636): return 0  YES
(663): if l0 == null goto return 1  YES
(664): return 1  YES
(666): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(667): l3 = l2 - 1  YES
(668): l4 = lengthof l1  YES
(412): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(669): l5 = l4 - 1  YES
(413): return 0  YES
(670): l6 = 0  YES
(671): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(415): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(672): l8 = 0  YES
(416): l2 = 1  YES
(673): $stack13 = l1[l8]  YES
(417): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(418): return 0  YES
(421): return 1  YES
(688): return 1  YES
(448): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(451): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(452): if l1 >= 2 goto l2 = l1 - 1  YES
(453): return ""  YES
(455): l2 = l1 - 1  YES
(456): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(457): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(458): if l4 != 10 goto return l3  YES
(716): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(461): return l3  YES
(742): if l0 != l1 goto (branch)  YES
(743): return 1  YES
(745): if l0 == null goto return 0  YES
(490): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(746): return 0  YES
(491): return l0  YES
(748): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(749): return 0  YES
(494): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(495): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(751): $stack6 = l0 instanceof java.lang.String  YES
(496): if l1 == 13 goto return ""  YES
(752): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(499): return l0  YES
(502): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(503): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(505): if l2 != 10 goto (branch)  YES
(509): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(510): l1#2 = l1#2 + 1  YES

In the following all of the instructions which were not covered will be shown: 

(796): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(797): l2 = l2 + -1  NO 
(554): return null  NO 
(569): l8 = l6 - 1  NO 
(570): if l8 == l4 goto (branch)  NO 
(571): $stack38 = new java.lang.String  NO 
(572): l4 = l8  NO 
(574): goto [?= l5 = l7]  NO 
(841): return 1  NO 
(844): l1 = 1  NO 
(864): return l0  NO 
(354): return 1  NO 
(622): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(624): return 1  NO 
(626): if l8 != l5 goto (branch)  NO 
(628): return 1  NO 
(630): if l6 >= l4 goto l8 = l8 + 1  NO 
(631): return 1  NO 
(674): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(676): return 0  NO 
(678): if l8 != l5 goto (branch)  NO 
(680): return 0  NO 
(682): if l6 >= l3 goto l8 = l8 + 1  NO 
(683): return 0  NO 
(449): return null  NO 
(459): $stack11 = l2 - 1  NO 
(497): return ""  NO 
(755): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(756): l3 = 0  NO 
(757): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(758): return 0  NO 
(761): return 1  NO 
(506): $stack11 = l1#2 - 1  NO 
(507): l1#2 = l1#2 + -1  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the lines which were covered will be shown: 

(1393): if l0 != l1 goto (branch)  YES
(1394): return 0  YES
(1396): if l0 == 0 goto $stack2 = -1  YES
(1381): specialinvoke l0.<java.lang.Object: void <init>()>()  YES

In the following all of the instructions which were not covered will be shown: 

