Statement Coverage: 


Coverage of Test Suite: comp5111.assignment.cut.Regression__Test

comp5111.assignment.cut.Subject$NumberTasks
40 Instructions from a total of 351 Instructions were covered.
Percentage: 11.396011396011396%

comp5111.assignment.cut.Subject$CharTasks
21 Instructions from a total of 46 Instructions were covered.
Percentage: 45.65217391304348%

comp5111.assignment.cut.Subject$GregorianTasks
47 Instructions from a total of 146 Instructions were covered.
Percentage: 32.19178082191781%

comp5111.assignment.cut.Subject$ArrayTasks
16 Instructions from a total of 49 Instructions were covered.
Percentage: 32.6530612244898%

comp5111.assignment.cut.Subject
2 Instructions from a total of 2 Instructions were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
41 Instructions from a total of 204 Instructions were covered.
Percentage: 20.098039215686274%

comp5111.assignment.cut.Subject$StringTasks
108 Instructions from a total of 295 Instructions were covered.
Percentage: 36.610169491525426%

comp5111.assignment.cut.Subject$BooleanTasks
2 Instructions from a total of 9 Instructions were covered.
Percentage: 22.22222222222222%

Overall Statement Coverage: 25.13611615245009%



In the following part you can see which instructions were executed. Before every instruction you can see two numbers
in the form of (x,y), for Example (1,5). This indicates that the following Instruction can be found on line x of the Java code. 
y denotes that it is the y-th Jimple Instruction generated from the corresponding Java line.
After each listed instructions you can find a NO if the instruction wasn't executed and a YES if it was. 


comp5111.assignment.cut.Subject$NumberTasks


In the following all of the instructions which were covered will be shown: 

(1313, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1346, 1): return $stack6  YES
(1313, 1): return $stack1  YES
(1340, 0): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1340, 1): if $stack5 != 45 goto $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1334, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1334, 1): if $stack1 == 0 goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1299, 0): $stack2 = new java.math.BigDecimal  YES
(1299, 1): specialinvoke $stack2.<java.math.BigDecimal: void <init>(java.lang.String)>(l0)  YES
(1297, 0): $stack3 = new java.lang.NumberFormatException  YES
(1297, 1): specialinvoke $stack3.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(1200, 0): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(1297, 2): throw $stack3  YES
(1359, 0): if l4 != 0 goto l3 = l3 + 1  YES
(1359, 1): $stack9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1359, 2): $stack10 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack9)  YES
(1359, 3): if $stack10 != 0 goto l3 = l3 + 1  YES
(1353, 0): if $stack13 == 0 goto (branch)  YES
(1351, 0): l3 = l3 + 1  YES
(1351, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1351, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  YES
(1351, 2): if l3 >= $stack5 goto return 1  YES
(1219, 0): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1215, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1337, 0): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1337, 1): $stack3 = $stack2 - 1  YES
(1335, 0): return 0  YES
(1337, 2): $stack4 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack3)  YES
(1337, 3): if $stack4 != 46 goto $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1296, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1360, 0): return 0  YES
(1296, 1): if $stack1 == 0 goto $stack2 = new java.math.BigDecimal  YES
(1197, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(1292, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1356, 0): if l2 <= 1 goto (branch)  YES
(1352, 0): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1352, 1): if $stack6 != 46 goto $stack13 = 0  YES
(1350, 0): l2 = 0  YES
(1352, 4): $stack13 = 0  YES
(1352, 5): l4 = $stack13  YES
(1346, 0): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES

In the following all of the instructions which were not covered will be shown: 

(993, 0): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1026, 1): $stack63 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1092, 3): $stack33 = $stack32 cmpl 0.0  NO 
(960, 0): l6 = l2 - l4  NO 
(1026, 2): specialinvoke $stack62.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack63)  NO 
(1092, 4): if $stack33 != 0 goto l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1026, 3): throw $stack62  NO 
(1092, 5): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1092, 6): if $stack38 == 0 goto (branch)  NO 
(1274, 0): l2 = 8  NO 
(1076, 0): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1076, 1): return $stack157  NO 
(1010, 0): $stack60 = l2 - 1  NO 
(1010, 1): l12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, $stack60)  NO 
(944, 0): l4 = 0  NO 
(1357, 0): return 0  NO 
(1258, 0): l2 = 10  NO 
(1093, 0): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(994, 0): $stack105 = new java.lang.NumberFormatException  NO 
(961, 0): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(994, 1): $stack106 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(961, 1): if l6 != 16 goto (branch)  NO 
(994, 2): specialinvoke $stack105.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack106)  NO 
(961, 2): if l5#11 <= 55 goto (branch)  NO 
(994, 3): throw $stack105  NO 
(1341, 0): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1341, 1): if $stack7 != 1 goto $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1275, 0): l1 = l1 + 1  NO 
(1044, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(945, 0): l7 = l7 + 1  NO 
(945, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(945, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  NO 
(945, 2): if l7 >= l6 goto (branch)  NO 
(945, 3): l8 = $stack16[l7]  NO 
(1259, 0): l3 = 0  NO 
(1160, 0): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1094, 0): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1094, 1): $stack36 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($stack35)  NO 
(1094, 2): $stack37 = virtualinvoke l14.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($stack36)  NO 
(1094, 3): if $stack37 != 0 goto return l14  NO 
(962, 0): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962, 1): return $stack122  NO 
(1342, 0): return 0  NO 
(1045, 0): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1012, 0): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  NO 
(1045, 1): if $stack76 != 0 goto (branch)  NO 
(979, 0): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  NO 
(1045, 2): $stack78 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(946, 0): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  NO 
(979, 1): if $stack25 != 0 goto $stack119 = 0  NO 
(1045, 3): $stack79 = $stack78 cmpl 0.0  NO 
(946, 1): if $stack138 == 0 goto l7 = l7 + 1  NO 
(979, 2): if l5#11 == 46 goto $stack119 = 0  NO 
(1045, 4): if $stack79 != 0 goto return l13#69  NO 
(979, 3): $stack119 = 1  NO 
(1045, 5): $stack80 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(979, 4): goto [?= l11 = $stack119]  NO 
(1045, 6): if $stack80 == 0 goto (branch)  NO 
(979, 5): $stack119 = 0  NO 
(979, 6): l11 = $stack119  NO 
(1293, 0): return null  NO 
(1260, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  NO 
(1161, 0): return 1  NO 
(1095, 0): return l13#69  NO 
(996, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(996, 1): goto [?= l7#20 = null]  NO 
(1046, 0): return l13#69  NO 
(980, 0): if l9 <= -1 goto (branch)  NO 
(947, 0): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(947, 1): $stack142 = $stack141 + l3  NO 
(947, 2): l4 = 0 + $stack142  NO 
(1261, 0): if l4 != 45 goto (branch)  NO 
(1063, 0): if l10 <= -1 goto l8 = null  NO 
(1030, 0): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1063, 1): $stack55 = l2 - 1  NO 
(1063, 2): if l10 >= $stack55 goto l8 = null  NO 
(964, 0): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(964, 1): if l6 != 8 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(964, 2): if l5#11 <= 55 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1377, 0): $stack2 = l0 - l1  NO 
(1344, 0): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1377, 1): return $stack2  NO 
(1344, 1): return $stack8  NO 
(1278, 0): $stack9 = new java.math.BigInteger  NO 
(1278, 1): $stack10 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l1)  NO 
(1278, 2): specialinvoke $stack9.<java.math.BigInteger: void <init>(java.lang.String,int)>($stack10, l2)  NO 
(1080, 0): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1080, 1): return $stack155  NO 
(981, 0): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(948, 0): goto [?= (branch)]  NO 
(1262, 0): l3 = 1  NO 
(1163, 0): l1 = l1 + -1  NO 
(1163, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1163, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  NO 
(1097, 0): return l14  NO 
(1163, 2): if l1 < 0 goto return 1  NO 
(1064, 0): $stack58 = l10 + 1  NO 
(1031, 0): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1064, 1): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>($stack58)  NO 
(1031, 1): if $stack74 != 0 goto (branch)  NO 
(1064, 2): goto [?= (branch)]  NO 
(965, 0): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1031, 2): $stack82 = virtualinvoke l13#63.<java.lang.Float: float floatValue()>()  NO 
(965, 1): return $stack123  NO 
(1031, 3): $stack83 = $stack82 cmpl 0.0F  NO 
(1031, 4): if $stack83 != 0 goto return l13#63  NO 
(1031, 5): $stack84 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1031, 6): if $stack84 == 0 goto (branch)  NO 
(1279, 0): if l3 == 0 goto $stack11 = $stack9  NO 
(1279, 1): $stack11 = virtualinvoke $stack9.<java.math.BigInteger: java.math.BigInteger negate()>()  NO 
(1279, 2): goto [?= return $stack11]  NO 
(1279, 3): $stack11 = $stack9  NO 
(1279, 4): return $stack11  NO 
(1015, 0): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 0): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(1015, 1): if l8 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 1): if l10 <= l2 goto $stack116 = l9 + 1  NO 
(1263, 0): l1 = 1  NO 
(1263, 1): goto [?= $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)]  NO 
(1164, 0): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1164, 1): if $stack3 == 48 goto l1 = l1 + -1  NO 
(999, 0): if $stack119 == 0 goto $stack101 = l2  NO 
(999, 1): $stack101 = l2 - 1  NO 
(999, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)]  NO 
(900, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  NO 
(999, 3): $stack101 = l2  NO 
(900, 1): return  NO 
(999, 4): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)  NO 
(1181, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  NO 
(1148, 0): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1115, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  NO 
(1148, 1): if $stack2 == 0 goto $stack4 = 0  NO 
(1148, 2): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l1)  NO 
(1148, 3): if $stack3 == 0 goto $stack4 = 0  NO 
(1148, 4): $stack4 = 1  NO 
(983, 0): $stack114 = new java.lang.NumberFormatException  NO 
(1148, 5): goto [?= return $stack4]  NO 
(983, 1): $stack115 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1148, 6): $stack4 = 0  NO 
(983, 2): specialinvoke $stack114.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack115)  NO 
(1148, 7): return $stack4  NO 
(983, 3): throw $stack114  NO 
(1363, 0): return 1  NO 
(1264, 0): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  NO 
(1198, 0): return null  NO 
(1165, 0): return 0  NO 
(1066, 0): l8 = null  NO 
(967, 0): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(934, 0): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  NO 
(967, 1): return $stack124  NO 
(1182, 0): return null  NO 
(1116, 0): if l2 == 45 goto $stack7 = 1  NO 
(1116, 1): if l2 != 43 goto $stack7 = 0  NO 
(1050, 0): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1116, 2): $stack7 = 1  NO 
(1017, 0): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1116, 3): goto [?= (branch)]  NO 
(1017, 1): if $stack65 != 0 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1116, 4): $stack7 = 0  NO 
(951, 0): if l4 <= 0 goto $stack19 = l2 - 1  NO 
(1017, 2): $stack68 = virtualinvoke l12.<java.lang.String: char charAt(int)>(0)  NO 
(1017, 3): if $stack68 != 45 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 4): $stack70 = virtualinvoke l12.<java.lang.String: java.lang.String substring(int)>(1)  NO 
(1017, 5): $stack71 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>($stack70)  NO 
(1017, 6): if $stack71 != 0 goto $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1017, 7): $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 8): if $stack66 == 0 goto $stack62 = new java.lang.NumberFormatException  NO 
(1265, 0): l1 = 1  NO 
(1034, 0): return l13#63  NO 
(1001, 0): l7#20 = null  NO 
(935, 0): return null  NO 
(1216, 0): return null  NO 
(985, 0): $stack116 = l9 + 1  NO 
(952, 0): l5#11 = 0  NO 
(985, 1): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack116, l10)  NO 
(985, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)]  NO 
(1299, 2): return $stack2  NO 
(1200, 1): return $stack1  NO 
(1101, 0): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1068, 0): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1068, 1): if l8 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(969, 0): $stack19 = l2 - 1  NO 
(969, 1): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack19)  NO 
(1184, 0): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  NO 
(1184, 1): return $stack1  NO 
(1118, 0): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  NO 
(1085, 0): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1118, 1): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(1, l1)  NO 
(1052, 0): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1118, 2): goto [?= return $stack5]  NO 
(1019, 0): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1052, 1): return $stack77  NO 
(1118, 3): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  NO 
(1019, 1): return $stack67  NO 
(1118, 4): return $stack5  NO 
(953, 0): l6 = l6 + 1  NO 
(953, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(953, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  NO 
(1267, 0): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  NO 
(1234, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  NO 
(1267, 1): if $stack8 != 0 goto l2 = 16  NO 
(1267, 2): $stack12 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", l1)  NO 
(1168, 0): return 1  NO 
(1267, 3): if $stack12 == 0 goto $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  NO 
(1102, 0): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1102, 1): return $stack31  NO 
(1003, 0): if l11 == 0 goto (branch)  NO 
(937, 0): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  NO 
(937, 1): if $stack15 == 0 goto $stack16 = newarray (java.lang.String)[3]  NO 
(1251, 0): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  NO 
(1086, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(954, 0): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(1268, 0): l2 = 16  NO 
(1235, 0): return null  NO 
(1004, 0): if l10 <= -1 goto l8 = null  NO 
(1004, 1): $stack90 = l2 - 1  NO 
(938, 0): $stack151 = new java.lang.NumberFormatException  NO 
(1004, 2): if l10 >= $stack90 goto l8 = null  NO 
(938, 1): specialinvoke $stack151.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  NO 
(938, 2): throw $stack151  NO 
(1252, 0): return null  NO 
(1219, 1): return $stack1  NO 
(1087, 0): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1087, 1): if $stack29 != 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(988, 0): $stack107 = l9 + 1  NO 
(955, 0): if l5#11 == 48 goto l4 = l4 + 1  NO 
(988, 1): if $stack119 == 0 goto $stack110 = l2  NO 
(988, 2): $stack110 = l2 - 1  NO 
(988, 3): goto [?= l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)]  NO 
(988, 4): $stack110 = l2  NO 
(988, 5): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)  NO 
(1269, 0): l1 = l1 + 2  NO 
(1269, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1071, 0): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1071, 1): return $stack54  NO 
(1005, 0): $stack98 = l10 + 1  NO 
(1005, 1): $stack97 = l2 - 1  NO 
(1005, 2): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack98, $stack97)  NO 
(1005, 3): goto [?= $stack60 = l2 - 1]  NO 
(1352, 2): $stack13 = 1  NO 
(1352, 3): goto [?= l4 = $stack13]  NO 
(1088, 0): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1088, 1): $stack43 = $stack42 cmpl 0.0F  NO 
(1088, 2): if $stack43 != 0 goto $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1088, 3): $stack48 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(956, 0): goto [?= l6 = l2 - l4]  NO 
(1088, 4): if $stack48 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1270, 0): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  NO 
(1237, 0): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  NO 
(1270, 1): if $stack13 == 0 goto $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  NO 
(1237, 1): return $stack1  NO 
(1039, 0): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(973, 0): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  NO 
(1254, 0): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  NO 
(1254, 1): if $stack6 == 0 goto l1 = 0  NO 
(1089, 0): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1089, 1): $stack45 = virtualinvoke l13#69.<java.lang.Double: java.lang.String toString()>()  NO 
(1023, 0): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1089, 2): $stack46 = virtualinvoke $stack44.<java.lang.String: boolean equals(java.lang.Object)>($stack45)  NO 
(990, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(1023, 1): return $stack164  NO 
(1089, 3): if $stack46 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(990, 1): goto [?= (branch)]  NO 
(1271, 0): l2 = 16  NO 
(1007, 0): l8 = null  NO 
(974, 0): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  NO 
(941, 0): $stack16 = newarray (java.lang.String)[3]  NO 
(974, 1): $stack23 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(69)  NO 
(941, 1): $stack16[0] = "0x"  NO 
(974, 2): $stack24 = $stack22 + $stack23  NO 
(941, 2): $stack16[1] = "0X"  NO 
(974, 3): l10 = $stack24 + 1  NO 
(941, 3): $stack16[2] = "#"  NO 
(1354, 0): l2 = l2 + 1  NO 
(1255, 0): $stack25 = new java.lang.NumberFormatException  NO 
(1255, 1): specialinvoke $stack25.<java.lang.NumberFormatException: void <init>(java.lang.String)>("An empty string is not a valid number")  NO 
(1255, 2): throw $stack25  NO 
(1090, 0): return l12#81  NO 
(958, 0): l4 = l4 + 1  NO 
(1338, 0): return 0  NO 
(1272, 0): l1 = l1 + 1  NO 
(1272, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(942, 0): l2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1058, 0): $stack88 = new java.lang.NumberFormatException  NO 
(1058, 1): $stack89 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(992, 0): if l10 <= -1 goto (branch)  NO 
(1058, 2): specialinvoke $stack88.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack89)  NO 
(1058, 3): throw $stack88  NO 
(1273, 0): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  NO 
(1273, 1): if $stack14 == 0 goto $stack9 = new java.math.BigInteger  NO 
(1273, 2): $stack19 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1273, 3): $stack20 = l1 + 1  NO 
(1273, 4): if $stack19 <= $stack20 goto $stack9 = new java.math.BigInteger  NO 
(943, 0): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  NO 
(943, 1): if $stack18 == 43 goto $stack145 = 1  NO 
(943, 2): $stack144 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  NO 
(943, 3): if $stack144 != 45 goto $stack145 = 0  NO 
(943, 4): $stack145 = 1  NO 
(943, 5): goto [?= l3 = $stack145]  NO 
(943, 6): $stack145 = 0  NO 
(1257, 0): l1 = 0  NO 
(943, 7): l3 = $stack145  NO 
(1092, 0): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1092, 1): if $stack30 != 0 goto (branch)  NO 
(1026, 0): $stack62 = new java.lang.NumberFormatException  NO 
(1092, 2): $stack32 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the instructions which were covered will be shown: 

(1569, 0): $stack2 = l0 - l1  YES
(1536, 0): if l0 < 65 goto $stack1 = 0  YES
(1569, 1): return $stack2  YES
(1536, 4): $stack1 = 0  YES
(1536, 5): return $stack1  YES
(1460, 0): if l0 >= 128 goto $stack1 = 0  YES
(1555, 0): if l0 < 97 goto $stack1 = 0  YES
(1460, 1): $stack1 = 1  YES
(1460, 2): goto [?= return $stack1]  YES
(1460, 4): return $stack1  YES
(1555, 4): $stack1 = 0  YES
(1555, 5): return $stack1  YES
(1517, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES
(1517, 1): if $stack1 != 0 goto $stack3 = 1  YES
(1517, 2): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaLower(char)>(l0)  YES
(1517, 3): if $stack2 == 0 goto $stack3 = 0  YES
(1517, 6): $stack3 = 0  YES
(1479, 0): if l0 < 32 goto $stack1 = 0  YES
(1517, 7): return $stack3  YES
(1479, 4): $stack1 = 0  YES
(1479, 5): return $stack1  YES

In the following all of the instructions which were not covered will be shown: 

(1441, 0): if l0 == null goto $stack2 = l1  NO 
(1441, 1): $stack2 = virtualinvoke l0.<java.lang.Character: char charValue()>()  NO 
(1441, 2): goto [?= return $stack2]  NO 
(1536, 1): if l0 > 90 goto $stack1 = 0  NO 
(1441, 3): $stack2 = l1  NO 
(1536, 2): $stack1 = 1  NO 
(1441, 4): return $stack2  NO 
(1536, 3): goto [?= return $stack1]  NO 
(1400, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  NO 
(1400, 1): return  NO 
(1555, 1): if l0 > 122 goto $stack1 = 0  NO 
(1460, 3): $stack1 = 0  NO 
(1555, 2): $stack1 = 1  NO 
(1555, 3): goto [?= return $stack1]  NO 
(1479, 1): if l0 >= 127 goto $stack1 = 0  NO 
(1479, 2): $stack1 = 1  NO 
(1479, 3): goto [?= return $stack1]  NO 
(1498, 0): if l0 < 32 goto $stack1 = 1  NO 
(1498, 1): if l0 != 127 goto $stack1 = 0  NO 
(1498, 2): $stack1 = 1  NO 
(1498, 3): goto [?= return $stack1]  NO 
(1498, 4): $stack1 = 0  NO 
(1498, 5): return $stack1  NO 
(1517, 4): $stack3 = 1  NO 
(1517, 5): goto [?= return $stack3]  NO 


comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the instructions which were covered will be shown: 

(1761, 0): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1732, 3): if $stack2 != 0 goto $stack4 = 1  YES
(1728, 0): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1759, 0): if l1 == 1 goto return 31  YES
(1728, 1): if l0 >= 2100 goto $stack1 = l0 & 3  YES
(1759, 1): if l1 == 3 goto return 31  YES
(1732, 6): $stack4 = 1  YES
(1821, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1759, 2): if l1 == 5 goto return 31  YES
(1732, 7): goto [?= return $stack4]  YES
(1759, 3): if l1 == 7 goto return 31  YES
(1821, 1): if l2 <= $stack9 goto return  YES
(1759, 4): if l1 == 8 goto return 31  YES
(1819, 0): $stack7 = new java.lang.IllegalArgumentException  YES
(1732, 9): return $stack4  YES
(1759, 5): if l1 == 10 goto return 31  YES
(1819, 1): $stack8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH out of range: \u0001")  YES
(1819, 2): specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack8)  YES
(1759, 6): if l1 != 12 goto (branch)  YES
(1759, 7): return 31  YES
(1819, 3): throw $stack7  YES
(1815, 0): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1815, 1): if l1 <= 12 goto (branch)  YES
(1861, 0): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1861, 1): if l2 <= 31 goto $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1762, 0): $stack4 = new java.lang.IllegalArgumentException  YES
(1762, 1): $stack5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid month: \u0001")  YES
(1760, 0): if l1 == 4 goto return 30  YES
(1762, 2): specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack5)  YES
(1760, 1): if l1 == 6 goto return 30  YES
(1762, 3): throw $stack4  YES
(1760, 2): if l1 == 9 goto return 30  YES
(1760, 3): if l1 != 11 goto (branch)  YES
(1818, 0): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1818, 1): if l2 <= 31 goto $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1812, 0): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1684, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1812, 1): if l0 <= 999999999 goto (branch)  YES
(1684, 1): return  YES
(1862, 0): $stack8 = new java.lang.IllegalArgumentException  YES
(1862, 1): $stack9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day out of range: \u0001")  YES
(1862, 2): specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9)  YES
(1732, 0): $stack1 = l0 & 3  YES
(1862, 3): throw $stack8  YES
(1827, 0): return  YES
(1732, 1): if $stack1 == 0 goto $stack4 = 1  YES
(1732, 2): $stack2 = l0 % 100  YES

In the following all of the instructions which were not covered will be shown: 

(1761, 1): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: boolean isLeapYear(int)>(l0)  NO 
(1761, 2): if $stack6 == 0 goto $stack7 = 28  NO 
(1761, 3): $stack7 = 29  NO 
(1761, 4): goto [?= return $stack7]  NO 
(1761, 5): $stack7 = 28  NO 
(1761, 6): return $stack7  NO 
(1910, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1935, 0): $stack1 = new java.lang.IllegalArgumentException  NO 
(1902, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  NO 
(1935, 1): $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Month out of range: \u0001")  NO 
(1935, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  NO 
(1935, 3): throw $stack1  NO 
(1927, 0): if l0 != 6 goto (branch)  NO 
(1894, 0): return l7  NO 
(1927, 1): return 10  NO 
(1729, 0): $stack7 = l0 & 3  NO 
(1729, 1): if $stack7 != 0 goto $stack8 = 0  NO 
(1729, 2): $stack8 = 1  NO 
(1729, 3): goto [?= return $stack8]  NO 
(1729, 4): $stack8 = 0  NO 
(1729, 5): return $stack8  NO 
(1878, 0): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  NO 
(1903, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  NO 
(1870, 0): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  NO 
(1928, 0): if l0 != 7 goto (branch)  NO 
(1928, 1): return 12  NO 
(1887, 0): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  NO 
(1912, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  NO 
(1879, 0): l4 = l4 + -1  NO 
(1813, 0): $stack3 = new java.lang.IllegalArgumentException  NO 
(1813, 1): $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("YEAR out of range: \u0001")  NO 
(1813, 2): specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack4)  NO 
(1813, 3): throw $stack3  NO 
(1904, 0): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  NO 
(1871, 0): l4 = l0 % 100  NO 
(1929, 0): if l0 != 8 goto (branch)  NO 
(1929, 1): return 15  NO 
(1888, 0): $stack14 = l2 + l3  NO 
(1888, 1): $stack16 = $stack14 + l4  NO 
(1822, 0): $stack10 = new java.lang.IllegalArgumentException  NO 
(1888, 2): $stack15 = l4 / 4  NO 
(1888, 3): $stack17 = $stack16 + $stack15  NO 
(1888, 4): $stack19 = $stack17 + l6  NO 
(1888, 5): $stack18 = 2 * l5  NO 
(1888, 6): $stack20 = $stack19 - $stack18  NO 
(1888, 7): l7 = $stack20 % 7  NO 
(1913, 0): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(1880, 0): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  NO 
(1913, 1): return $stack10  NO 
(1905, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1872, 0): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  NO 
(1930, 0): if l0 != 9 goto (branch)  NO 
(1930, 1): return 18  NO 
(1864, 0): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  NO 
(1864, 1): if l2 <= $stack10 goto l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  NO 
(1922, 0): if l0 != 1 goto (branch)  NO 
(1922, 1): return 28  NO 
(1732, 4): $stack3 = l0 % 400  NO 
(1732, 5): if $stack3 != 0 goto $stack4 = 0  NO 
(1732, 8): $stack4 = 0  NO 
(1881, 0): l4 = 99  NO 
(1931, 0): if l0 != 10 goto (branch)  NO 
(1931, 1): return 20  NO 
(1865, 0): $stack37 = new java.lang.IllegalArgumentException  NO 
(1923, 0): if l0 != 2 goto (branch)  NO 
(1890, 0): if l7 > 0 goto return l7  NO 
(1923, 1): return 31  NO 
(1824, 0): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1824, 1): $stack12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH exceeds month length in given year: \u0001")  NO 
(1824, 2): specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12)  NO 
(1824, 3): throw $stack10  NO 
(1882, 0): l5 = l5 + -1  NO 
(1816, 0): $stack5 = new java.lang.IllegalArgumentException  NO 
(1816, 1): $stack6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("MONTH out of range: \u0001")  NO 
(1816, 2): specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack6)  NO 
(1816, 3): throw $stack5  NO 
(1907, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  NO 
(1874, 0): if l4 >= 0 goto (branch)  NO 
(1932, 0): if l0 != 11 goto (branch)  NO 
(1932, 1): return 23  NO 
(1924, 0): if l0 != 3 goto (branch)  NO 
(1891, 0): l7 = l7 + 7  NO 
(1924, 1): return 2  NO 
(1908, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  NO 
(1875, 0): l4 = l4 + 100  NO 
(1933, 0): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  NO 
(1933, 1): return 25  NO 
(1867, 0): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1867, 1): $stack39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day exceeds month length: \u0001")  NO 
(1867, 2): specialinvoke $stack37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39)  NO 
(1867, 3): throw $stack37  NO 
(1925, 0): if l0 != 4 goto (branch)  NO 
(1925, 1): return 5  NO 
(1760, 4): return 30  NO 
(1909, 0): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  NO 
(1901, 0): $stack4 = new java.lang.StringBuilder  NO 
(1901, 1): specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()  NO 
(1926, 0): if l0 != 5 goto (branch)  NO 
(1926, 1): return 7  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the instructions which were covered will be shown: 

(1630, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1630, 1): return $stack1  YES
(1619, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1619, 1): if $stack1 != 0 goto $stack2 = 0  YES
(1619, 4): $stack2 = 0  YES
(1619, 5): return $stack2  YES
(1579, 0): $stack0 = newarray (java.lang.String)[0]  YES
(1579, 1): <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  YES
(1579, 2): return  YES
(1641, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1609, 0): if l0 == null goto $stack1 = 0  YES
(1609, 1): $stack1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(l0)  YES
(1641, 1): return $stack1  YES
(1609, 2): goto [?= return $stack1]  YES
(1609, 3): $stack1 = 0  YES
(1609, 4): return $stack1  YES

In the following all of the instructions which were not covered will be shown: 

(1664, 0): $stack4 = lengthof l0  NO 
(1664, 1): if l2 < $stack4 goto (branch)  NO 
(1662, 0): return -1  NO 
(1619, 2): $stack2 = 1  NO 
(1619, 3): goto [?= return $stack2]  NO 
(1675, 0): $stack9 = l0[l3]  NO 
(1675, 1): $stack10 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>($stack9)  NO 
(1673, 0): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  NO 
(1675, 2): if $stack10 == 0 goto l3 = l3 + -1  NO 
(1673, 1): $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.Class getComponentType()>()  NO 
(1673, 2): $stack7 = virtualinvoke $stack6.<java.lang.Class: boolean isInstance(java.lang.Object)>(l1)  NO 
(1574, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  NO 
(1673, 3): if $stack7 == 0 goto return -1  NO 
(1574, 1): return  NO 
(1669, 0): $stack12 = l0[l3]  NO 
(1669, 1): if $stack12 != null goto l3 = l3 + -1  NO 
(1667, 0): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  NO 
(1665, 0): $stack14 = lengthof l0  NO 
(1665, 1): l2 = $stack14 - 1  NO 
(1661, 0): if l0 == null goto return -1  NO 
(1661, 1): if l2 >= 0 goto $stack4 = lengthof l0  NO 
(1680, 0): return -1  NO 
(1676, 0): return l3  NO 
(1674, 0): l3 = l3 + -1  NO 
(1674, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1674, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  NO 
(1670, 0): return l3  NO 
(1668, 0): l3 = l3 + -1  NO 
(1668, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1668, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  NO 
(1668, 2): goto [?= return -1]  NO 


comp5111.assignment.cut.Subject


In the following all of the instructions which were covered will be shown: 

(12, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(12, 1): return  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the instructions which were covered will be shown: 

(213, 0): l2 = l2 + 1  YES
(213, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(213, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(116, 0): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(213, 2): if l2 >= $stack4 goto return 1  YES
(116, 1): if $stack7 == 0 goto return 0  YES
(81, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(42, 0): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  YES
(42, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN> = $stack2  YES
(42, 2): return  YES
(104, 0): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(100, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(30, 0): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  YES
(222, 0): return 1  YES
(30, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN> = $stack1  YES
(218, 0): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(249, 0): return l0  YES
(218, 1): $stack7 = l1[l2]  YES
(218, 2): $stack9 = virtualinvoke $stack8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack7)  YES
(218, 3): $stack10 = virtualinvoke $stack9.<java.util.regex.Matcher: boolean matches()>()  YES
(214, 0): $stack5 = l1[l2]  YES
(218, 4): if $stack10 != 0 goto l2 = l2 + 1  YES
(245, 0): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(214, 1): $stack6 = virtualinvoke $stack5.<java.lang.String: boolean isEmpty()>()  YES
(117, 0): return 0  YES
(84, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(245, 1): if $stack1 < 0 goto return l0  YES
(212, 0): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(214, 2): if $stack6 == 0 goto $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(84, 1): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: int indexOfLastSeparator(java.lang.String)>(l0)  YES
(115, 0): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(84, 2): $stack3 = $stack2 + 1  YES
(115, 1): l1 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)  YES
(84, 3): $stack4 = virtualinvoke $stack1.<java.lang.String: java.lang.String substring(int)>($stack3)  YES
(16, 0): $stack0 = newarray (java.lang.String)[0]  YES
(84, 4): return $stack4  YES
(16, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  YES
(14, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(14, 1): return  YES
(105, 0): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(105, 1): return $stack5  YES
(103, 0): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES

In the following all of the instructions which were not covered will be shown: 

(52, 0): return 92  NO 
(168, 0): l5 = l5 + 1  NO 
(168, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(168, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  NO 
(168, 2): if l5 >= $stack14 goto (branch)  NO 
(185, 0): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  NO 
(152, 0): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  NO 
(185, 1): if $stack19 <= 4 goto l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  NO 
(169, 0): l6 = l2[l5]  NO 
(285, 0): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(219, 0): return 0  NO 
(186, 0): return 0  NO 
(153, 0): if l1 == 0 goto $stack13 = lengthof l2  NO 
(54, 0): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  NO 
(269, 0): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(170, 0): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  NO 
(170, 1): if $stack16 == 0 goto l4 = 0  NO 
(154, 0): $stack28 = new java.util.ArrayList  NO 
(121, 0): l2 = l2 + 1  NO 
(154, 1): $stack29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(l2)  NO 
(121, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(121, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  NO 
(154, 2): specialinvoke $stack28.<java.util.ArrayList: void <init>(java.util.Collection)>($stack29)  NO 
(55, 0): return 47  NO 
(270, 0): $stack11 = new java.util.ArrayList  NO 
(270, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  NO 
(171, 0): l4 = l4 + 1  NO 
(287, 0): l4 = l8  NO 
(155, 0): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(122, 0): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(155, 1): if $stack30 == 0 goto $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(271, 0): $stack12 = new java.lang.StringBuilder  NO 
(271, 1): specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>()  NO 
(172, 0): if l4 <= 1 goto l3#27 = l3#27 + 1  NO 
(123, 0): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(57, 0): $stack1 = new java.lang.IllegalArgumentException  NO 
(57, 1): $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l0)  NO 
(57, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  NO 
(57, 3): throw $stack1  NO 
(272, 0): l4 = 0  NO 
(173, 0): return 0  NO 
(289, 0): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(289, 1): if $stack13 == 0 goto $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(190, 0): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  NO 
(157, 0): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(124, 0): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(157, 1): goto [?= $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>]  NO 
(273, 0): l7 = l7 + 1  NO 
(273, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(273, "comp5111.assignment.cut.Subject$FilenameTasks", 2)]  NO 
(273, 2): if l7 >= l6 goto $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(273, 3): l8 = l1[l7]  NO 
(290, 0): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(290, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack17)  NO 
(158, 0): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(125, 0): return 0  NO 
(158, 1): if $stack31 == 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(158, 2): $stack36 = interfaceinvoke $stack28.<java.util.List: boolean isEmpty()>()  NO 
(158, 3): if $stack36 != 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(274, 0): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(274, 1): if l8 != 42 goto virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(192, 0): return 0  NO 
(159, 0): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(275, 0): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275, 1): if $stack20 == 0 goto (branch)  NO 
(176, 0): l4 = 0  NO 
(193, 0): goto [?= (branch)]  NO 
(276, 0): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(276, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack26)  NO 
(144, 0): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  NO 
(293, 0): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(293, 1): $stack15 = virtualinvoke $stack11.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($stack14)  NO 
(293, 2): $stack16 = (java.lang.String[]) $stack15  NO 
(194, 0): if l7 < 0 goto return 0  NO 
(293, 3): return $stack16  NO 
(161, 0): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(194, 1): if l7 <= 65535 goto l3#27 = l3#27 + 1  NO 
(128, 0): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(161, 1): $stack33 = interfaceinvoke $stack28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack32)  NO 
(128, 1): if $stack11 <= 1 goto l2 = l2 + 1  NO 
(161, 2): l2 = (java.lang.String[]) $stack33  NO 
(128, 2): $stack14 = virtualinvoke l3.<java.lang.String: boolean startsWith(java.lang.String)>("0")  NO 
(128, 3): if $stack14 == 0 goto l2 = l2 + 1  NO 
(277, 0): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(178, 0): $stack17 = lengthof l2  NO 
(145, 0): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(178, 1): $stack18 = $stack17 - 1  NO 
(145, 1): $stack49 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>("::")  NO 
(178, 2): if l5 != $stack18 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  NO 
(145, 2): $stack50 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String)>("::")  NO 
(178, 3): $stack24 = virtualinvoke l6.<java.lang.String: boolean contains(java.lang.CharSequence)>(".")  NO 
(145, 3): if $stack49 == $stack50 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(178, 4): if $stack24 == 0 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  NO 
(195, 0): return 0  NO 
(129, 0): return 0  NO 
(179, 0): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(146, 0): return 0  NO 
(179, 1): if $stack27 != 0 goto l3#27 = l3#27 + 2  NO 
(163, 0): $stack13 = lengthof l2  NO 
(163, 1): if $stack13 <= 8 goto l3#27 = 0  NO 
(279, 0): if l8 != 63 goto (branch)  NO 
(246, 0): $stack2 = new java.lang.IllegalArgumentException  NO 
(246, 1): specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it")  NO 
(180, 0): return 0  NO 
(246, 2): throw $stack2  NO 
(164, 0): return 0  NO 
(280, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(280, 1): goto [?= l4 = l8]  NO 
(148, 0): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(148, 1): if $stack10 == 0 goto $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  NO 
(82, 0): return null  NO 
(148, 2): $stack45 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(148, 3): if $stack45 == 0 goto return 0  NO 
(198, 0): l3#27 = l3#27 + 1  NO 
(281, 0): if l4 == 42 goto l4 = l8  NO 
(182, 0): l3#27 = l3#27 + 2  NO 
(149, 0): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  NO 
(149, 1): if $stack11 == 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  NO 
(149, 2): $stack41 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(116, 2): $stack8 = virtualinvoke l1.<java.util.regex.Matcher: int groupCount()>()  NO 
(149, 3): if $stack41 != 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  NO 
(116, 3): if $stack8 == 4 goto l2 = 1  NO 
(265, 0): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  NO 
(232, 0): if l0 == 47 goto $stack1 = 1  NO 
(265, 1): if $stack9 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(232, 1): if l0 != 92 goto $stack1 = 0  NO 
(265, 2): $stack32 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(42)  NO 
(166, 0): l3#27 = 0  NO 
(232, 2): $stack1 = 1  NO 
(265, 3): if $stack32 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(232, 3): goto [?= return $stack1]  NO 
(232, 4): $stack1 = 0  NO 
(232, 5): return $stack1  NO 
(282, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(282, 1): goto [?= l4 = l8]  NO 
(216, 0): $stack13 = lengthof l1  NO 
(183, 0): goto [?= l5 = l5 + 1]  NO 
(216, 1): $stack14 = $stack13 - 1  NO 
(150, 0): return 0  NO 
(216, 2): if l2 != $stack14 goto $stack15 = 0  NO 
(216, 3): $stack15 = 1  NO 
(216, 4): goto [?= return $stack15]  NO 
(51, 0): if l0 != 47 goto (branch)  NO 
(216, 5): $stack15 = 0  NO 
(216, 6): return $stack15  NO 
(266, 0): $stack39 = newarray (java.lang.String)[1]  NO 
(266, 1): $stack39[0] = l0  NO 
(200, 0): if l3#27 > 8 goto $stack15 = 0  NO 
(266, 2): return $stack39  NO 
(167, 0): l4 = 0  NO 
(200, 1): if l3#27 >= 8 goto $stack15 = 1  NO 
(134, 0): return 1  NO 
(200, 2): if l1 == 0 goto $stack15 = 0  NO 
(101, 0): return -1  NO 
(200, 3): $stack15 = 1  NO 
(200, 4): goto [?= return $stack15]  NO 
(200, 5): $stack15 = 0  NO 
(200, 6): return $stack15  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the instructions which were covered will be shown: 

(580, 3): specialinvoke $stack16.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack18)  YES
(448, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(580, 4): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack16)  YES
(671, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(415, 0): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(349, 0): l2 = l2 + 1  YES
(349, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(349, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(663, 0): if l0 == null goto return 1  YES
(663, 1): if l1 != null goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(688, 0): return 1  YES
(556, 0): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(556, 1): if $stack9 == 0 goto l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(490, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(457, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(490, 1): if $stack3 == 0 goto $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(614, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(581, 0): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(581, 1): $stack21 = interfaceinvoke $stack11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack20)  YES
(581, 2): $stack22 = (java.lang.String[]) $stack21  YES
(581, 3): return $stack22  YES
(672, 0): l8 = l8 + 1  YES
(416, 0): l2 = l2 + 1  YES
(672, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(672, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(416, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(416, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(350, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(350, 1): $stack5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack4)  YES
(350, 2): if $stack5 != 0 goto l2 = l2 + 1  YES
(557, 0): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(557, 1): return $stack41  YES
(458, 0): if l4 != 10 goto return l3  YES
(615, 0): l3 = lengthof l1  YES
(673, 0): $stack13 = l1[l8]  YES
(417, 0): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(673, 1): if $stack13 != l7 goto l8 = l8 + 1  YES
(417, 1): $stack6 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack5)  YES
(351, 0): return 0  YES
(417, 2): if $stack6 != 0 goto l2 = l2 + 1  YES
(616, 0): l4 = l2 - 1  YES
(451, 0): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(418, 0): return 0  YES
(509, 0): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(666, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(377, 0): if l0 == null goto $stack2 = 1  YES
(377, 1): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(377, 2): if $stack1 != 0 goto $stack2 = 0  YES
(377, 3): $stack2 = 1  YES
(377, 4): goto [?= return $stack2]  YES
(377, 5): $stack2 = 0  YES
(377, 6): return $stack2  YES
(559, 0): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(716, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(716, 1): return $stack1  YES
(617, 0): l5 = l3 - 1  YES
(452, 0): if l1 >= 2 goto l2 = l1 - 1  YES
(510, 0): l1#2 = l1#2 + 1  YES
(667, 0): l3 = l2 - 1  YES
(345, 0): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(535, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(535, 1): return $stack1  YES
(502, 0): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(502, 1): l1#2 = $stack5 - 1  YES
(560, 0): $stack11 = new java.util.ArrayList  YES
(560, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  YES
(494, 0): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(461, 0): return l3  YES
(494, 1): if $stack4 != 1 goto $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(618, 0): l6 = l6 + 1  YES
(618, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(618, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(668, 0): l4 = lengthof l1  YES
(412, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(412, 1): if $stack3 == 0 goto l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(346, 0): if l1 != 0 goto l2 = 0  YES
(503, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(561, 0): l4 = 0  YES
(619, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(553, 0): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(611, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(611, 1): if $stack9 != 0 goto return 0  YES
(611, 2): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isEmpty(char[])>(l1)  YES
(512, 0): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(611, 3): if $stack10 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(512, 1): return $stack7  YES
(669, 0): l5 = l4 - 1  YES
(413, 0): return 0  YES
(636, 0): return 0  YES
(347, 0): return 1  YES
(562, 0): $stack12 = l2[0]  YES
(562, 1): l5 = staticinvoke <java.lang.Character: int getType(char)>($stack12)  YES
(620, 0): l8 = l8 + 1  YES
(620, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(620, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(455, 0): l2 = l1 - 1  YES
(612, 0): return 0  YES
(323, 0): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(323, 3): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(323, 4): return $stack1  YES
(670, 0): l6 = l6 + 1  YES
(670, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(670, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(505, 0): if l2 != 10 goto (branch)  YES
(563, 0): l6 = l6 + 1  YES
(563, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(563, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(563, 2): $stack15 = $stack14 - 1  YES
(563, 3): if l6 >= $stack15 goto $stack16 = new java.lang.String  YES
(621, 0): $stack15 = l1[l8]  YES
(621, 1): if $stack15 != l7 goto l8 = l8 + 1  YES
(456, 0): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(580, 0): $stack16 = new java.lang.String  YES
(580, 1): $stack17 = lengthof l2  YES
(580, 2): $stack18 = $stack17 - l4  YES

In the following all of the instructions which were not covered will be shown: 

(795, 0): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  NO 
(630, 0): if l6 >= l4 goto l8 = l8 + 1  NO 
(630, 1): $stack19 = l8 + 1  NO 
(564, 0): $stack23 = l2[l6]  NO 
(630, 2): $stack21 = l1[$stack19]  NO 
(564, 1): l7 = staticinvoke <java.lang.Character: int getType(char)>($stack23)  NO 
(630, 3): $stack20 = l6 + 1  NO 
(630, 4): $stack22 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack20)  NO 
(630, 5): if $stack21 != $stack22 goto l8 = l8 + 1  NO 
(878, 0): l0#4 = l2  NO 
(845, 0): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(878, 1): goto [?= return l0#4]  NO 
(845, 1): $stack12 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($stack11)  NO 
(845, 2): if $stack12 == 0 goto l4 = l4 + 1  NO 
(746, 0): return 0  NO 
(680, 0): return 0  NO 
(449, 0): return null  NO 
(796, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(796, 1): $stack13 = l2 - 1  NO 
(796, 2): $stack14 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack13)  NO 
(796, 3): $stack15 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack14)  NO 
(664, 0): return 1  NO 
(796, 4): if $stack15 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(631, 0): return 1  NO 
(565, 0): if l7 != l5 goto (branch)  NO 
(499, 0): return l0  NO 
(846, 0): l2 = 1  NO 
(863, 0): if l0 == null goto return l0  NO 
(863, 1): if l1 == null goto return l0  NO 
(797, 0): l2 = l2 + -1  NO 
(863, 2): if l2 != null goto l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  NO 
(797, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(796, "comp5111.assignment.cut.Subject$StringTasks", 0)]  NO 
(566, 0): goto [?= l6 = l6 + 1]  NO 
(880, 0): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  NO 
(748, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(748, 1): $stack5 = interfaceinvoke l1.<java.lang.CharSequence: int length()>()  NO 
(682, 0): if l6 >= l3 goto l8 = l8 + 1  NO 
(748, 2): if $stack4 == $stack5 goto $stack6 = l0 instanceof java.lang.String  NO 
(682, 1): $stack17 = l8 + 1  NO 
(682, 2): $stack19 = l1[$stack17]  NO 
(682, 3): $stack18 = l6 + 1  NO 
(682, 4): $stack20 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack18)  NO 
(682, 5): if $stack19 != $stack20 goto l8 = l8 + 1  NO 
(864, 0): return l0  NO 
(881, 0): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  NO 
(881, 1): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack16, l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001")  NO 
(881, 2): goto [?= return l0#4]  NO 
(749, 0): return 0  NO 
(683, 0): return 0  NO 
(799, 0): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  NO 
(799, 1): if $stack4 == 0 goto (branch)  NO 
(568, 0): if l1 == 0 goto $stack25 = new java.lang.String  NO 
(568, 1): if l7 != 2 goto $stack25 = new java.lang.String  NO 
(568, 2): if l5 != 1 goto $stack25 = new java.lang.String  NO 
(849, 0): if l1 == 0 goto $stack8 = 0  NO 
(849, 1): if l2 == 0 goto $stack8 = 0  NO 
(849, 2): $stack8 = 1  NO 
(849, 3): goto [?= return $stack8]  NO 
(849, 4): $stack8 = 0  NO 
(849, 5): return $stack8  NO 
(453, 0): return ""  NO 
(354, 0): return 1  NO 
(833, 0): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  NO 
(800, 0): return l0  NO 
(833, 1): if $stack5 != 0 goto return 0  NO 
(833, 2): $stack6 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(833, 3): if $stack6 != 1 goto l1 = 0  NO 
(569, 0): l8 = l6 - 1  NO 
(751, 0): $stack6 = l0 instanceof java.lang.String  NO 
(751, 1): if $stack6 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(751, 2): $stack12 = l1 instanceof java.lang.String  NO 
(751, 3): if $stack12 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(421, 0): return 1  NO 
(867, 0): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  NO 
(834, 0): return 0  NO 
(570, 0): if l8 == l4 goto (branch)  NO 
(752, 0): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  NO 
(752, 1): return $stack15  NO 
(554, 0): return null  NO 
(323, 1): $stack1 = 0  NO 
(802, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(323, 2): goto [?= return $stack1]  NO 
(802, 1): $stack6 = l2 - 1  NO 
(802, 2): $stack7 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack6)  NO 
(802, 3): $stack8 = virtualinvoke l1.<java.lang.String: int indexOf(int)>($stack7)  NO 
(802, 4): if $stack8 == -1 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(571, 0): $stack38 = new java.lang.String  NO 
(571, 1): $stack39 = l8 - l4  NO 
(571, 2): specialinvoke $stack38.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack39)  NO 
(571, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack38)  NO 
(885, 0): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  NO 
(869, 0): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(836, 0): l1 = 0  NO 
(803, 0): l2 = l2 + -1  NO 
(803, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(802, "comp5111.assignment.cut.Subject$StringTasks", 0)]  NO 
(572, 0): l4 = l8  NO 
(506, 0): $stack11 = l1#2 - 1  NO 
(506, 1): $stack12 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack11)  NO 
(506, 2): if $stack12 != 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  NO 
(622, 0): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(622, 1): if $stack18 != 0 goto (branch)  NO 
(870, 0): return l0  NO 
(837, 0): l2 = 0  NO 
(507, 0): l1#2 = l1#2 + -1  NO 
(507, 1): goto [?= $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)]  NO 
(887, 0): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  NO 
(887, 1): $stack14 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($stack13, l1, l2)  NO 
(887, 2): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>($stack12, l2, $stack14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001")  NO 
(755, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(491, 0): return l0  NO 
(458, 1): $stack8 = l2 - 1  NO 
(458, 2): $stack9 = virtualinvoke l3.<java.lang.String: char charAt(int)>($stack8)  NO 
(458, 3): if $stack9 != 13 goto return l3  NO 
(838, 0): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(574, 0): goto [?= l5 = l7]  NO 
(756, 0): l3 = l3 + 1  NO 
(756, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(756, "comp5111.assignment.cut.Subject$StringTasks", 1)]  NO 
(624, 0): return 1  NO 
(459, 0): $stack11 = l2 - 1  NO 
(459, 1): $stack12 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int,int)>(0, $stack11)  NO 
(459, 2): return $stack12  NO 
(839, 0): l4 = l4 + 1  NO 
(806, 0): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(839, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(839, "comp5111.assignment.cut.Subject$StringTasks", 1)]  NO 
(806, 1): return $stack5  NO 
(674, 0): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(674, 1): if $stack16 != 0 goto (branch)  NO 
(575, 0): $stack25 = new java.lang.String  NO 
(575, 1): $stack26 = l6 - l4  NO 
(575, 2): specialinvoke $stack25.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack26)  NO 
(575, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack25)  NO 
(790, 0): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  NO 
(757, 0): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 1): $stack9 = interfaceinvoke l1.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 2): if $stack8 == $stack9 goto l3 = l3 + 1  NO 
(873, 0): l4 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(840, 0): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(840, 1): if l2 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(576, 0): l4 = l6  NO 
(890, 0): return l0#4  NO 
(791, 0): if l2 != 0 goto (branch)  NO 
(758, 0): return 0  NO 
(626, 0): if l8 != l5 goto (branch)  NO 
(841, 0): return 1  NO 
(742, 0): if l0 != l1 goto (branch)  NO 
(676, 0): return 0  NO 
(792, 0): return l0  NO 
(495, 0): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  NO 
(875, 0): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  NO 
(875, 1): l6 = l3 + $stack10  NO 
(297, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  NO 
(297, 1): return  NO 
(743, 0): return 1  NO 
(578, 0): l5 = l7  NO 
(628, 0): return 1  NO 
(496, 0): if l1 == 13 goto return ""  NO 
(496, 1): if l1 != 10 goto return l0  NO 
(843, 0): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(843, 1): $stack10 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($stack9)  NO 
(843, 2): if $stack10 == 0 goto $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(678, 0): if l8 != l5 goto (branch)  NO 
(761, 0): return 1  NO 
(497, 0): return ""  NO 
(877, 0): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  NO 
(844, 0): l1 = 1  NO 
(877, 1): if l4 != $stack11 goto (branch)  NO 
(844, 1): goto [?= l4 = l4 + 1]  NO 
(745, 0): if l0 == null goto return 0  NO 
(745, 1): if l1 != null goto $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the instructions which were covered will be shown: 

(1381, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1381, 1): return  YES

In the following all of the instructions which were not covered will be shown: 

(1393, 0): if l0 != l1 goto (branch)  NO 
(1396, 3): $stack2 = -1  NO 
(1396, 4): return $stack2  NO 
(1396, 0): if l0 == 0 goto $stack2 = -1  NO 
(1396, 1): $stack2 = 1  NO 
(1394, 0): return 0  NO 
(1396, 2): goto [?= return $stack2]  NO 



Coverage of Test Suite: comp5111.assignment.cut.RegressionTest0

comp5111.assignment.cut.Subject$NumberTasks
133 Instructions from a total of 351 Instructions were covered.
Percentage: 37.89173789173789%

comp5111.assignment.cut.Subject$CharTasks
42 Instructions from a total of 46 Instructions were covered.
Percentage: 91.30434782608695%

comp5111.assignment.cut.Subject$GregorianTasks
115 Instructions from a total of 146 Instructions were covered.
Percentage: 78.76712328767124%

comp5111.assignment.cut.Subject$ArrayTasks
41 Instructions from a total of 49 Instructions were covered.
Percentage: 83.6734693877551%

comp5111.assignment.cut.Subject
2 Instructions from a total of 2 Instructions were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
95 Instructions from a total of 204 Instructions were covered.
Percentage: 46.568627450980394%

comp5111.assignment.cut.Subject$StringTasks
207 Instructions from a total of 295 Instructions were covered.
Percentage: 70.16949152542372%

comp5111.assignment.cut.Subject$BooleanTasks
9 Instructions from a total of 9 Instructions were covered.
Percentage: 100.0%

Overall Statement Coverage: 58.43920145190563%



In the following part you can see which instructions were executed. Before every instruction you can see two numbers
in the form of (x,y), for Example (1,5). This indicates that the following Instruction can be found on line x of the Java code. 
y denotes that it is the y-th Jimple Instruction generated from the corresponding Java line.
After each listed instructions you can find a NO if the instruction wasn't executed and a YES if it was. 


comp5111.assignment.cut.Subject$NumberTasks


In the following all of the instructions which were covered will be shown: 

(1340, 0): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1340, 1): if $stack5 != 45 goto $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1299, 0): $stack2 = new java.math.BigDecimal  YES
(1299, 1): specialinvoke $stack2.<java.math.BigDecimal: void <init>(java.lang.String)>(l0)  YES
(1010, 0): $stack60 = l2 - 1  YES
(1010, 1): l12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, $stack60)  YES
(1200, 0): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(944, 0): l4 = 0  YES
(1258, 0): l2 = 10  YES
(969, 0): $stack19 = l2 - 1  YES
(969, 1): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack19)  YES
(1184, 0): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1118, 0): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 3): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 4): return $stack5  YES
(1267, 0): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1267, 1): if $stack8 != 0 goto l2 = 16  YES
(1234, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1267, 2): $stack12 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", l1)  YES
(945, 0): l7 = l7 + 1  YES
(1267, 3): if $stack12 == 0 goto $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(945, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(945, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  YES
(945, 2): if l7 >= l6 goto (branch)  YES
(945, 3): l8 = $stack16[l7]  YES
(1292, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1259, 0): l3 = 0  YES
(1003, 0): if l11 == 0 goto (branch)  YES
(937, 0): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937, 1): if $stack15 == 0 goto $stack16 = newarray (java.lang.String)[3]  YES
(1350, 0): l2 = 0  YES
(1251, 0): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1334, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1334, 1): if $stack1 == 0 goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1012, 0): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(979, 0): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(946, 0): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(979, 1): if $stack25 != 0 goto $stack119 = 0  YES
(946, 1): if $stack138 == 0 goto l7 = l7 + 1  YES
(979, 2): if l5#11 == 46 goto $stack119 = 0  YES
(979, 3): $stack119 = 1  YES
(979, 4): goto [?= l11 = $stack119]  YES
(1359, 0): if l4 != 0 goto l3 = l3 + 1  YES
(1359, 1): $stack9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(979, 6): l11 = $stack119  YES
(1359, 2): $stack10 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack9)  YES
(1260, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1004, 0): if l10 <= -1 goto l8 = null  YES
(1359, 3): if $stack10 != 0 goto l3 = l3 + 1  YES
(938, 0): $stack151 = new java.lang.NumberFormatException  YES
(938, 1): specialinvoke $stack151.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(938, 2): throw $stack151  YES
(1351, 0): l3 = l3 + 1  YES
(1351, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1351, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  YES
(1351, 2): if l3 >= $stack5 goto return 1  YES
(1219, 0): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1335, 0): return 0  YES
(980, 0): if l9 <= -1 goto (branch)  YES
(1360, 0): return 0  YES
(1261, 0): if l4 != 45 goto (branch)  YES
(1352, 0): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1352, 1): if $stack6 != 46 goto $stack13 = 0  YES
(1352, 4): $stack13 = 0  YES
(1352, 5): l4 = $stack13  YES
(1377, 0): $stack2 = l0 - l1  YES
(1377, 1): return $stack2  YES
(1278, 0): $stack9 = new java.math.BigInteger  YES
(1278, 1): $stack10 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l1)  YES
(1278, 2): specialinvoke $stack9.<java.math.BigInteger: void <init>(java.lang.String,int)>($stack10, l2)  YES
(1270, 0): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1270, 1): if $stack13 == 0 goto $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1237, 0): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(973, 0): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(1353, 0): if $stack13 == 0 goto (branch)  YES
(1254, 0): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254, 1): if $stack6 == 0 goto l1 = 0  YES
(1337, 0): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1337, 1): $stack3 = $stack2 - 1  YES
(1337, 2): $stack4 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack3)  YES
(1337, 3): if $stack4 != 46 goto $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1296, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296, 1): if $stack1 == 0 goto $stack2 = new java.math.BigDecimal  YES
(1007, 0): l8 = null  YES
(974, 0): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(1197, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941, 0): $stack16 = newarray (java.lang.String)[3]  YES
(974, 1): $stack23 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(69)  YES
(941, 1): $stack16[0] = "0x"  YES
(974, 2): $stack24 = $stack22 + $stack23  YES
(941, 2): $stack16[1] = "0X"  YES
(974, 3): l10 = $stack24 + 1  YES
(941, 3): $stack16[2] = "#"  YES
(999, 0): if $stack119 == 0 goto $stack101 = l2  YES
(1255, 0): $stack25 = new java.lang.NumberFormatException  YES
(999, 1): $stack101 = l2 - 1  YES
(1255, 1): specialinvoke $stack25.<java.lang.NumberFormatException: void <init>(java.lang.String)>("An empty string is not a valid number")  YES
(999, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)]  YES
(1255, 2): throw $stack25  YES
(900, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(900, 1): return  YES
(999, 4): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)  YES
(1346, 0): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1313, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1346, 1): return $stack6  YES
(1313, 1): return $stack1  YES
(1181, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1115, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1297, 0): $stack3 = new java.lang.NumberFormatException  YES
(1264, 0): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1297, 1): specialinvoke $stack3.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(1297, 2): throw $stack3  YES
(942, 0): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(934, 0): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1058, 0): $stack88 = new java.lang.NumberFormatException  YES
(1058, 1): $stack89 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  YES
(992, 0): if l10 <= -1 goto (branch)  YES
(1058, 2): specialinvoke $stack88.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack89)  YES
(1215, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1058, 3): throw $stack88  YES
(1116, 0): if l2 == 45 goto $stack7 = 1  YES
(1116, 1): if l2 != 43 goto $stack7 = 0  YES
(1273, 0): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1273, 1): if $stack14 == 0 goto $stack9 = new java.math.BigInteger  YES
(1116, 4): $stack7 = 0  YES
(951, 0): if l4 <= 0 goto $stack19 = l2 - 1  YES
(943, 0): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(943, 1): if $stack18 == 43 goto $stack145 = 1  YES
(943, 2): $stack144 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(943, 3): if $stack144 != 45 goto $stack145 = 0  YES
(1356, 0): if l2 <= 1 goto (branch)  YES
(1257, 0): l1 = 0  YES
(943, 6): $stack145 = 0  YES
(1001, 0): l7#20 = null  YES
(943, 7): l3 = $stack145  YES

In the following all of the instructions which were not covered will be shown: 

(993, 0): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1026, 1): $stack63 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1092, 3): $stack33 = $stack32 cmpl 0.0  NO 
(960, 0): l6 = l2 - l4  NO 
(1026, 2): specialinvoke $stack62.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack63)  NO 
(1092, 4): if $stack33 != 0 goto l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1026, 3): throw $stack62  NO 
(1092, 5): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1092, 6): if $stack38 == 0 goto (branch)  NO 
(1274, 0): l2 = 8  NO 
(1076, 0): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1076, 1): return $stack157  NO 
(1357, 0): return 0  NO 
(1093, 0): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(994, 0): $stack105 = new java.lang.NumberFormatException  NO 
(961, 0): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(994, 1): $stack106 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(961, 1): if l6 != 16 goto (branch)  NO 
(994, 2): specialinvoke $stack105.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack106)  NO 
(961, 2): if l5#11 <= 55 goto (branch)  NO 
(994, 3): throw $stack105  NO 
(1341, 0): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1341, 1): if $stack7 != 1 goto $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1275, 0): l1 = l1 + 1  NO 
(1044, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1160, 0): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1094, 0): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1094, 1): $stack36 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($stack35)  NO 
(1094, 2): $stack37 = virtualinvoke l14.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($stack36)  NO 
(1094, 3): if $stack37 != 0 goto return l14  NO 
(962, 0): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962, 1): return $stack122  NO 
(1342, 0): return 0  NO 
(1045, 0): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1045, 1): if $stack76 != 0 goto (branch)  NO 
(1045, 2): $stack78 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1045, 3): $stack79 = $stack78 cmpl 0.0  NO 
(1045, 4): if $stack79 != 0 goto return l13#69  NO 
(1045, 5): $stack80 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1045, 6): if $stack80 == 0 goto (branch)  NO 
(979, 5): $stack119 = 0  NO 
(1293, 0): return null  NO 
(1161, 0): return 1  NO 
(1095, 0): return l13#69  NO 
(996, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(996, 1): goto [?= l7#20 = null]  NO 
(1046, 0): return l13#69  NO 
(947, 0): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(947, 1): $stack142 = $stack141 + l3  NO 
(947, 2): l4 = 0 + $stack142  NO 
(1063, 0): if l10 <= -1 goto l8 = null  NO 
(1030, 0): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1063, 1): $stack55 = l2 - 1  NO 
(1063, 2): if l10 >= $stack55 goto l8 = null  NO 
(964, 0): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(964, 1): if l6 != 8 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(964, 2): if l5#11 <= 55 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1344, 0): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1344, 1): return $stack8  NO 
(1080, 0): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1080, 1): return $stack155  NO 
(981, 0): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(948, 0): goto [?= (branch)]  NO 
(1262, 0): l3 = 1  NO 
(1163, 0): l1 = l1 + -1  NO 
(1163, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1163, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  NO 
(1097, 0): return l14  NO 
(1163, 2): if l1 < 0 goto return 1  NO 
(1064, 0): $stack58 = l10 + 1  NO 
(1031, 0): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1064, 1): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>($stack58)  NO 
(1031, 1): if $stack74 != 0 goto (branch)  NO 
(1064, 2): goto [?= (branch)]  NO 
(965, 0): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1031, 2): $stack82 = virtualinvoke l13#63.<java.lang.Float: float floatValue()>()  NO 
(965, 1): return $stack123  NO 
(1031, 3): $stack83 = $stack82 cmpl 0.0F  NO 
(1031, 4): if $stack83 != 0 goto return l13#63  NO 
(1031, 5): $stack84 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1031, 6): if $stack84 == 0 goto (branch)  NO 
(1279, 0): if l3 == 0 goto $stack11 = $stack9  NO 
(1279, 1): $stack11 = virtualinvoke $stack9.<java.math.BigInteger: java.math.BigInteger negate()>()  NO 
(1279, 2): goto [?= return $stack11]  NO 
(1279, 3): $stack11 = $stack9  NO 
(1279, 4): return $stack11  NO 
(1015, 0): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 0): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(1015, 1): if l8 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 1): if l10 <= l2 goto $stack116 = l9 + 1  NO 
(1263, 0): l1 = 1  NO 
(1263, 1): goto [?= $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)]  NO 
(1164, 0): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1164, 1): if $stack3 == 48 goto l1 = l1 + -1  NO 
(999, 3): $stack101 = l2  NO 
(1148, 0): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1148, 1): if $stack2 == 0 goto $stack4 = 0  NO 
(1148, 2): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l1)  NO 
(1148, 3): if $stack3 == 0 goto $stack4 = 0  NO 
(1148, 4): $stack4 = 1  NO 
(983, 0): $stack114 = new java.lang.NumberFormatException  NO 
(1148, 5): goto [?= return $stack4]  NO 
(983, 1): $stack115 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1148, 6): $stack4 = 0  NO 
(983, 2): specialinvoke $stack114.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack115)  NO 
(1148, 7): return $stack4  NO 
(983, 3): throw $stack114  NO 
(1363, 0): return 1  NO 
(1198, 0): return null  NO 
(1165, 0): return 0  NO 
(1066, 0): l8 = null  NO 
(967, 0): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(967, 1): return $stack124  NO 
(1182, 0): return null  NO 
(1050, 0): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1116, 2): $stack7 = 1  NO 
(1017, 0): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1116, 3): goto [?= (branch)]  NO 
(1017, 1): if $stack65 != 0 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 2): $stack68 = virtualinvoke l12.<java.lang.String: char charAt(int)>(0)  NO 
(1017, 3): if $stack68 != 45 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 4): $stack70 = virtualinvoke l12.<java.lang.String: java.lang.String substring(int)>(1)  NO 
(1017, 5): $stack71 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>($stack70)  NO 
(1017, 6): if $stack71 != 0 goto $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1017, 7): $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 8): if $stack66 == 0 goto $stack62 = new java.lang.NumberFormatException  NO 
(1265, 0): l1 = 1  NO 
(1034, 0): return l13#63  NO 
(935, 0): return null  NO 
(1216, 0): return null  NO 
(985, 0): $stack116 = l9 + 1  NO 
(952, 0): l5#11 = 0  NO 
(985, 1): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack116, l10)  NO 
(985, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)]  NO 
(1299, 2): return $stack2  NO 
(1200, 1): return $stack1  NO 
(1101, 0): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1068, 0): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1068, 1): if l8 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1184, 1): return $stack1  NO 
(1085, 0): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1118, 1): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(1, l1)  NO 
(1052, 0): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1118, 2): goto [?= return $stack5]  NO 
(1019, 0): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1052, 1): return $stack77  NO 
(1019, 1): return $stack67  NO 
(953, 0): l6 = l6 + 1  NO 
(953, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(953, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  NO 
(1168, 0): return 1  NO 
(1102, 0): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1102, 1): return $stack31  NO 
(1086, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(954, 0): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(1268, 0): l2 = 16  NO 
(1235, 0): return null  NO 
(1004, 1): $stack90 = l2 - 1  NO 
(1004, 2): if l10 >= $stack90 goto l8 = null  NO 
(1252, 0): return null  NO 
(1219, 1): return $stack1  NO 
(1087, 0): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1087, 1): if $stack29 != 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(988, 0): $stack107 = l9 + 1  NO 
(955, 0): if l5#11 == 48 goto l4 = l4 + 1  NO 
(988, 1): if $stack119 == 0 goto $stack110 = l2  NO 
(988, 2): $stack110 = l2 - 1  NO 
(988, 3): goto [?= l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)]  NO 
(988, 4): $stack110 = l2  NO 
(988, 5): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)  NO 
(1269, 0): l1 = l1 + 2  NO 
(1269, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1071, 0): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1071, 1): return $stack54  NO 
(1005, 0): $stack98 = l10 + 1  NO 
(1005, 1): $stack97 = l2 - 1  NO 
(1005, 2): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack98, $stack97)  NO 
(1005, 3): goto [?= $stack60 = l2 - 1]  NO 
(1352, 2): $stack13 = 1  NO 
(1352, 3): goto [?= l4 = $stack13]  NO 
(1088, 0): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1088, 1): $stack43 = $stack42 cmpl 0.0F  NO 
(1088, 2): if $stack43 != 0 goto $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1088, 3): $stack48 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(956, 0): goto [?= l6 = l2 - l4]  NO 
(1088, 4): if $stack48 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1237, 1): return $stack1  NO 
(1039, 0): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1089, 0): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1089, 1): $stack45 = virtualinvoke l13#69.<java.lang.Double: java.lang.String toString()>()  NO 
(1023, 0): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1089, 2): $stack46 = virtualinvoke $stack44.<java.lang.String: boolean equals(java.lang.Object)>($stack45)  NO 
(990, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(1023, 1): return $stack164  NO 
(1089, 3): if $stack46 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(990, 1): goto [?= (branch)]  NO 
(1271, 0): l2 = 16  NO 
(1354, 0): l2 = l2 + 1  NO 
(1090, 0): return l12#81  NO 
(958, 0): l4 = l4 + 1  NO 
(1338, 0): return 0  NO 
(1272, 0): l1 = l1 + 1  NO 
(1272, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1273, 2): $stack19 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1273, 3): $stack20 = l1 + 1  NO 
(1273, 4): if $stack19 <= $stack20 goto $stack9 = new java.math.BigInteger  NO 
(943, 4): $stack145 = 1  NO 
(943, 5): goto [?= l3 = $stack145]  NO 
(1092, 0): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1092, 1): if $stack30 != 0 goto (branch)  NO 
(1026, 0): $stack62 = new java.lang.NumberFormatException  NO 
(1092, 2): $stack32 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the instructions which were covered will be shown: 

(1441, 0): if l0 == null goto $stack2 = l1  YES
(1569, 0): $stack2 = l0 - l1  YES
(1441, 1): $stack2 = virtualinvoke l0.<java.lang.Character: char charValue()>()  YES
(1536, 0): if l0 < 65 goto $stack1 = 0  YES
(1569, 1): return $stack2  YES
(1441, 2): goto [?= return $stack2]  YES
(1536, 1): if l0 > 90 goto $stack1 = 0  YES
(1441, 4): return $stack2  YES
(1536, 4): $stack1 = 0  YES
(1536, 5): return $stack1  YES
(1400, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1400, 1): return  YES
(1460, 0): if l0 >= 128 goto $stack1 = 0  YES
(1555, 0): if l0 < 97 goto $stack1 = 0  YES
(1460, 1): $stack1 = 1  YES
(1555, 1): if l0 > 122 goto $stack1 = 0  YES
(1460, 2): goto [?= return $stack1]  YES
(1555, 2): $stack1 = 1  YES
(1555, 3): goto [?= return $stack1]  YES
(1460, 4): return $stack1  YES
(1555, 4): $stack1 = 0  YES
(1555, 5): return $stack1  YES
(1479, 0): if l0 < 32 goto $stack1 = 0  YES
(1479, 1): if l0 >= 127 goto $stack1 = 0  YES
(1479, 2): $stack1 = 1  YES
(1479, 3): goto [?= return $stack1]  YES
(1479, 4): $stack1 = 0  YES
(1479, 5): return $stack1  YES
(1498, 0): if l0 < 32 goto $stack1 = 1  YES
(1498, 1): if l0 != 127 goto $stack1 = 0  YES
(1498, 2): $stack1 = 1  YES
(1498, 3): goto [?= return $stack1]  YES
(1498, 4): $stack1 = 0  YES
(1498, 5): return $stack1  YES
(1517, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES
(1517, 1): if $stack1 != 0 goto $stack3 = 1  YES
(1517, 2): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaLower(char)>(l0)  YES
(1517, 3): if $stack2 == 0 goto $stack3 = 0  YES
(1517, 4): $stack3 = 1  YES
(1517, 5): goto [?= return $stack3]  YES
(1517, 6): $stack3 = 0  YES
(1517, 7): return $stack3  YES

In the following all of the instructions which were not covered will be shown: 

(1441, 3): $stack2 = l1  NO 
(1536, 2): $stack1 = 1  NO 
(1536, 3): goto [?= return $stack1]  NO 
(1460, 3): $stack1 = 0  NO 


comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the instructions which were covered will be shown: 

(1761, 0): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1728, 0): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1761, 1): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: boolean isLeapYear(int)>(l0)  YES
(1761, 2): if $stack6 == 0 goto $stack7 = 28  YES
(1728, 1): if l0 >= 2100 goto $stack1 = l0 & 3  YES
(1761, 3): $stack7 = 29  YES
(1761, 4): goto [?= return $stack7]  YES
(1761, 6): return $stack7  YES
(1819, 0): $stack7 = new java.lang.IllegalArgumentException  YES
(1819, 1): $stack8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH out of range: \u0001")  YES
(1819, 2): specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack8)  YES
(1819, 3): throw $stack7  YES
(1902, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  YES
(1927, 0): if l0 != 6 goto (branch)  YES
(1894, 0): return l7  YES
(1927, 1): return 10  YES
(1861, 0): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1861, 1): if l2 <= 31 goto $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1762, 0): $stack4 = new java.lang.IllegalArgumentException  YES
(1762, 1): $stack5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid month: \u0001")  YES
(1762, 2): specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack5)  YES
(1762, 3): throw $stack4  YES
(1878, 0): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1812, 0): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1812, 1): if l0 <= 999999999 goto (branch)  YES
(1903, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1870, 0): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1928, 0): if l0 != 7 goto (branch)  YES
(1862, 0): $stack8 = new java.lang.IllegalArgumentException  YES
(1862, 1): $stack9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day out of range: \u0001")  YES
(1862, 2): specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9)  YES
(1862, 3): throw $stack8  YES
(1887, 0): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1821, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1821, 1): if l2 <= $stack9 goto return  YES
(1912, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1879, 0): l4 = l4 + -1  YES
(1904, 0): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1871, 0): l4 = l0 % 100  YES
(1929, 0): if l0 != 8 goto (branch)  YES
(1929, 1): return 15  YES
(1888, 0): $stack14 = l2 + l3  YES
(1888, 1): $stack16 = $stack14 + l4  YES
(1888, 2): $stack15 = l4 / 4  YES
(1888, 3): $stack17 = $stack16 + $stack15  YES
(1888, 4): $stack19 = $stack17 + l6  YES
(1888, 5): $stack18 = 2 * l5  YES
(1888, 6): $stack20 = $stack19 - $stack18  YES
(1888, 7): l7 = $stack20 % 7  YES
(1913, 0): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  YES
(1913, 1): return $stack10  YES
(1880, 0): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1905, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  YES
(1872, 0): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1930, 0): if l0 != 9 goto (branch)  YES
(1930, 1): return 18  YES
(1864, 0): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1864, 1): if l2 <= $stack10 goto l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1732, 0): $stack1 = l0 & 3  YES
(1732, 1): if $stack1 == 0 goto $stack4 = 1  YES
(1732, 2): $stack2 = l0 % 100  YES
(1922, 0): if l0 != 1 goto (branch)  YES
(1732, 3): if $stack2 != 0 goto $stack4 = 1  YES
(1922, 1): return 28  YES
(1732, 6): $stack4 = 1  YES
(1732, 7): goto [?= return $stack4]  YES
(1732, 9): return $stack4  YES
(1881, 0): l4 = 99  YES
(1815, 0): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1815, 1): if l1 <= 12 goto (branch)  YES
(1931, 0): if l0 != 10 goto (branch)  YES
(1931, 1): return 20  YES
(1865, 0): $stack37 = new java.lang.IllegalArgumentException  YES
(1923, 0): if l0 != 2 goto (branch)  YES
(1890, 0): if l7 > 0 goto return l7  YES
(1882, 0): l5 = l5 + -1  YES
(1816, 0): $stack5 = new java.lang.IllegalArgumentException  YES
(1816, 1): $stack6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("MONTH out of range: \u0001")  YES
(1816, 2): specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack6)  YES
(1816, 3): throw $stack5  YES
(1684, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1907, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1684, 1): return  YES
(1874, 0): if l4 >= 0 goto (branch)  YES
(1924, 0): if l0 != 3 goto (branch)  YES
(1924, 1): return 2  YES
(1891, 0): l7 = l7 + 7  YES
(1759, 0): if l1 == 1 goto return 31  YES
(1759, 1): if l1 == 3 goto return 31  YES
(1759, 2): if l1 == 5 goto return 31  YES
(1759, 3): if l1 == 7 goto return 31  YES
(1759, 4): if l1 == 8 goto return 31  YES
(1759, 5): if l1 == 10 goto return 31  YES
(1759, 6): if l1 != 12 goto (branch)  YES
(1759, 7): return 31  YES
(1908, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1875, 0): l4 = l4 + 100  YES
(1867, 0): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1867, 1): $stack39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day exceeds month length: \u0001")  YES
(1867, 2): specialinvoke $stack37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39)  YES
(1867, 3): throw $stack37  YES
(1925, 0): if l0 != 4 goto (branch)  YES
(1760, 0): if l1 == 4 goto return 30  YES
(1760, 1): if l1 == 6 goto return 30  YES
(1760, 2): if l1 == 9 goto return 30  YES
(1760, 3): if l1 != 11 goto (branch)  YES
(1760, 4): return 30  YES
(1818, 0): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1818, 1): if l2 <= 31 goto $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1909, 0): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1901, 0): $stack4 = new java.lang.StringBuilder  YES
(1901, 1): specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()  YES
(1926, 0): if l0 != 5 goto (branch)  YES
(1926, 1): return 7  YES
(1827, 0): return  YES

In the following all of the instructions which were not covered will be shown: 

(1761, 5): $stack7 = 28  NO 
(1910, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1935, 0): $stack1 = new java.lang.IllegalArgumentException  NO 
(1935, 1): $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Month out of range: \u0001")  NO 
(1935, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  NO 
(1935, 3): throw $stack1  NO 
(1729, 0): $stack7 = l0 & 3  NO 
(1729, 1): if $stack7 != 0 goto $stack8 = 0  NO 
(1729, 2): $stack8 = 1  NO 
(1729, 3): goto [?= return $stack8]  NO 
(1729, 4): $stack8 = 0  NO 
(1729, 5): return $stack8  NO 
(1928, 1): return 12  NO 
(1813, 0): $stack3 = new java.lang.IllegalArgumentException  NO 
(1813, 1): $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("YEAR out of range: \u0001")  NO 
(1813, 2): specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack4)  NO 
(1813, 3): throw $stack3  NO 
(1822, 0): $stack10 = new java.lang.IllegalArgumentException  NO 
(1732, 4): $stack3 = l0 % 400  NO 
(1732, 5): if $stack3 != 0 goto $stack4 = 0  NO 
(1732, 8): $stack4 = 0  NO 
(1923, 1): return 31  NO 
(1824, 0): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1824, 1): $stack12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH exceeds month length in given year: \u0001")  NO 
(1824, 2): specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12)  NO 
(1824, 3): throw $stack10  NO 
(1932, 0): if l0 != 11 goto (branch)  NO 
(1932, 1): return 23  NO 
(1933, 0): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  NO 
(1933, 1): return 25  NO 
(1925, 1): return 5  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the instructions which were covered will be shown: 

(1664, 0): $stack4 = lengthof l0  YES
(1664, 1): if l2 < $stack4 goto (branch)  YES
(1662, 0): return -1  YES
(1619, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1619, 1): if $stack1 != 0 goto $stack2 = 0  YES
(1619, 2): $stack2 = 1  YES
(1619, 3): goto [?= return $stack2]  YES
(1619, 4): $stack2 = 0  YES
(1619, 5): return $stack2  YES
(1675, 0): $stack9 = l0[l3]  YES
(1675, 1): $stack10 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>($stack9)  YES
(1609, 0): if l0 == null goto $stack1 = 0  YES
(1673, 0): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1675, 2): if $stack10 == 0 goto l3 = l3 + -1  YES
(1609, 1): $stack1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(l0)  YES
(1673, 1): $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.Class getComponentType()>()  YES
(1609, 2): goto [?= return $stack1]  YES
(1673, 2): $stack7 = virtualinvoke $stack6.<java.lang.Class: boolean isInstance(java.lang.Object)>(l1)  YES
(1574, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1609, 3): $stack1 = 0  YES
(1673, 3): if $stack7 == 0 goto return -1  YES
(1574, 1): return  YES
(1609, 4): return $stack1  YES
(1669, 0): $stack12 = l0[l3]  YES
(1669, 1): if $stack12 != null goto l3 = l3 + -1  YES
(1667, 0): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1665, 0): $stack14 = lengthof l0  YES
(1665, 1): l2 = $stack14 - 1  YES
(1630, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1661, 0): if l0 == null goto return -1  YES
(1630, 1): return $stack1  YES
(1661, 1): if l2 >= 0 goto $stack4 = lengthof l0  YES
(1680, 0): return -1  YES
(1676, 0): return l3  YES
(1674, 0): l3 = l3 + -1  YES
(1641, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1674, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1674, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1641, 1): return $stack1  YES
(1668, 0): l3 = l3 + -1  YES
(1668, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1668, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1668, 2): goto [?= return -1]  YES

In the following all of the instructions which were not covered will be shown: 

(1579, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(1579, 1): <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(1579, 2): return  NO 
(1670, 0): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the instructions which were covered will be shown: 

(12, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(12, 1): return  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the instructions which were covered will be shown: 

(192, 0): return 0  YES
(213, 0): l2 = l2 + 1  YES
(213, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(213, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(213, 2): if l2 >= $stack4 goto return 1  YES
(81, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(176, 0): l4 = 0  YES
(172, 0): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(168, 0): l5 = l5 + 1  YES
(168, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(168, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(168, 2): if l5 >= $stack14 goto (branch)  YES
(222, 0): return 1  YES
(218, 0): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(57, 0): $stack1 = new java.lang.IllegalArgumentException  YES
(218, 1): $stack7 = l1[l2]  YES
(185, 0): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(57, 1): $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l0)  YES
(152, 0): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(218, 2): $stack9 = virtualinvoke $stack8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack7)  YES
(185, 1): if $stack19 <= 4 goto l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(57, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  YES
(218, 3): $stack10 = virtualinvoke $stack9.<java.util.regex.Matcher: boolean matches()>()  YES
(57, 3): throw $stack1  YES
(214, 0): $stack5 = l1[l2]  YES
(218, 4): if $stack10 != 0 goto l2 = l2 + 1  YES
(214, 1): $stack6 = virtualinvoke $stack5.<java.lang.String: boolean isEmpty()>()  YES
(148, 0): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(214, 2): if $stack6 == 0 goto $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(148, 1): if $stack10 == 0 goto $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(115, 0): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(115, 1): l1 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)  YES
(144, 0): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(169, 0): l6 = l2[l5]  YES
(103, 0): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(198, 0): l3#27 = l3#27 + 1  YES
(190, 0): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(219, 0): return 0  YES
(186, 0): return 0  YES
(153, 0): if l1 == 0 goto $stack13 = lengthof l2  YES
(54, 0): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(149, 0): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(149, 1): if $stack11 == 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(116, 0): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(116, 1): if $stack7 == 0 goto return 0  YES
(178, 0): $stack17 = lengthof l2  YES
(145, 0): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(178, 1): $stack18 = $stack17 - 1  YES
(178, 2): if l5 != $stack18 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(178, 3): $stack24 = virtualinvoke l6.<java.lang.String: boolean contains(java.lang.CharSequence)>(".")  YES
(178, 4): if $stack24 == 0 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(170, 0): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(170, 1): if $stack16 == 0 goto l4 = 0  YES
(265, 0): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(104, 0): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232, 0): if l0 == 47 goto $stack1 = 1  YES
(265, 1): if $stack9 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(232, 1): if l0 != 92 goto $stack1 = 0  YES
(265, 2): $stack32 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(42)  YES
(166, 0): l3#27 = 0  YES
(265, 3): if $stack32 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(100, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(232, 4): $stack1 = 0  YES
(232, 5): return $stack1  YES
(249, 0): return l0  YES
(216, 0): $stack13 = lengthof l1  YES
(216, 1): $stack14 = $stack13 - 1  YES
(216, 2): if l2 != $stack14 goto $stack15 = 0  YES
(245, 0): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(117, 0): return 0  YES
(216, 3): $stack15 = 1  YES
(84, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(245, 1): if $stack1 < 0 goto return l0  YES
(212, 0): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(216, 4): goto [?= return $stack15]  YES
(84, 1): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: int indexOfLastSeparator(java.lang.String)>(l0)  YES
(51, 0): if l0 != 47 goto (branch)  YES
(84, 2): $stack3 = $stack2 + 1  YES
(216, 6): return $stack15  YES
(84, 3): $stack4 = virtualinvoke $stack1.<java.lang.String: java.lang.String substring(int)>($stack3)  YES
(84, 4): return $stack4  YES
(14, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(14, 1): return  YES
(171, 0): l4 = l4 + 1  YES
(266, 0): $stack39 = newarray (java.lang.String)[1]  YES
(105, 0): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(266, 1): $stack39[0] = l0  YES
(105, 1): return $stack5  YES
(200, 0): if l3#27 > 8 goto $stack15 = 0  YES
(266, 2): return $stack39  YES
(167, 0): l4 = 0  YES
(200, 1): if l3#27 >= 8 goto $stack15 = 1  YES
(200, 2): if l1 == 0 goto $stack15 = 0  YES
(163, 0): $stack13 = lengthof l2  YES
(200, 5): $stack15 = 0  YES
(163, 1): if $stack13 <= 8 goto l3#27 = 0  YES
(200, 6): return $stack15  YES

In the following all of the instructions which were not covered will be shown: 

(52, 0): return 92  NO 
(285, 0): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(269, 0): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(154, 0): $stack28 = new java.util.ArrayList  NO 
(121, 0): l2 = l2 + 1  NO 
(154, 1): $stack29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(l2)  NO 
(121, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(121, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  NO 
(154, 2): specialinvoke $stack28.<java.util.ArrayList: void <init>(java.util.Collection)>($stack29)  NO 
(55, 0): return 47  NO 
(270, 0): $stack11 = new java.util.ArrayList  NO 
(270, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  NO 
(287, 0): l4 = l8  NO 
(155, 0): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(122, 0): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(155, 1): if $stack30 == 0 goto $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(271, 0): $stack12 = new java.lang.StringBuilder  NO 
(271, 1): specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>()  NO 
(123, 0): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(272, 0): l4 = 0  NO 
(173, 0): return 0  NO 
(289, 0): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(289, 1): if $stack13 == 0 goto $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(157, 0): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(124, 0): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(157, 1): goto [?= $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>]  NO 
(273, 0): l7 = l7 + 1  NO 
(273, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(273, "comp5111.assignment.cut.Subject$FilenameTasks", 2)]  NO 
(273, 2): if l7 >= l6 goto $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(273, 3): l8 = l1[l7]  NO 
(42, 0): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  NO 
(42, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN> = $stack2  NO 
(42, 2): return  NO 
(290, 0): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(290, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack17)  NO 
(158, 0): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(125, 0): return 0  NO 
(158, 1): if $stack31 == 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(158, 2): $stack36 = interfaceinvoke $stack28.<java.util.List: boolean isEmpty()>()  NO 
(158, 3): if $stack36 != 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(274, 0): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(274, 1): if l8 != 42 goto virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(159, 0): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(275, 0): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275, 1): if $stack20 == 0 goto (branch)  NO 
(193, 0): goto [?= (branch)]  NO 
(276, 0): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(276, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack26)  NO 
(293, 0): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(293, 1): $stack15 = virtualinvoke $stack11.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($stack14)  NO 
(293, 2): $stack16 = (java.lang.String[]) $stack15  NO 
(194, 0): if l7 < 0 goto return 0  NO 
(293, 3): return $stack16  NO 
(161, 0): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(194, 1): if l7 <= 65535 goto l3#27 = l3#27 + 1  NO 
(128, 0): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(161, 1): $stack33 = interfaceinvoke $stack28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack32)  NO 
(128, 1): if $stack11 <= 1 goto l2 = l2 + 1  NO 
(161, 2): l2 = (java.lang.String[]) $stack33  NO 
(128, 2): $stack14 = virtualinvoke l3.<java.lang.String: boolean startsWith(java.lang.String)>("0")  NO 
(128, 3): if $stack14 == 0 goto l2 = l2 + 1  NO 
(277, 0): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(145, 1): $stack49 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>("::")  NO 
(145, 2): $stack50 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String)>("::")  NO 
(145, 3): if $stack49 == $stack50 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(195, 0): return 0  NO 
(129, 0): return 0  NO 
(30, 0): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  NO 
(30, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN> = $stack1  NO 
(179, 0): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(146, 0): return 0  NO 
(179, 1): if $stack27 != 0 goto l3#27 = l3#27 + 2  NO 
(279, 0): if l8 != 63 goto (branch)  NO 
(246, 0): $stack2 = new java.lang.IllegalArgumentException  NO 
(246, 1): specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it")  NO 
(180, 0): return 0  NO 
(246, 2): throw $stack2  NO 
(164, 0): return 0  NO 
(280, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(280, 1): goto [?= l4 = l8]  NO 
(82, 0): return null  NO 
(148, 2): $stack45 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(148, 3): if $stack45 == 0 goto return 0  NO 
(16, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(16, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(281, 0): if l4 == 42 goto l4 = l8  NO 
(182, 0): l3#27 = l3#27 + 2  NO 
(149, 2): $stack41 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(116, 2): $stack8 = virtualinvoke l1.<java.util.regex.Matcher: int groupCount()>()  NO 
(149, 3): if $stack41 != 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  NO 
(116, 3): if $stack8 == 4 goto l2 = 1  NO 
(232, 2): $stack1 = 1  NO 
(232, 3): goto [?= return $stack1]  NO 
(282, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(282, 1): goto [?= l4 = l8]  NO 
(183, 0): goto [?= l5 = l5 + 1]  NO 
(150, 0): return 0  NO 
(216, 5): $stack15 = 0  NO 
(134, 0): return 1  NO 
(101, 0): return -1  NO 
(200, 3): $stack15 = 1  NO 
(200, 4): goto [?= return $stack15]  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the instructions which were covered will be shown: 

(580, 3): specialinvoke $stack16.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack18)  YES
(448, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(580, 4): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack16)  YES
(415, 0): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(349, 0): l2 = l2 + 1  YES
(349, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(349, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(795, 0): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(663, 0): if l0 == null goto return 1  YES
(663, 1): if l1 != null goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(564, 0): $stack23 = l2[l6]  YES
(564, 1): l7 = staticinvoke <java.lang.Character: int getType(char)>($stack23)  YES
(878, 0): l0#4 = l2  YES
(878, 1): goto [?= return l0#4]  YES
(845, 0): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(845, 1): $stack12 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($stack11)  YES
(845, 2): if $stack12 == 0 goto l4 = l4 + 1  YES
(746, 0): return 0  YES
(614, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(581, 0): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(581, 1): $stack21 = interfaceinvoke $stack11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack20)  YES
(581, 2): $stack22 = (java.lang.String[]) $stack21  YES
(581, 3): return $stack22  YES
(416, 0): l2 = l2 + 1  YES
(416, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(416, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(350, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(350, 1): $stack5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack4)  YES
(350, 2): if $stack5 != 0 goto l2 = l2 + 1  YES
(664, 0): return 1  YES
(565, 0): if l7 != l5 goto (branch)  YES
(499, 0): return l0  YES
(846, 0): l2 = 1  YES
(615, 0): l3 = lengthof l1  YES
(417, 0): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(417, 1): $stack6 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack5)  YES
(417, 2): if $stack6 != 0 goto l2 = l2 + 1  YES
(351, 0): return 0  YES
(863, 0): if l0 == null goto return l0  YES
(863, 1): if l1 == null goto return l0  YES
(863, 2): if l2 != null goto l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(566, 0): goto [?= l6 = l6 + 1]  YES
(880, 0): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(748, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(748, 1): $stack5 = interfaceinvoke l1.<java.lang.CharSequence: int length()>()  YES
(748, 2): if $stack4 == $stack5 goto $stack6 = l0 instanceof java.lang.String  YES
(616, 0): l4 = l2 - 1  YES
(451, 0): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(418, 0): return 0  YES
(666, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(881, 0): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881, 1): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack16, l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001")  YES
(881, 2): goto [?= return l0#4]  YES
(749, 0): return 0  YES
(716, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(716, 1): return $stack1  YES
(617, 0): l5 = l3 - 1  YES
(452, 0): if l1 >= 2 goto l2 = l1 - 1  YES
(799, 0): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799, 1): if $stack4 == 0 goto (branch)  YES
(667, 0): l3 = l2 - 1  YES
(568, 0): if l1 == 0 goto $stack25 = new java.lang.String  YES
(535, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(568, 1): if l7 != 2 goto $stack25 = new java.lang.String  YES
(502, 0): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(535, 1): return $stack1  YES
(568, 2): if l5 != 1 goto $stack25 = new java.lang.String  YES
(502, 1): l1#2 = $stack5 - 1  YES
(849, 0): if l1 == 0 goto $stack8 = 0  YES
(849, 4): $stack8 = 0  YES
(849, 5): return $stack8  YES
(618, 0): l6 = l6 + 1  YES
(618, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(618, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(453, 0): return ""  YES
(833, 0): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(833, 1): if $stack5 != 0 goto return 0  YES
(800, 0): return l0  YES
(833, 2): $stack6 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(833, 3): if $stack6 != 1 goto l1 = 0  YES
(668, 0): l4 = lengthof l1  YES
(503, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(751, 0): $stack6 = l0 instanceof java.lang.String  YES
(751, 1): if $stack6 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(751, 2): $stack12 = l1 instanceof java.lang.String  YES
(751, 3): if $stack12 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(619, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(553, 0): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(421, 0): return 1  YES
(867, 0): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(834, 0): return 0  YES
(669, 0): l5 = l4 - 1  YES
(636, 0): return 0  YES
(752, 0): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(752, 1): return $stack15  YES
(620, 0): l8 = l8 + 1  YES
(620, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(620, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(455, 0): l2 = l1 - 1  YES
(323, 0): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(802, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(323, 1): $stack1 = 0  YES
(802, 1): $stack6 = l2 - 1  YES
(323, 2): goto [?= return $stack1]  YES
(323, 3): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(802, 2): $stack7 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack6)  YES
(323, 4): return $stack1  YES
(802, 3): $stack8 = virtualinvoke l1.<java.lang.String: int indexOf(int)>($stack7)  YES
(802, 4): if $stack8 == -1 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(670, 0): l6 = l6 + 1  YES
(670, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(670, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(505, 0): if l2 != 10 goto (branch)  YES
(885, 0): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(621, 0): $stack15 = l1[l8]  YES
(621, 1): if $stack15 != l7 goto l8 = l8 + 1  YES
(456, 0): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(869, 0): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(836, 0): l1 = 0  YES
(803, 0): l2 = l2 + -1  YES
(803, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(802, "comp5111.assignment.cut.Subject$StringTasks", 0)]  YES
(671, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(688, 0): return 1  YES
(556, 0): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(556, 1): if $stack9 == 0 goto l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(490, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(457, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(490, 1): if $stack3 == 0 goto $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(870, 0): return l0  YES
(837, 0): l2 = 0  YES
(672, 0): l8 = l8 + 1  YES
(672, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(672, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(887, 0): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(887, 1): $stack14 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($stack13, l1, l2)  YES
(887, 2): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>($stack12, l2, $stack14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001")  YES
(557, 0): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(557, 1): return $stack41  YES
(491, 0): return l0  YES
(458, 0): if l4 != 10 goto return l3  YES
(838, 0): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(673, 0): $stack13 = l1[l8]  YES
(673, 1): if $stack13 != l7 goto l8 = l8 + 1  YES
(839, 0): l4 = l4 + 1  YES
(806, 0): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(839, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(839, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(806, 1): return $stack5  YES
(575, 0): $stack25 = new java.lang.String  YES
(575, 1): $stack26 = l6 - l4  YES
(509, 0): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(575, 2): specialinvoke $stack25.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack26)  YES
(575, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack25)  YES
(377, 0): if l0 == null goto $stack2 = 1  YES
(377, 1): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(377, 2): if $stack1 != 0 goto $stack2 = 0  YES
(377, 3): $stack2 = 1  YES
(790, 0): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(377, 4): goto [?= return $stack2]  YES
(377, 5): $stack2 = 0  YES
(377, 6): return $stack2  YES
(559, 0): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(873, 0): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(840, 0): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(576, 0): l4 = l6  YES
(510, 0): l1#2 = l1#2 + 1  YES
(890, 0): return l0#4  YES
(345, 0): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(791, 0): if l2 != 0 goto (branch)  YES
(560, 0): $stack11 = new java.util.ArrayList  YES
(560, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  YES
(494, 0): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(461, 0): return l3  YES
(494, 1): if $stack4 != 1 goto $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(742, 0): if l0 != l1 goto (branch)  YES
(412, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(412, 1): if $stack3 == 0 goto l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(346, 0): if l1 != 0 goto l2 = 0  YES
(792, 0): return l0  YES
(561, 0): l4 = 0  YES
(495, 0): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(875, 0): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(875, 1): l6 = l3 + $stack10  YES
(297, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(297, 1): return  YES
(743, 0): return 1  YES
(611, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(611, 1): if $stack9 != 0 goto return 0  YES
(578, 0): l5 = l7  YES
(611, 2): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isEmpty(char[])>(l1)  YES
(512, 0): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(611, 3): if $stack10 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(512, 1): return $stack7  YES
(413, 0): return 0  YES
(347, 0): return 1  YES
(562, 0): $stack12 = l2[0]  YES
(562, 1): l5 = staticinvoke <java.lang.Character: int getType(char)>($stack12)  YES
(496, 0): if l1 == 13 goto return ""  YES
(496, 1): if l1 != 10 goto return l0  YES
(843, 0): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843, 1): $stack10 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($stack9)  YES
(843, 2): if $stack10 == 0 goto $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(612, 0): return 0  YES
(563, 0): l6 = l6 + 1  YES
(563, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(563, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(563, 2): $stack15 = $stack14 - 1  YES
(563, 3): if l6 >= $stack15 goto $stack16 = new java.lang.String  YES
(877, 0): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(877, 1): if l4 != $stack11 goto (branch)  YES
(745, 0): if l0 == null goto return 0  YES
(745, 1): if l1 != null goto $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580, 0): $stack16 = new java.lang.String  YES
(580, 1): $stack17 = lengthof l2  YES
(580, 2): $stack18 = $stack17 - l4  YES

In the following all of the instructions which were not covered will be shown: 

(630, 0): if l6 >= l4 goto l8 = l8 + 1  NO 
(630, 1): $stack19 = l8 + 1  NO 
(630, 2): $stack21 = l1[$stack19]  NO 
(630, 3): $stack20 = l6 + 1  NO 
(630, 4): $stack22 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack20)  NO 
(630, 5): if $stack21 != $stack22 goto l8 = l8 + 1  NO 
(680, 0): return 0  NO 
(449, 0): return null  NO 
(796, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(796, 1): $stack13 = l2 - 1  NO 
(796, 2): $stack14 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack13)  NO 
(796, 3): $stack15 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack14)  NO 
(796, 4): if $stack15 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(631, 0): return 1  NO 
(797, 0): l2 = l2 + -1  NO 
(797, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(796, "comp5111.assignment.cut.Subject$StringTasks", 0)]  NO 
(682, 0): if l6 >= l3 goto l8 = l8 + 1  NO 
(682, 1): $stack17 = l8 + 1  NO 
(682, 2): $stack19 = l1[$stack17]  NO 
(682, 3): $stack18 = l6 + 1  NO 
(682, 4): $stack20 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack18)  NO 
(682, 5): if $stack19 != $stack20 goto l8 = l8 + 1  NO 
(864, 0): return l0  NO 
(683, 0): return 0  NO 
(849, 1): if l2 == 0 goto $stack8 = 0  NO 
(849, 2): $stack8 = 1  NO 
(849, 3): goto [?= return $stack8]  NO 
(354, 0): return 1  NO 
(569, 0): l8 = l6 - 1  NO 
(570, 0): if l8 == l4 goto (branch)  NO 
(554, 0): return null  NO 
(571, 0): $stack38 = new java.lang.String  NO 
(571, 1): $stack39 = l8 - l4  NO 
(571, 2): specialinvoke $stack38.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack39)  NO 
(571, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack38)  NO 
(572, 0): l4 = l8  NO 
(506, 0): $stack11 = l1#2 - 1  NO 
(506, 1): $stack12 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack11)  NO 
(506, 2): if $stack12 != 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  NO 
(622, 0): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(622, 1): if $stack18 != 0 goto (branch)  NO 
(507, 0): l1#2 = l1#2 + -1  NO 
(507, 1): goto [?= $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)]  NO 
(755, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(458, 1): $stack8 = l2 - 1  NO 
(458, 2): $stack9 = virtualinvoke l3.<java.lang.String: char charAt(int)>($stack8)  NO 
(458, 3): if $stack9 != 13 goto return l3  NO 
(574, 0): goto [?= l5 = l7]  NO 
(756, 0): l3 = l3 + 1  NO 
(756, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(756, "comp5111.assignment.cut.Subject$StringTasks", 1)]  NO 
(624, 0): return 1  NO 
(459, 0): $stack11 = l2 - 1  NO 
(459, 1): $stack12 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int,int)>(0, $stack11)  NO 
(459, 2): return $stack12  NO 
(674, 0): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(674, 1): if $stack16 != 0 goto (branch)  NO 
(757, 0): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 1): $stack9 = interfaceinvoke l1.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 2): if $stack8 == $stack9 goto l3 = l3 + 1  NO 
(840, 1): if l2 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(758, 0): return 0  NO 
(626, 0): if l8 != l5 goto (branch)  NO 
(841, 0): return 1  NO 
(676, 0): return 0  NO 
(628, 0): return 1  NO 
(678, 0): if l8 != l5 goto (branch)  NO 
(761, 0): return 1  NO 
(497, 0): return ""  NO 
(844, 0): l1 = 1  NO 
(844, 1): goto [?= l4 = l4 + 1]  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the instructions which were covered will be shown: 

(1393, 0): if l0 != l1 goto (branch)  YES
(1396, 3): $stack2 = -1  YES
(1396, 4): return $stack2  YES
(1381, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1396, 0): if l0 == 0 goto $stack2 = -1  YES
(1381, 1): return  YES
(1396, 1): $stack2 = 1  YES
(1394, 0): return 0  YES
(1396, 2): goto [?= return $stack2]  YES

In the following all of the instructions which were not covered will be shown: 




Coverage of Test Suite: comp5111.assignment.cut.RegressionTest1

comp5111.assignment.cut.Subject$NumberTasks
133 Instructions from a total of 351 Instructions were covered.
Percentage: 37.89173789173789%

comp5111.assignment.cut.Subject$CharTasks
42 Instructions from a total of 46 Instructions were covered.
Percentage: 91.30434782608695%

comp5111.assignment.cut.Subject$GregorianTasks
116 Instructions from a total of 146 Instructions were covered.
Percentage: 79.45205479452055%

comp5111.assignment.cut.Subject$ArrayTasks
41 Instructions from a total of 49 Instructions were covered.
Percentage: 83.6734693877551%

comp5111.assignment.cut.Subject
2 Instructions from a total of 2 Instructions were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
95 Instructions from a total of 204 Instructions were covered.
Percentage: 46.568627450980394%

comp5111.assignment.cut.Subject$StringTasks
207 Instructions from a total of 295 Instructions were covered.
Percentage: 70.16949152542372%

comp5111.assignment.cut.Subject$BooleanTasks
9 Instructions from a total of 9 Instructions were covered.
Percentage: 100.0%

Overall Statement Coverage: 58.52994555353902%



In the following part you can see which instructions were executed. Before every instruction you can see two numbers
in the form of (x,y), for Example (1,5). This indicates that the following Instruction can be found on line x of the Java code. 
y denotes that it is the y-th Jimple Instruction generated from the corresponding Java line.
After each listed instructions you can find a NO if the instruction wasn't executed and a YES if it was. 


comp5111.assignment.cut.Subject$NumberTasks


In the following all of the instructions which were covered will be shown: 

(1340, 0): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1340, 1): if $stack5 != 45 goto $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1299, 0): $stack2 = new java.math.BigDecimal  YES
(1010, 0): $stack60 = l2 - 1  YES
(1299, 1): specialinvoke $stack2.<java.math.BigDecimal: void <init>(java.lang.String)>(l0)  YES
(1010, 1): l12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, $stack60)  YES
(1200, 0): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(944, 0): l4 = 0  YES
(1258, 0): l2 = 10  YES
(969, 0): $stack19 = l2 - 1  YES
(969, 1): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack19)  YES
(1184, 0): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1118, 0): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 3): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 4): return $stack5  YES
(1267, 0): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1267, 1): if $stack8 != 0 goto l2 = 16  YES
(1234, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1267, 2): $stack12 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", l1)  YES
(945, 0): l7 = l7 + 1  YES
(1267, 3): if $stack12 == 0 goto $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(945, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(945, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  YES
(945, 2): if l7 >= l6 goto (branch)  YES
(945, 3): l8 = $stack16[l7]  YES
(1292, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1259, 0): l3 = 0  YES
(1003, 0): if l11 == 0 goto (branch)  YES
(937, 0): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937, 1): if $stack15 == 0 goto $stack16 = newarray (java.lang.String)[3]  YES
(1350, 0): l2 = 0  YES
(1251, 0): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1334, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1334, 1): if $stack1 == 0 goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1012, 0): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(979, 0): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(946, 0): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(979, 1): if $stack25 != 0 goto $stack119 = 0  YES
(946, 1): if $stack138 == 0 goto l7 = l7 + 1  YES
(979, 2): if l5#11 == 46 goto $stack119 = 0  YES
(979, 3): $stack119 = 1  YES
(1359, 0): if l4 != 0 goto l3 = l3 + 1  YES
(979, 4): goto [?= l11 = $stack119]  YES
(1359, 1): $stack9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1359, 2): $stack10 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack9)  YES
(979, 6): l11 = $stack119  YES
(1260, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1359, 3): if $stack10 != 0 goto l3 = l3 + 1  YES
(1004, 0): if l10 <= -1 goto l8 = null  YES
(938, 0): $stack151 = new java.lang.NumberFormatException  YES
(938, 1): specialinvoke $stack151.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(938, 2): throw $stack151  YES
(1351, 0): l3 = l3 + 1  YES
(1351, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1351, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  YES
(1351, 2): if l3 >= $stack5 goto return 1  YES
(1219, 0): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1335, 0): return 0  YES
(980, 0): if l9 <= -1 goto (branch)  YES
(1360, 0): return 0  YES
(1261, 0): if l4 != 45 goto (branch)  YES
(1352, 0): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1352, 1): if $stack6 != 46 goto $stack13 = 0  YES
(1352, 4): $stack13 = 0  YES
(1352, 5): l4 = $stack13  YES
(1377, 0): $stack2 = l0 - l1  YES
(1377, 1): return $stack2  YES
(1278, 0): $stack9 = new java.math.BigInteger  YES
(1278, 1): $stack10 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l1)  YES
(1278, 2): specialinvoke $stack9.<java.math.BigInteger: void <init>(java.lang.String,int)>($stack10, l2)  YES
(1270, 0): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1270, 1): if $stack13 == 0 goto $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1237, 0): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(973, 0): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(1353, 0): if $stack13 == 0 goto (branch)  YES
(1254, 0): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254, 1): if $stack6 == 0 goto l1 = 0  YES
(1337, 0): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1337, 1): $stack3 = $stack2 - 1  YES
(1337, 2): $stack4 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack3)  YES
(1337, 3): if $stack4 != 46 goto $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1296, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296, 1): if $stack1 == 0 goto $stack2 = new java.math.BigDecimal  YES
(1007, 0): l8 = null  YES
(974, 0): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(1197, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941, 0): $stack16 = newarray (java.lang.String)[3]  YES
(974, 1): $stack23 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(69)  YES
(941, 1): $stack16[0] = "0x"  YES
(974, 2): $stack24 = $stack22 + $stack23  YES
(941, 2): $stack16[1] = "0X"  YES
(974, 3): l10 = $stack24 + 1  YES
(941, 3): $stack16[2] = "#"  YES
(1255, 0): $stack25 = new java.lang.NumberFormatException  YES
(999, 0): if $stack119 == 0 goto $stack101 = l2  YES
(1255, 1): specialinvoke $stack25.<java.lang.NumberFormatException: void <init>(java.lang.String)>("An empty string is not a valid number")  YES
(999, 1): $stack101 = l2 - 1  YES
(1255, 2): throw $stack25  YES
(999, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)]  YES
(900, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(900, 1): return  YES
(999, 4): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)  YES
(1346, 0): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1313, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1346, 1): return $stack6  YES
(1313, 1): return $stack1  YES
(1181, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1115, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1297, 0): $stack3 = new java.lang.NumberFormatException  YES
(1264, 0): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1297, 1): specialinvoke $stack3.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(1297, 2): throw $stack3  YES
(942, 0): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(934, 0): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1058, 0): $stack88 = new java.lang.NumberFormatException  YES
(1058, 1): $stack89 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  YES
(992, 0): if l10 <= -1 goto (branch)  YES
(1058, 2): specialinvoke $stack88.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack89)  YES
(1215, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1058, 3): throw $stack88  YES
(1116, 0): if l2 == 45 goto $stack7 = 1  YES
(1116, 1): if l2 != 43 goto $stack7 = 0  YES
(1273, 0): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1273, 1): if $stack14 == 0 goto $stack9 = new java.math.BigInteger  YES
(1116, 4): $stack7 = 0  YES
(951, 0): if l4 <= 0 goto $stack19 = l2 - 1  YES
(943, 0): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(943, 1): if $stack18 == 43 goto $stack145 = 1  YES
(943, 2): $stack144 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1356, 0): if l2 <= 1 goto (branch)  YES
(943, 3): if $stack144 != 45 goto $stack145 = 0  YES
(1257, 0): l1 = 0  YES
(943, 6): $stack145 = 0  YES
(1001, 0): l7#20 = null  YES
(943, 7): l3 = $stack145  YES

In the following all of the instructions which were not covered will be shown: 

(993, 0): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1026, 1): $stack63 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1092, 3): $stack33 = $stack32 cmpl 0.0  NO 
(960, 0): l6 = l2 - l4  NO 
(1026, 2): specialinvoke $stack62.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack63)  NO 
(1092, 4): if $stack33 != 0 goto l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1026, 3): throw $stack62  NO 
(1092, 5): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1092, 6): if $stack38 == 0 goto (branch)  NO 
(1274, 0): l2 = 8  NO 
(1076, 0): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1076, 1): return $stack157  NO 
(1357, 0): return 0  NO 
(1093, 0): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(994, 0): $stack105 = new java.lang.NumberFormatException  NO 
(961, 0): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(994, 1): $stack106 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(961, 1): if l6 != 16 goto (branch)  NO 
(994, 2): specialinvoke $stack105.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack106)  NO 
(961, 2): if l5#11 <= 55 goto (branch)  NO 
(994, 3): throw $stack105  NO 
(1341, 0): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1341, 1): if $stack7 != 1 goto $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1275, 0): l1 = l1 + 1  NO 
(1044, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1160, 0): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1094, 0): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1094, 1): $stack36 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($stack35)  NO 
(1094, 2): $stack37 = virtualinvoke l14.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($stack36)  NO 
(1094, 3): if $stack37 != 0 goto return l14  NO 
(962, 0): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962, 1): return $stack122  NO 
(1342, 0): return 0  NO 
(1045, 0): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1045, 1): if $stack76 != 0 goto (branch)  NO 
(1045, 2): $stack78 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1045, 3): $stack79 = $stack78 cmpl 0.0  NO 
(1045, 4): if $stack79 != 0 goto return l13#69  NO 
(1045, 5): $stack80 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1045, 6): if $stack80 == 0 goto (branch)  NO 
(979, 5): $stack119 = 0  NO 
(1293, 0): return null  NO 
(1161, 0): return 1  NO 
(1095, 0): return l13#69  NO 
(996, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(996, 1): goto [?= l7#20 = null]  NO 
(1046, 0): return l13#69  NO 
(947, 0): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(947, 1): $stack142 = $stack141 + l3  NO 
(947, 2): l4 = 0 + $stack142  NO 
(1063, 0): if l10 <= -1 goto l8 = null  NO 
(1030, 0): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1063, 1): $stack55 = l2 - 1  NO 
(1063, 2): if l10 >= $stack55 goto l8 = null  NO 
(964, 0): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(964, 1): if l6 != 8 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(964, 2): if l5#11 <= 55 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1344, 0): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1344, 1): return $stack8  NO 
(1080, 0): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1080, 1): return $stack155  NO 
(981, 0): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(948, 0): goto [?= (branch)]  NO 
(1262, 0): l3 = 1  NO 
(1163, 0): l1 = l1 + -1  NO 
(1163, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1163, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  NO 
(1097, 0): return l14  NO 
(1163, 2): if l1 < 0 goto return 1  NO 
(1064, 0): $stack58 = l10 + 1  NO 
(1031, 0): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1064, 1): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>($stack58)  NO 
(1031, 1): if $stack74 != 0 goto (branch)  NO 
(1064, 2): goto [?= (branch)]  NO 
(965, 0): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1031, 2): $stack82 = virtualinvoke l13#63.<java.lang.Float: float floatValue()>()  NO 
(965, 1): return $stack123  NO 
(1031, 3): $stack83 = $stack82 cmpl 0.0F  NO 
(1031, 4): if $stack83 != 0 goto return l13#63  NO 
(1031, 5): $stack84 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1031, 6): if $stack84 == 0 goto (branch)  NO 
(1279, 0): if l3 == 0 goto $stack11 = $stack9  NO 
(1279, 1): $stack11 = virtualinvoke $stack9.<java.math.BigInteger: java.math.BigInteger negate()>()  NO 
(1279, 2): goto [?= return $stack11]  NO 
(1279, 3): $stack11 = $stack9  NO 
(1279, 4): return $stack11  NO 
(1015, 0): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 0): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(1015, 1): if l8 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 1): if l10 <= l2 goto $stack116 = l9 + 1  NO 
(1263, 0): l1 = 1  NO 
(1263, 1): goto [?= $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)]  NO 
(1164, 0): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1164, 1): if $stack3 == 48 goto l1 = l1 + -1  NO 
(999, 3): $stack101 = l2  NO 
(1148, 0): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1148, 1): if $stack2 == 0 goto $stack4 = 0  NO 
(1148, 2): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l1)  NO 
(1148, 3): if $stack3 == 0 goto $stack4 = 0  NO 
(1148, 4): $stack4 = 1  NO 
(983, 0): $stack114 = new java.lang.NumberFormatException  NO 
(1148, 5): goto [?= return $stack4]  NO 
(983, 1): $stack115 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1148, 6): $stack4 = 0  NO 
(983, 2): specialinvoke $stack114.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack115)  NO 
(1148, 7): return $stack4  NO 
(983, 3): throw $stack114  NO 
(1363, 0): return 1  NO 
(1198, 0): return null  NO 
(1165, 0): return 0  NO 
(1066, 0): l8 = null  NO 
(967, 0): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(967, 1): return $stack124  NO 
(1182, 0): return null  NO 
(1050, 0): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1116, 2): $stack7 = 1  NO 
(1017, 0): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1116, 3): goto [?= (branch)]  NO 
(1017, 1): if $stack65 != 0 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 2): $stack68 = virtualinvoke l12.<java.lang.String: char charAt(int)>(0)  NO 
(1017, 3): if $stack68 != 45 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 4): $stack70 = virtualinvoke l12.<java.lang.String: java.lang.String substring(int)>(1)  NO 
(1017, 5): $stack71 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>($stack70)  NO 
(1017, 6): if $stack71 != 0 goto $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1017, 7): $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 8): if $stack66 == 0 goto $stack62 = new java.lang.NumberFormatException  NO 
(1265, 0): l1 = 1  NO 
(1034, 0): return l13#63  NO 
(935, 0): return null  NO 
(1216, 0): return null  NO 
(985, 0): $stack116 = l9 + 1  NO 
(952, 0): l5#11 = 0  NO 
(985, 1): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack116, l10)  NO 
(985, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)]  NO 
(1299, 2): return $stack2  NO 
(1200, 1): return $stack1  NO 
(1101, 0): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1068, 0): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1068, 1): if l8 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1184, 1): return $stack1  NO 
(1085, 0): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1118, 1): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(1, l1)  NO 
(1052, 0): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1118, 2): goto [?= return $stack5]  NO 
(1019, 0): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1052, 1): return $stack77  NO 
(1019, 1): return $stack67  NO 
(953, 0): l6 = l6 + 1  NO 
(953, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(953, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  NO 
(1168, 0): return 1  NO 
(1102, 0): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1102, 1): return $stack31  NO 
(1086, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(954, 0): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(1268, 0): l2 = 16  NO 
(1235, 0): return null  NO 
(1004, 1): $stack90 = l2 - 1  NO 
(1004, 2): if l10 >= $stack90 goto l8 = null  NO 
(1252, 0): return null  NO 
(1219, 1): return $stack1  NO 
(1087, 0): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1087, 1): if $stack29 != 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(988, 0): $stack107 = l9 + 1  NO 
(955, 0): if l5#11 == 48 goto l4 = l4 + 1  NO 
(988, 1): if $stack119 == 0 goto $stack110 = l2  NO 
(988, 2): $stack110 = l2 - 1  NO 
(988, 3): goto [?= l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)]  NO 
(988, 4): $stack110 = l2  NO 
(988, 5): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)  NO 
(1269, 0): l1 = l1 + 2  NO 
(1269, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1071, 0): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1071, 1): return $stack54  NO 
(1005, 0): $stack98 = l10 + 1  NO 
(1005, 1): $stack97 = l2 - 1  NO 
(1005, 2): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack98, $stack97)  NO 
(1005, 3): goto [?= $stack60 = l2 - 1]  NO 
(1352, 2): $stack13 = 1  NO 
(1352, 3): goto [?= l4 = $stack13]  NO 
(1088, 0): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1088, 1): $stack43 = $stack42 cmpl 0.0F  NO 
(1088, 2): if $stack43 != 0 goto $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1088, 3): $stack48 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(956, 0): goto [?= l6 = l2 - l4]  NO 
(1088, 4): if $stack48 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1237, 1): return $stack1  NO 
(1039, 0): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1089, 0): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1089, 1): $stack45 = virtualinvoke l13#69.<java.lang.Double: java.lang.String toString()>()  NO 
(1023, 0): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1089, 2): $stack46 = virtualinvoke $stack44.<java.lang.String: boolean equals(java.lang.Object)>($stack45)  NO 
(990, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(1023, 1): return $stack164  NO 
(1089, 3): if $stack46 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(990, 1): goto [?= (branch)]  NO 
(1271, 0): l2 = 16  NO 
(1354, 0): l2 = l2 + 1  NO 
(1090, 0): return l12#81  NO 
(958, 0): l4 = l4 + 1  NO 
(1338, 0): return 0  NO 
(1272, 0): l1 = l1 + 1  NO 
(1272, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1273, 2): $stack19 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1273, 3): $stack20 = l1 + 1  NO 
(1273, 4): if $stack19 <= $stack20 goto $stack9 = new java.math.BigInteger  NO 
(943, 4): $stack145 = 1  NO 
(943, 5): goto [?= l3 = $stack145]  NO 
(1092, 0): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1092, 1): if $stack30 != 0 goto (branch)  NO 
(1026, 0): $stack62 = new java.lang.NumberFormatException  NO 
(1092, 2): $stack32 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the instructions which were covered will be shown: 

(1569, 0): $stack2 = l0 - l1  YES
(1441, 0): if l0 == null goto $stack2 = l1  YES
(1569, 1): return $stack2  YES
(1441, 1): $stack2 = virtualinvoke l0.<java.lang.Character: char charValue()>()  YES
(1536, 0): if l0 < 65 goto $stack1 = 0  YES
(1441, 2): goto [?= return $stack2]  YES
(1536, 1): if l0 > 90 goto $stack1 = 0  YES
(1441, 4): return $stack2  YES
(1536, 4): $stack1 = 0  YES
(1536, 5): return $stack1  YES
(1400, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1400, 1): return  YES
(1460, 0): if l0 >= 128 goto $stack1 = 0  YES
(1555, 0): if l0 < 97 goto $stack1 = 0  YES
(1460, 1): $stack1 = 1  YES
(1555, 1): if l0 > 122 goto $stack1 = 0  YES
(1460, 2): goto [?= return $stack1]  YES
(1555, 2): $stack1 = 1  YES
(1555, 3): goto [?= return $stack1]  YES
(1460, 4): return $stack1  YES
(1555, 4): $stack1 = 0  YES
(1555, 5): return $stack1  YES
(1479, 0): if l0 < 32 goto $stack1 = 0  YES
(1479, 1): if l0 >= 127 goto $stack1 = 0  YES
(1479, 2): $stack1 = 1  YES
(1479, 3): goto [?= return $stack1]  YES
(1479, 4): $stack1 = 0  YES
(1479, 5): return $stack1  YES
(1498, 0): if l0 < 32 goto $stack1 = 1  YES
(1498, 1): if l0 != 127 goto $stack1 = 0  YES
(1498, 2): $stack1 = 1  YES
(1498, 3): goto [?= return $stack1]  YES
(1498, 4): $stack1 = 0  YES
(1498, 5): return $stack1  YES
(1517, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES
(1517, 1): if $stack1 != 0 goto $stack3 = 1  YES
(1517, 2): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaLower(char)>(l0)  YES
(1517, 3): if $stack2 == 0 goto $stack3 = 0  YES
(1517, 4): $stack3 = 1  YES
(1517, 5): goto [?= return $stack3]  YES
(1517, 6): $stack3 = 0  YES
(1517, 7): return $stack3  YES

In the following all of the instructions which were not covered will be shown: 

(1441, 3): $stack2 = l1  NO 
(1536, 2): $stack1 = 1  NO 
(1536, 3): goto [?= return $stack1]  NO 
(1460, 3): $stack1 = 0  NO 


comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the instructions which were covered will be shown: 

(1761, 0): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1728, 0): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1761, 1): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: boolean isLeapYear(int)>(l0)  YES
(1728, 1): if l0 >= 2100 goto $stack1 = l0 & 3  YES
(1761, 2): if $stack6 == 0 goto $stack7 = 28  YES
(1761, 3): $stack7 = 29  YES
(1761, 4): goto [?= return $stack7]  YES
(1819, 0): $stack7 = new java.lang.IllegalArgumentException  YES
(1761, 6): return $stack7  YES
(1819, 1): $stack8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH out of range: \u0001")  YES
(1819, 2): specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack8)  YES
(1819, 3): throw $stack7  YES
(1902, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  YES
(1927, 0): if l0 != 6 goto (branch)  YES
(1894, 0): return l7  YES
(1861, 0): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1861, 1): if l2 <= 31 goto $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1762, 0): $stack4 = new java.lang.IllegalArgumentException  YES
(1762, 1): $stack5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid month: \u0001")  YES
(1762, 2): specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack5)  YES
(1762, 3): throw $stack4  YES
(1878, 0): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1812, 0): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1812, 1): if l0 <= 999999999 goto (branch)  YES
(1903, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1870, 0): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1928, 0): if l0 != 7 goto (branch)  YES
(1862, 0): $stack8 = new java.lang.IllegalArgumentException  YES
(1862, 1): $stack9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day out of range: \u0001")  YES
(1862, 2): specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9)  YES
(1862, 3): throw $stack8  YES
(1887, 0): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1821, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1821, 1): if l2 <= $stack9 goto return  YES
(1912, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1879, 0): l4 = l4 + -1  YES
(1904, 0): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1871, 0): l4 = l0 % 100  YES
(1929, 0): if l0 != 8 goto (branch)  YES
(1929, 1): return 15  YES
(1888, 0): $stack14 = l2 + l3  YES
(1888, 1): $stack16 = $stack14 + l4  YES
(1888, 2): $stack15 = l4 / 4  YES
(1822, 0): $stack10 = new java.lang.IllegalArgumentException  YES
(1888, 3): $stack17 = $stack16 + $stack15  YES
(1888, 4): $stack19 = $stack17 + l6  YES
(1888, 5): $stack18 = 2 * l5  YES
(1888, 6): $stack20 = $stack19 - $stack18  YES
(1888, 7): l7 = $stack20 % 7  YES
(1913, 0): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  YES
(1880, 0): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1913, 1): return $stack10  YES
(1905, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  YES
(1872, 0): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1930, 0): if l0 != 9 goto (branch)  YES
(1864, 0): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1864, 1): if l2 <= $stack10 goto l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1732, 0): $stack1 = l0 & 3  YES
(1732, 1): if $stack1 == 0 goto $stack4 = 1  YES
(1732, 2): $stack2 = l0 % 100  YES
(1922, 0): if l0 != 1 goto (branch)  YES
(1732, 3): if $stack2 != 0 goto $stack4 = 1  YES
(1922, 1): return 28  YES
(1732, 6): $stack4 = 1  YES
(1732, 7): goto [?= return $stack4]  YES
(1732, 9): return $stack4  YES
(1881, 0): l4 = 99  YES
(1815, 0): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1815, 1): if l1 <= 12 goto (branch)  YES
(1931, 0): if l0 != 10 goto (branch)  YES
(1931, 1): return 20  YES
(1923, 0): if l0 != 2 goto (branch)  YES
(1890, 0): if l7 > 0 goto return l7  YES
(1824, 0): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1824, 1): $stack12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH exceeds month length in given year: \u0001")  YES
(1824, 2): specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12)  YES
(1824, 3): throw $stack10  YES
(1882, 0): l5 = l5 + -1  YES
(1816, 0): $stack5 = new java.lang.IllegalArgumentException  YES
(1816, 1): $stack6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("MONTH out of range: \u0001")  YES
(1816, 2): specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack6)  YES
(1816, 3): throw $stack5  YES
(1684, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1684, 1): return  YES
(1907, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1874, 0): if l4 >= 0 goto (branch)  YES
(1932, 0): if l0 != 11 goto (branch)  YES
(1932, 1): return 23  YES
(1924, 0): if l0 != 3 goto (branch)  YES
(1891, 0): l7 = l7 + 7  YES
(1759, 0): if l1 == 1 goto return 31  YES
(1759, 1): if l1 == 3 goto return 31  YES
(1759, 2): if l1 == 5 goto return 31  YES
(1759, 3): if l1 == 7 goto return 31  YES
(1759, 4): if l1 == 8 goto return 31  YES
(1759, 5): if l1 == 10 goto return 31  YES
(1759, 6): if l1 != 12 goto (branch)  YES
(1759, 7): return 31  YES
(1908, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1875, 0): l4 = l4 + 100  YES
(1933, 0): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  YES
(1933, 1): return 25  YES
(1925, 0): if l0 != 4 goto (branch)  YES
(1760, 0): if l1 == 4 goto return 30  YES
(1760, 1): if l1 == 6 goto return 30  YES
(1760, 2): if l1 == 9 goto return 30  YES
(1760, 3): if l1 != 11 goto (branch)  YES
(1760, 4): return 30  YES
(1818, 0): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1818, 1): if l2 <= 31 goto $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1909, 0): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1901, 0): $stack4 = new java.lang.StringBuilder  YES
(1901, 1): specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()  YES
(1926, 0): if l0 != 5 goto (branch)  YES
(1926, 1): return 7  YES
(1827, 0): return  YES

In the following all of the instructions which were not covered will be shown: 

(1761, 5): $stack7 = 28  NO 
(1910, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1935, 0): $stack1 = new java.lang.IllegalArgumentException  NO 
(1935, 1): $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Month out of range: \u0001")  NO 
(1935, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  NO 
(1935, 3): throw $stack1  NO 
(1927, 1): return 10  NO 
(1729, 0): $stack7 = l0 & 3  NO 
(1729, 1): if $stack7 != 0 goto $stack8 = 0  NO 
(1729, 2): $stack8 = 1  NO 
(1729, 3): goto [?= return $stack8]  NO 
(1729, 4): $stack8 = 0  NO 
(1729, 5): return $stack8  NO 
(1928, 1): return 12  NO 
(1813, 0): $stack3 = new java.lang.IllegalArgumentException  NO 
(1813, 1): $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("YEAR out of range: \u0001")  NO 
(1813, 2): specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack4)  NO 
(1813, 3): throw $stack3  NO 
(1930, 1): return 18  NO 
(1732, 4): $stack3 = l0 % 400  NO 
(1732, 5): if $stack3 != 0 goto $stack4 = 0  NO 
(1732, 8): $stack4 = 0  NO 
(1865, 0): $stack37 = new java.lang.IllegalArgumentException  NO 
(1923, 1): return 31  NO 
(1924, 1): return 2  NO 
(1867, 0): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1867, 1): $stack39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day exceeds month length: \u0001")  NO 
(1867, 2): specialinvoke $stack37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39)  NO 
(1867, 3): throw $stack37  NO 
(1925, 1): return 5  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the instructions which were covered will be shown: 

(1664, 0): $stack4 = lengthof l0  YES
(1664, 1): if l2 < $stack4 goto (branch)  YES
(1662, 0): return -1  YES
(1619, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1619, 1): if $stack1 != 0 goto $stack2 = 0  YES
(1619, 2): $stack2 = 1  YES
(1619, 3): goto [?= return $stack2]  YES
(1619, 4): $stack2 = 0  YES
(1619, 5): return $stack2  YES
(1675, 0): $stack9 = l0[l3]  YES
(1675, 1): $stack10 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>($stack9)  YES
(1609, 0): if l0 == null goto $stack1 = 0  YES
(1673, 0): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1675, 2): if $stack10 == 0 goto l3 = l3 + -1  YES
(1609, 1): $stack1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(l0)  YES
(1673, 1): $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.Class getComponentType()>()  YES
(1609, 2): goto [?= return $stack1]  YES
(1673, 2): $stack7 = virtualinvoke $stack6.<java.lang.Class: boolean isInstance(java.lang.Object)>(l1)  YES
(1574, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1609, 3): $stack1 = 0  YES
(1673, 3): if $stack7 == 0 goto return -1  YES
(1574, 1): return  YES
(1609, 4): return $stack1  YES
(1669, 0): $stack12 = l0[l3]  YES
(1669, 1): if $stack12 != null goto l3 = l3 + -1  YES
(1667, 0): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1665, 0): $stack14 = lengthof l0  YES
(1665, 1): l2 = $stack14 - 1  YES
(1630, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1661, 0): if l0 == null goto return -1  YES
(1630, 1): return $stack1  YES
(1661, 1): if l2 >= 0 goto $stack4 = lengthof l0  YES
(1680, 0): return -1  YES
(1676, 0): return l3  YES
(1674, 0): l3 = l3 + -1  YES
(1641, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1674, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1674, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1641, 1): return $stack1  YES
(1668, 0): l3 = l3 + -1  YES
(1668, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1668, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1668, 2): goto [?= return -1]  YES

In the following all of the instructions which were not covered will be shown: 

(1579, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(1579, 1): <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(1579, 2): return  NO 
(1670, 0): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the instructions which were covered will be shown: 

(12, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(12, 1): return  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the instructions which were covered will be shown: 

(192, 0): return 0  YES
(213, 0): l2 = l2 + 1  YES
(213, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(213, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(213, 2): if l2 >= $stack4 goto return 1  YES
(81, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(176, 0): l4 = 0  YES
(172, 0): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(168, 0): l5 = l5 + 1  YES
(168, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(168, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(168, 2): if l5 >= $stack14 goto (branch)  YES
(222, 0): return 1  YES
(218, 0): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(185, 0): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(57, 0): $stack1 = new java.lang.IllegalArgumentException  YES
(218, 1): $stack7 = l1[l2]  YES
(152, 0): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(185, 1): if $stack19 <= 4 goto l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(57, 1): $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l0)  YES
(218, 2): $stack9 = virtualinvoke $stack8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack7)  YES
(57, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  YES
(218, 3): $stack10 = virtualinvoke $stack9.<java.util.regex.Matcher: boolean matches()>()  YES
(57, 3): throw $stack1  YES
(214, 0): $stack5 = l1[l2]  YES
(218, 4): if $stack10 != 0 goto l2 = l2 + 1  YES
(214, 1): $stack6 = virtualinvoke $stack5.<java.lang.String: boolean isEmpty()>()  YES
(148, 0): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(214, 2): if $stack6 == 0 goto $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(148, 1): if $stack10 == 0 goto $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(115, 0): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(115, 1): l1 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)  YES
(144, 0): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(169, 0): l6 = l2[l5]  YES
(103, 0): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(198, 0): l3#27 = l3#27 + 1  YES
(190, 0): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(219, 0): return 0  YES
(186, 0): return 0  YES
(153, 0): if l1 == 0 goto $stack13 = lengthof l2  YES
(54, 0): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(149, 0): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(149, 1): if $stack11 == 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(116, 0): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(116, 1): if $stack7 == 0 goto return 0  YES
(178, 0): $stack17 = lengthof l2  YES
(145, 0): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(178, 1): $stack18 = $stack17 - 1  YES
(178, 2): if l5 != $stack18 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(178, 3): $stack24 = virtualinvoke l6.<java.lang.String: boolean contains(java.lang.CharSequence)>(".")  YES
(178, 4): if $stack24 == 0 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(170, 0): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(170, 1): if $stack16 == 0 goto l4 = 0  YES
(265, 0): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(104, 0): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232, 0): if l0 == 47 goto $stack1 = 1  YES
(265, 1): if $stack9 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(232, 1): if l0 != 92 goto $stack1 = 0  YES
(265, 2): $stack32 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(42)  YES
(166, 0): l3#27 = 0  YES
(265, 3): if $stack32 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(100, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(232, 4): $stack1 = 0  YES
(232, 5): return $stack1  YES
(249, 0): return l0  YES
(216, 0): $stack13 = lengthof l1  YES
(216, 1): $stack14 = $stack13 - 1  YES
(216, 2): if l2 != $stack14 goto $stack15 = 0  YES
(117, 0): return 0  YES
(216, 3): $stack15 = 1  YES
(245, 0): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(212, 0): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(216, 4): goto [?= return $stack15]  YES
(84, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(245, 1): if $stack1 < 0 goto return l0  YES
(51, 0): if l0 != 47 goto (branch)  YES
(84, 1): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: int indexOfLastSeparator(java.lang.String)>(l0)  YES
(216, 6): return $stack15  YES
(84, 2): $stack3 = $stack2 + 1  YES
(84, 3): $stack4 = virtualinvoke $stack1.<java.lang.String: java.lang.String substring(int)>($stack3)  YES
(84, 4): return $stack4  YES
(14, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(14, 1): return  YES
(171, 0): l4 = l4 + 1  YES
(266, 0): $stack39 = newarray (java.lang.String)[1]  YES
(105, 0): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(266, 1): $stack39[0] = l0  YES
(105, 1): return $stack5  YES
(200, 0): if l3#27 > 8 goto $stack15 = 0  YES
(266, 2): return $stack39  YES
(167, 0): l4 = 0  YES
(200, 1): if l3#27 >= 8 goto $stack15 = 1  YES
(200, 2): if l1 == 0 goto $stack15 = 0  YES
(163, 0): $stack13 = lengthof l2  YES
(200, 5): $stack15 = 0  YES
(163, 1): if $stack13 <= 8 goto l3#27 = 0  YES
(200, 6): return $stack15  YES

In the following all of the instructions which were not covered will be shown: 

(52, 0): return 92  NO 
(285, 0): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(269, 0): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(154, 0): $stack28 = new java.util.ArrayList  NO 
(121, 0): l2 = l2 + 1  NO 
(154, 1): $stack29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(l2)  NO 
(121, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(121, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  NO 
(154, 2): specialinvoke $stack28.<java.util.ArrayList: void <init>(java.util.Collection)>($stack29)  NO 
(55, 0): return 47  NO 
(270, 0): $stack11 = new java.util.ArrayList  NO 
(270, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  NO 
(287, 0): l4 = l8  NO 
(155, 0): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(122, 0): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(155, 1): if $stack30 == 0 goto $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(271, 0): $stack12 = new java.lang.StringBuilder  NO 
(271, 1): specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>()  NO 
(123, 0): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(272, 0): l4 = 0  NO 
(173, 0): return 0  NO 
(289, 0): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(289, 1): if $stack13 == 0 goto $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(157, 0): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(124, 0): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(157, 1): goto [?= $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>]  NO 
(273, 0): l7 = l7 + 1  NO 
(273, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(273, "comp5111.assignment.cut.Subject$FilenameTasks", 2)]  NO 
(273, 2): if l7 >= l6 goto $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(273, 3): l8 = l1[l7]  NO 
(42, 0): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  NO 
(42, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN> = $stack2  NO 
(42, 2): return  NO 
(290, 0): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(290, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack17)  NO 
(158, 0): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(125, 0): return 0  NO 
(158, 1): if $stack31 == 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(158, 2): $stack36 = interfaceinvoke $stack28.<java.util.List: boolean isEmpty()>()  NO 
(158, 3): if $stack36 != 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(274, 0): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(274, 1): if l8 != 42 goto virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(159, 0): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(275, 0): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275, 1): if $stack20 == 0 goto (branch)  NO 
(193, 0): goto [?= (branch)]  NO 
(276, 0): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(276, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack26)  NO 
(293, 0): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(293, 1): $stack15 = virtualinvoke $stack11.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($stack14)  NO 
(293, 2): $stack16 = (java.lang.String[]) $stack15  NO 
(194, 0): if l7 < 0 goto return 0  NO 
(293, 3): return $stack16  NO 
(161, 0): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(194, 1): if l7 <= 65535 goto l3#27 = l3#27 + 1  NO 
(128, 0): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(161, 1): $stack33 = interfaceinvoke $stack28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack32)  NO 
(128, 1): if $stack11 <= 1 goto l2 = l2 + 1  NO 
(161, 2): l2 = (java.lang.String[]) $stack33  NO 
(128, 2): $stack14 = virtualinvoke l3.<java.lang.String: boolean startsWith(java.lang.String)>("0")  NO 
(128, 3): if $stack14 == 0 goto l2 = l2 + 1  NO 
(277, 0): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(145, 1): $stack49 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>("::")  NO 
(145, 2): $stack50 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String)>("::")  NO 
(145, 3): if $stack49 == $stack50 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(195, 0): return 0  NO 
(129, 0): return 0  NO 
(30, 0): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  NO 
(30, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN> = $stack1  NO 
(179, 0): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(146, 0): return 0  NO 
(179, 1): if $stack27 != 0 goto l3#27 = l3#27 + 2  NO 
(279, 0): if l8 != 63 goto (branch)  NO 
(246, 0): $stack2 = new java.lang.IllegalArgumentException  NO 
(246, 1): specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it")  NO 
(180, 0): return 0  NO 
(246, 2): throw $stack2  NO 
(164, 0): return 0  NO 
(280, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(280, 1): goto [?= l4 = l8]  NO 
(82, 0): return null  NO 
(148, 2): $stack45 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(148, 3): if $stack45 == 0 goto return 0  NO 
(16, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(16, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(281, 0): if l4 == 42 goto l4 = l8  NO 
(182, 0): l3#27 = l3#27 + 2  NO 
(149, 2): $stack41 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(116, 2): $stack8 = virtualinvoke l1.<java.util.regex.Matcher: int groupCount()>()  NO 
(149, 3): if $stack41 != 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  NO 
(116, 3): if $stack8 == 4 goto l2 = 1  NO 
(232, 2): $stack1 = 1  NO 
(232, 3): goto [?= return $stack1]  NO 
(282, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(282, 1): goto [?= l4 = l8]  NO 
(183, 0): goto [?= l5 = l5 + 1]  NO 
(150, 0): return 0  NO 
(216, 5): $stack15 = 0  NO 
(134, 0): return 1  NO 
(101, 0): return -1  NO 
(200, 3): $stack15 = 1  NO 
(200, 4): goto [?= return $stack15]  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the instructions which were covered will be shown: 

(580, 3): specialinvoke $stack16.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack18)  YES
(448, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(580, 4): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack16)  YES
(415, 0): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(349, 0): l2 = l2 + 1  YES
(349, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(349, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(795, 0): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(663, 0): if l0 == null goto return 1  YES
(663, 1): if l1 != null goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(564, 0): $stack23 = l2[l6]  YES
(564, 1): l7 = staticinvoke <java.lang.Character: int getType(char)>($stack23)  YES
(878, 0): l0#4 = l2  YES
(878, 1): goto [?= return l0#4]  YES
(845, 0): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(845, 1): $stack12 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($stack11)  YES
(845, 2): if $stack12 == 0 goto l4 = l4 + 1  YES
(746, 0): return 0  YES
(614, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(581, 0): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(581, 1): $stack21 = interfaceinvoke $stack11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack20)  YES
(581, 2): $stack22 = (java.lang.String[]) $stack21  YES
(581, 3): return $stack22  YES
(416, 0): l2 = l2 + 1  YES
(416, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(416, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(350, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(350, 1): $stack5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack4)  YES
(350, 2): if $stack5 != 0 goto l2 = l2 + 1  YES
(664, 0): return 1  YES
(565, 0): if l7 != l5 goto (branch)  YES
(499, 0): return l0  YES
(846, 0): l2 = 1  YES
(615, 0): l3 = lengthof l1  YES
(417, 0): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(417, 1): $stack6 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack5)  YES
(863, 0): if l0 == null goto return l0  YES
(351, 0): return 0  YES
(417, 2): if $stack6 != 0 goto l2 = l2 + 1  YES
(863, 1): if l1 == null goto return l0  YES
(863, 2): if l2 != null goto l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(566, 0): goto [?= l6 = l6 + 1]  YES
(880, 0): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(748, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(748, 1): $stack5 = interfaceinvoke l1.<java.lang.CharSequence: int length()>()  YES
(748, 2): if $stack4 == $stack5 goto $stack6 = l0 instanceof java.lang.String  YES
(616, 0): l4 = l2 - 1  YES
(451, 0): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(418, 0): return 0  YES
(666, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(881, 0): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881, 1): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack16, l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001")  YES
(881, 2): goto [?= return l0#4]  YES
(749, 0): return 0  YES
(716, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(716, 1): return $stack1  YES
(617, 0): l5 = l3 - 1  YES
(452, 0): if l1 >= 2 goto l2 = l1 - 1  YES
(799, 0): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799, 1): if $stack4 == 0 goto (branch)  YES
(667, 0): l3 = l2 - 1  YES
(568, 0): if l1 == 0 goto $stack25 = new java.lang.String  YES
(535, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(568, 1): if l7 != 2 goto $stack25 = new java.lang.String  YES
(502, 0): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(535, 1): return $stack1  YES
(568, 2): if l5 != 1 goto $stack25 = new java.lang.String  YES
(502, 1): l1#2 = $stack5 - 1  YES
(849, 0): if l1 == 0 goto $stack8 = 0  YES
(849, 4): $stack8 = 0  YES
(849, 5): return $stack8  YES
(618, 0): l6 = l6 + 1  YES
(618, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(618, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(453, 0): return ""  YES
(833, 0): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(833, 1): if $stack5 != 0 goto return 0  YES
(800, 0): return l0  YES
(833, 2): $stack6 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(833, 3): if $stack6 != 1 goto l1 = 0  YES
(668, 0): l4 = lengthof l1  YES
(503, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(751, 0): $stack6 = l0 instanceof java.lang.String  YES
(751, 1): if $stack6 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(751, 2): $stack12 = l1 instanceof java.lang.String  YES
(751, 3): if $stack12 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(619, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(553, 0): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(421, 0): return 1  YES
(867, 0): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(834, 0): return 0  YES
(669, 0): l5 = l4 - 1  YES
(636, 0): return 0  YES
(752, 0): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(752, 1): return $stack15  YES
(620, 0): l8 = l8 + 1  YES
(620, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(620, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(455, 0): l2 = l1 - 1  YES
(323, 0): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(323, 1): $stack1 = 0  YES
(802, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(323, 2): goto [?= return $stack1]  YES
(802, 1): $stack6 = l2 - 1  YES
(323, 3): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(802, 2): $stack7 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack6)  YES
(323, 4): return $stack1  YES
(802, 3): $stack8 = virtualinvoke l1.<java.lang.String: int indexOf(int)>($stack7)  YES
(670, 0): l6 = l6 + 1  YES
(802, 4): if $stack8 == -1 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(670, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(670, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(505, 0): if l2 != 10 goto (branch)  YES
(885, 0): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(621, 0): $stack15 = l1[l8]  YES
(621, 1): if $stack15 != l7 goto l8 = l8 + 1  YES
(456, 0): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(869, 0): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(836, 0): l1 = 0  YES
(803, 0): l2 = l2 + -1  YES
(803, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(802, "comp5111.assignment.cut.Subject$StringTasks", 0)]  YES
(671, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(688, 0): return 1  YES
(556, 0): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(556, 1): if $stack9 == 0 goto l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(490, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(490, 1): if $stack3 == 0 goto $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(457, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(870, 0): return l0  YES
(837, 0): l2 = 0  YES
(672, 0): l8 = l8 + 1  YES
(672, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(672, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(887, 0): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(887, 1): $stack14 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($stack13, l1, l2)  YES
(887, 2): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>($stack12, l2, $stack14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001")  YES
(557, 0): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(557, 1): return $stack41  YES
(491, 0): return l0  YES
(458, 0): if l4 != 10 goto return l3  YES
(838, 0): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(673, 0): $stack13 = l1[l8]  YES
(673, 1): if $stack13 != l7 goto l8 = l8 + 1  YES
(839, 0): l4 = l4 + 1  YES
(839, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(839, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(806, 0): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(806, 1): return $stack5  YES
(575, 0): $stack25 = new java.lang.String  YES
(575, 1): $stack26 = l6 - l4  YES
(509, 0): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(575, 2): specialinvoke $stack25.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack26)  YES
(575, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack25)  YES
(377, 0): if l0 == null goto $stack2 = 1  YES
(377, 1): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(377, 2): if $stack1 != 0 goto $stack2 = 0  YES
(377, 3): $stack2 = 1  YES
(790, 0): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(377, 4): goto [?= return $stack2]  YES
(377, 5): $stack2 = 0  YES
(377, 6): return $stack2  YES
(559, 0): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(873, 0): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(840, 0): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(576, 0): l4 = l6  YES
(510, 0): l1#2 = l1#2 + 1  YES
(890, 0): return l0#4  YES
(345, 0): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(791, 0): if l2 != 0 goto (branch)  YES
(560, 0): $stack11 = new java.util.ArrayList  YES
(560, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  YES
(494, 0): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(494, 1): if $stack4 != 1 goto $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(461, 0): return l3  YES
(742, 0): if l0 != l1 goto (branch)  YES
(412, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(412, 1): if $stack3 == 0 goto l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(346, 0): if l1 != 0 goto l2 = 0  YES
(792, 0): return l0  YES
(561, 0): l4 = 0  YES
(495, 0): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(875, 0): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(875, 1): l6 = l3 + $stack10  YES
(297, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(297, 1): return  YES
(743, 0): return 1  YES
(611, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(611, 1): if $stack9 != 0 goto return 0  YES
(578, 0): l5 = l7  YES
(611, 2): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isEmpty(char[])>(l1)  YES
(512, 0): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(611, 3): if $stack10 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(512, 1): return $stack7  YES
(413, 0): return 0  YES
(347, 0): return 1  YES
(562, 0): $stack12 = l2[0]  YES
(562, 1): l5 = staticinvoke <java.lang.Character: int getType(char)>($stack12)  YES
(496, 0): if l1 == 13 goto return ""  YES
(496, 1): if l1 != 10 goto return l0  YES
(843, 0): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843, 1): $stack10 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($stack9)  YES
(843, 2): if $stack10 == 0 goto $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(612, 0): return 0  YES
(563, 0): l6 = l6 + 1  YES
(563, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(563, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(563, 2): $stack15 = $stack14 - 1  YES
(563, 3): if l6 >= $stack15 goto $stack16 = new java.lang.String  YES
(877, 0): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(877, 1): if l4 != $stack11 goto (branch)  YES
(745, 0): if l0 == null goto return 0  YES
(745, 1): if l1 != null goto $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580, 0): $stack16 = new java.lang.String  YES
(580, 1): $stack17 = lengthof l2  YES
(580, 2): $stack18 = $stack17 - l4  YES

In the following all of the instructions which were not covered will be shown: 

(630, 0): if l6 >= l4 goto l8 = l8 + 1  NO 
(630, 1): $stack19 = l8 + 1  NO 
(630, 2): $stack21 = l1[$stack19]  NO 
(630, 3): $stack20 = l6 + 1  NO 
(630, 4): $stack22 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack20)  NO 
(630, 5): if $stack21 != $stack22 goto l8 = l8 + 1  NO 
(680, 0): return 0  NO 
(449, 0): return null  NO 
(796, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(796, 1): $stack13 = l2 - 1  NO 
(796, 2): $stack14 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack13)  NO 
(796, 3): $stack15 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack14)  NO 
(796, 4): if $stack15 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(631, 0): return 1  NO 
(797, 0): l2 = l2 + -1  NO 
(797, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(796, "comp5111.assignment.cut.Subject$StringTasks", 0)]  NO 
(682, 0): if l6 >= l3 goto l8 = l8 + 1  NO 
(682, 1): $stack17 = l8 + 1  NO 
(682, 2): $stack19 = l1[$stack17]  NO 
(682, 3): $stack18 = l6 + 1  NO 
(682, 4): $stack20 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack18)  NO 
(682, 5): if $stack19 != $stack20 goto l8 = l8 + 1  NO 
(864, 0): return l0  NO 
(683, 0): return 0  NO 
(849, 1): if l2 == 0 goto $stack8 = 0  NO 
(849, 2): $stack8 = 1  NO 
(849, 3): goto [?= return $stack8]  NO 
(354, 0): return 1  NO 
(569, 0): l8 = l6 - 1  NO 
(570, 0): if l8 == l4 goto (branch)  NO 
(554, 0): return null  NO 
(571, 0): $stack38 = new java.lang.String  NO 
(571, 1): $stack39 = l8 - l4  NO 
(571, 2): specialinvoke $stack38.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack39)  NO 
(571, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack38)  NO 
(572, 0): l4 = l8  NO 
(506, 0): $stack11 = l1#2 - 1  NO 
(506, 1): $stack12 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack11)  NO 
(506, 2): if $stack12 != 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  NO 
(622, 0): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(622, 1): if $stack18 != 0 goto (branch)  NO 
(507, 0): l1#2 = l1#2 + -1  NO 
(507, 1): goto [?= $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)]  NO 
(755, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(458, 1): $stack8 = l2 - 1  NO 
(458, 2): $stack9 = virtualinvoke l3.<java.lang.String: char charAt(int)>($stack8)  NO 
(458, 3): if $stack9 != 13 goto return l3  NO 
(574, 0): goto [?= l5 = l7]  NO 
(756, 0): l3 = l3 + 1  NO 
(756, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(756, "comp5111.assignment.cut.Subject$StringTasks", 1)]  NO 
(624, 0): return 1  NO 
(459, 0): $stack11 = l2 - 1  NO 
(459, 1): $stack12 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int,int)>(0, $stack11)  NO 
(459, 2): return $stack12  NO 
(674, 0): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(674, 1): if $stack16 != 0 goto (branch)  NO 
(757, 0): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 1): $stack9 = interfaceinvoke l1.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 2): if $stack8 == $stack9 goto l3 = l3 + 1  NO 
(840, 1): if l2 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(758, 0): return 0  NO 
(626, 0): if l8 != l5 goto (branch)  NO 
(841, 0): return 1  NO 
(676, 0): return 0  NO 
(628, 0): return 1  NO 
(678, 0): if l8 != l5 goto (branch)  NO 
(761, 0): return 1  NO 
(497, 0): return ""  NO 
(844, 0): l1 = 1  NO 
(844, 1): goto [?= l4 = l4 + 1]  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the instructions which were covered will be shown: 

(1393, 0): if l0 != l1 goto (branch)  YES
(1396, 3): $stack2 = -1  YES
(1396, 4): return $stack2  YES
(1381, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1396, 0): if l0 == 0 goto $stack2 = -1  YES
(1381, 1): return  YES
(1396, 1): $stack2 = 1  YES
(1394, 0): return 0  YES
(1396, 2): goto [?= return $stack2]  YES

In the following all of the instructions which were not covered will be shown: 




Coverage of Test Suite: comp5111.assignment.cut.RegressionTest2

comp5111.assignment.cut.Subject$NumberTasks
133 Instructions from a total of 351 Instructions were covered.
Percentage: 37.89173789173789%

comp5111.assignment.cut.Subject$CharTasks
42 Instructions from a total of 46 Instructions were covered.
Percentage: 91.30434782608695%

comp5111.assignment.cut.Subject$GregorianTasks
99 Instructions from a total of 146 Instructions were covered.
Percentage: 67.8082191780822%

comp5111.assignment.cut.Subject$ArrayTasks
41 Instructions from a total of 49 Instructions were covered.
Percentage: 83.6734693877551%

comp5111.assignment.cut.Subject
2 Instructions from a total of 2 Instructions were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
95 Instructions from a total of 204 Instructions were covered.
Percentage: 46.568627450980394%

comp5111.assignment.cut.Subject$StringTasks
207 Instructions from a total of 295 Instructions were covered.
Percentage: 70.16949152542372%

comp5111.assignment.cut.Subject$BooleanTasks
9 Instructions from a total of 9 Instructions were covered.
Percentage: 100.0%

Overall Statement Coverage: 56.98729582577132%



In the following part you can see which instructions were executed. Before every instruction you can see two numbers
in the form of (x,y), for Example (1,5). This indicates that the following Instruction can be found on line x of the Java code. 
y denotes that it is the y-th Jimple Instruction generated from the corresponding Java line.
After each listed instructions you can find a NO if the instruction wasn't executed and a YES if it was. 


comp5111.assignment.cut.Subject$NumberTasks


In the following all of the instructions which were covered will be shown: 

(1340, 0): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1340, 1): if $stack5 != 45 goto $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1299, 0): $stack2 = new java.math.BigDecimal  YES
(1299, 1): specialinvoke $stack2.<java.math.BigDecimal: void <init>(java.lang.String)>(l0)  YES
(1010, 0): $stack60 = l2 - 1  YES
(1010, 1): l12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, $stack60)  YES
(944, 0): l4 = 0  YES
(1200, 0): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(1258, 0): l2 = 10  YES
(969, 0): $stack19 = l2 - 1  YES
(969, 1): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack19)  YES
(1184, 0): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1118, 0): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 3): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 4): return $stack5  YES
(1267, 0): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1267, 1): if $stack8 != 0 goto l2 = 16  YES
(1234, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1267, 2): $stack12 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", l1)  YES
(945, 0): l7 = l7 + 1  YES
(1267, 3): if $stack12 == 0 goto $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(945, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(945, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  YES
(945, 2): if l7 >= l6 goto (branch)  YES
(945, 3): l8 = $stack16[l7]  YES
(1292, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1259, 0): l3 = 0  YES
(1003, 0): if l11 == 0 goto (branch)  YES
(937, 0): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937, 1): if $stack15 == 0 goto $stack16 = newarray (java.lang.String)[3]  YES
(1350, 0): l2 = 0  YES
(1251, 0): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1334, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1334, 1): if $stack1 == 0 goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1012, 0): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(979, 0): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(946, 0): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(979, 1): if $stack25 != 0 goto $stack119 = 0  YES
(946, 1): if $stack138 == 0 goto l7 = l7 + 1  YES
(979, 2): if l5#11 == 46 goto $stack119 = 0  YES
(979, 3): $stack119 = 1  YES
(979, 4): goto [?= l11 = $stack119]  YES
(1359, 0): if l4 != 0 goto l3 = l3 + 1  YES
(1359, 1): $stack9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(979, 6): l11 = $stack119  YES
(1359, 2): $stack10 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack9)  YES
(1260, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1004, 0): if l10 <= -1 goto l8 = null  YES
(1359, 3): if $stack10 != 0 goto l3 = l3 + 1  YES
(938, 0): $stack151 = new java.lang.NumberFormatException  YES
(938, 1): specialinvoke $stack151.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(938, 2): throw $stack151  YES
(1351, 0): l3 = l3 + 1  YES
(1351, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1351, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  YES
(1351, 2): if l3 >= $stack5 goto return 1  YES
(1219, 0): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1335, 0): return 0  YES
(980, 0): if l9 <= -1 goto (branch)  YES
(1360, 0): return 0  YES
(1261, 0): if l4 != 45 goto (branch)  YES
(1352, 0): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1352, 1): if $stack6 != 46 goto $stack13 = 0  YES
(1352, 4): $stack13 = 0  YES
(1352, 5): l4 = $stack13  YES
(1377, 0): $stack2 = l0 - l1  YES
(1377, 1): return $stack2  YES
(1278, 0): $stack9 = new java.math.BigInteger  YES
(1278, 1): $stack10 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l1)  YES
(1278, 2): specialinvoke $stack9.<java.math.BigInteger: void <init>(java.lang.String,int)>($stack10, l2)  YES
(1270, 0): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1270, 1): if $stack13 == 0 goto $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1237, 0): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(973, 0): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(1353, 0): if $stack13 == 0 goto (branch)  YES
(1254, 0): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254, 1): if $stack6 == 0 goto l1 = 0  YES
(1337, 0): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1337, 1): $stack3 = $stack2 - 1  YES
(1337, 2): $stack4 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack3)  YES
(1337, 3): if $stack4 != 46 goto $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1296, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296, 1): if $stack1 == 0 goto $stack2 = new java.math.BigDecimal  YES
(1007, 0): l8 = null  YES
(974, 0): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(941, 0): $stack16 = newarray (java.lang.String)[3]  YES
(974, 1): $stack23 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(69)  YES
(1197, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941, 1): $stack16[0] = "0x"  YES
(974, 2): $stack24 = $stack22 + $stack23  YES
(941, 2): $stack16[1] = "0X"  YES
(974, 3): l10 = $stack24 + 1  YES
(941, 3): $stack16[2] = "#"  YES
(1255, 0): $stack25 = new java.lang.NumberFormatException  YES
(999, 0): if $stack119 == 0 goto $stack101 = l2  YES
(1255, 1): specialinvoke $stack25.<java.lang.NumberFormatException: void <init>(java.lang.String)>("An empty string is not a valid number")  YES
(999, 1): $stack101 = l2 - 1  YES
(1255, 2): throw $stack25  YES
(999, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)]  YES
(900, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(999, 4): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)  YES
(900, 1): return  YES
(1346, 0): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1313, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1346, 1): return $stack6  YES
(1313, 1): return $stack1  YES
(1181, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1115, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1297, 0): $stack3 = new java.lang.NumberFormatException  YES
(1264, 0): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1297, 1): specialinvoke $stack3.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(1297, 2): throw $stack3  YES
(942, 0): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(934, 0): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1058, 0): $stack88 = new java.lang.NumberFormatException  YES
(1058, 1): $stack89 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  YES
(992, 0): if l10 <= -1 goto (branch)  YES
(1058, 2): specialinvoke $stack88.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack89)  YES
(1215, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1058, 3): throw $stack88  YES
(1116, 0): if l2 == 45 goto $stack7 = 1  YES
(1116, 1): if l2 != 43 goto $stack7 = 0  YES
(1273, 0): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1273, 1): if $stack14 == 0 goto $stack9 = new java.math.BigInteger  YES
(1116, 4): $stack7 = 0  YES
(951, 0): if l4 <= 0 goto $stack19 = l2 - 1  YES
(943, 0): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(943, 1): if $stack18 == 43 goto $stack145 = 1  YES
(943, 2): $stack144 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(943, 3): if $stack144 != 45 goto $stack145 = 0  YES
(1356, 0): if l2 <= 1 goto (branch)  YES
(1257, 0): l1 = 0  YES
(943, 6): $stack145 = 0  YES
(1001, 0): l7#20 = null  YES
(943, 7): l3 = $stack145  YES

In the following all of the instructions which were not covered will be shown: 

(993, 0): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1026, 1): $stack63 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1092, 3): $stack33 = $stack32 cmpl 0.0  NO 
(960, 0): l6 = l2 - l4  NO 
(1026, 2): specialinvoke $stack62.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack63)  NO 
(1092, 4): if $stack33 != 0 goto l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1026, 3): throw $stack62  NO 
(1092, 5): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1092, 6): if $stack38 == 0 goto (branch)  NO 
(1274, 0): l2 = 8  NO 
(1076, 0): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1076, 1): return $stack157  NO 
(1357, 0): return 0  NO 
(1093, 0): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(994, 0): $stack105 = new java.lang.NumberFormatException  NO 
(961, 0): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(994, 1): $stack106 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(961, 1): if l6 != 16 goto (branch)  NO 
(994, 2): specialinvoke $stack105.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack106)  NO 
(961, 2): if l5#11 <= 55 goto (branch)  NO 
(994, 3): throw $stack105  NO 
(1341, 0): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1341, 1): if $stack7 != 1 goto $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1275, 0): l1 = l1 + 1  NO 
(1044, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1160, 0): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1094, 0): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1094, 1): $stack36 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($stack35)  NO 
(1094, 2): $stack37 = virtualinvoke l14.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($stack36)  NO 
(1094, 3): if $stack37 != 0 goto return l14  NO 
(962, 0): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962, 1): return $stack122  NO 
(1342, 0): return 0  NO 
(1045, 0): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1045, 1): if $stack76 != 0 goto (branch)  NO 
(1045, 2): $stack78 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1045, 3): $stack79 = $stack78 cmpl 0.0  NO 
(1045, 4): if $stack79 != 0 goto return l13#69  NO 
(1045, 5): $stack80 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1045, 6): if $stack80 == 0 goto (branch)  NO 
(979, 5): $stack119 = 0  NO 
(1293, 0): return null  NO 
(1161, 0): return 1  NO 
(1095, 0): return l13#69  NO 
(996, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(996, 1): goto [?= l7#20 = null]  NO 
(1046, 0): return l13#69  NO 
(947, 0): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(947, 1): $stack142 = $stack141 + l3  NO 
(947, 2): l4 = 0 + $stack142  NO 
(1063, 0): if l10 <= -1 goto l8 = null  NO 
(1030, 0): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1063, 1): $stack55 = l2 - 1  NO 
(1063, 2): if l10 >= $stack55 goto l8 = null  NO 
(964, 0): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(964, 1): if l6 != 8 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(964, 2): if l5#11 <= 55 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1344, 0): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1344, 1): return $stack8  NO 
(1080, 0): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1080, 1): return $stack155  NO 
(981, 0): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(948, 0): goto [?= (branch)]  NO 
(1262, 0): l3 = 1  NO 
(1163, 0): l1 = l1 + -1  NO 
(1163, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1163, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  NO 
(1097, 0): return l14  NO 
(1163, 2): if l1 < 0 goto return 1  NO 
(1064, 0): $stack58 = l10 + 1  NO 
(1031, 0): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1064, 1): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>($stack58)  NO 
(1031, 1): if $stack74 != 0 goto (branch)  NO 
(1064, 2): goto [?= (branch)]  NO 
(965, 0): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1031, 2): $stack82 = virtualinvoke l13#63.<java.lang.Float: float floatValue()>()  NO 
(965, 1): return $stack123  NO 
(1031, 3): $stack83 = $stack82 cmpl 0.0F  NO 
(1031, 4): if $stack83 != 0 goto return l13#63  NO 
(1031, 5): $stack84 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1031, 6): if $stack84 == 0 goto (branch)  NO 
(1279, 0): if l3 == 0 goto $stack11 = $stack9  NO 
(1279, 1): $stack11 = virtualinvoke $stack9.<java.math.BigInteger: java.math.BigInteger negate()>()  NO 
(1279, 2): goto [?= return $stack11]  NO 
(1279, 3): $stack11 = $stack9  NO 
(1279, 4): return $stack11  NO 
(1015, 0): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 0): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(1015, 1): if l8 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 1): if l10 <= l2 goto $stack116 = l9 + 1  NO 
(1263, 0): l1 = 1  NO 
(1263, 1): goto [?= $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)]  NO 
(1164, 0): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1164, 1): if $stack3 == 48 goto l1 = l1 + -1  NO 
(999, 3): $stack101 = l2  NO 
(1148, 0): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1148, 1): if $stack2 == 0 goto $stack4 = 0  NO 
(1148, 2): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l1)  NO 
(1148, 3): if $stack3 == 0 goto $stack4 = 0  NO 
(1148, 4): $stack4 = 1  NO 
(983, 0): $stack114 = new java.lang.NumberFormatException  NO 
(1148, 5): goto [?= return $stack4]  NO 
(983, 1): $stack115 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1148, 6): $stack4 = 0  NO 
(983, 2): specialinvoke $stack114.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack115)  NO 
(1148, 7): return $stack4  NO 
(983, 3): throw $stack114  NO 
(1363, 0): return 1  NO 
(1198, 0): return null  NO 
(1165, 0): return 0  NO 
(1066, 0): l8 = null  NO 
(967, 0): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(967, 1): return $stack124  NO 
(1182, 0): return null  NO 
(1050, 0): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1116, 2): $stack7 = 1  NO 
(1017, 0): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1116, 3): goto [?= (branch)]  NO 
(1017, 1): if $stack65 != 0 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 2): $stack68 = virtualinvoke l12.<java.lang.String: char charAt(int)>(0)  NO 
(1017, 3): if $stack68 != 45 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 4): $stack70 = virtualinvoke l12.<java.lang.String: java.lang.String substring(int)>(1)  NO 
(1017, 5): $stack71 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>($stack70)  NO 
(1017, 6): if $stack71 != 0 goto $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1017, 7): $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 8): if $stack66 == 0 goto $stack62 = new java.lang.NumberFormatException  NO 
(1265, 0): l1 = 1  NO 
(1034, 0): return l13#63  NO 
(935, 0): return null  NO 
(1216, 0): return null  NO 
(985, 0): $stack116 = l9 + 1  NO 
(952, 0): l5#11 = 0  NO 
(985, 1): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack116, l10)  NO 
(985, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)]  NO 
(1299, 2): return $stack2  NO 
(1200, 1): return $stack1  NO 
(1101, 0): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1068, 0): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1068, 1): if l8 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1184, 1): return $stack1  NO 
(1085, 0): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1118, 1): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(1, l1)  NO 
(1052, 0): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1118, 2): goto [?= return $stack5]  NO 
(1019, 0): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1052, 1): return $stack77  NO 
(1019, 1): return $stack67  NO 
(953, 0): l6 = l6 + 1  NO 
(953, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(953, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  NO 
(1168, 0): return 1  NO 
(1102, 0): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1102, 1): return $stack31  NO 
(1086, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(954, 0): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(1268, 0): l2 = 16  NO 
(1235, 0): return null  NO 
(1004, 1): $stack90 = l2 - 1  NO 
(1004, 2): if l10 >= $stack90 goto l8 = null  NO 
(1252, 0): return null  NO 
(1219, 1): return $stack1  NO 
(1087, 0): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1087, 1): if $stack29 != 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(988, 0): $stack107 = l9 + 1  NO 
(955, 0): if l5#11 == 48 goto l4 = l4 + 1  NO 
(988, 1): if $stack119 == 0 goto $stack110 = l2  NO 
(988, 2): $stack110 = l2 - 1  NO 
(988, 3): goto [?= l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)]  NO 
(988, 4): $stack110 = l2  NO 
(988, 5): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)  NO 
(1269, 0): l1 = l1 + 2  NO 
(1269, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1071, 0): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1071, 1): return $stack54  NO 
(1005, 0): $stack98 = l10 + 1  NO 
(1005, 1): $stack97 = l2 - 1  NO 
(1005, 2): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack98, $stack97)  NO 
(1005, 3): goto [?= $stack60 = l2 - 1]  NO 
(1352, 2): $stack13 = 1  NO 
(1352, 3): goto [?= l4 = $stack13]  NO 
(1088, 0): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1088, 1): $stack43 = $stack42 cmpl 0.0F  NO 
(1088, 2): if $stack43 != 0 goto $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1088, 3): $stack48 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(956, 0): goto [?= l6 = l2 - l4]  NO 
(1088, 4): if $stack48 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1237, 1): return $stack1  NO 
(1039, 0): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1089, 0): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1089, 1): $stack45 = virtualinvoke l13#69.<java.lang.Double: java.lang.String toString()>()  NO 
(1023, 0): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1089, 2): $stack46 = virtualinvoke $stack44.<java.lang.String: boolean equals(java.lang.Object)>($stack45)  NO 
(990, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(1023, 1): return $stack164  NO 
(1089, 3): if $stack46 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(990, 1): goto [?= (branch)]  NO 
(1271, 0): l2 = 16  NO 
(1354, 0): l2 = l2 + 1  NO 
(1090, 0): return l12#81  NO 
(958, 0): l4 = l4 + 1  NO 
(1338, 0): return 0  NO 
(1272, 0): l1 = l1 + 1  NO 
(1272, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1273, 2): $stack19 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1273, 3): $stack20 = l1 + 1  NO 
(1273, 4): if $stack19 <= $stack20 goto $stack9 = new java.math.BigInteger  NO 
(943, 4): $stack145 = 1  NO 
(943, 5): goto [?= l3 = $stack145]  NO 
(1092, 0): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1092, 1): if $stack30 != 0 goto (branch)  NO 
(1026, 0): $stack62 = new java.lang.NumberFormatException  NO 
(1092, 2): $stack32 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the instructions which were covered will be shown: 

(1569, 0): $stack2 = l0 - l1  YES
(1441, 0): if l0 == null goto $stack2 = l1  YES
(1536, 0): if l0 < 65 goto $stack1 = 0  YES
(1569, 1): return $stack2  YES
(1441, 1): $stack2 = virtualinvoke l0.<java.lang.Character: char charValue()>()  YES
(1536, 1): if l0 > 90 goto $stack1 = 0  YES
(1441, 2): goto [?= return $stack2]  YES
(1441, 4): return $stack2  YES
(1536, 4): $stack1 = 0  YES
(1536, 5): return $stack1  YES
(1400, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1400, 1): return  YES
(1460, 0): if l0 >= 128 goto $stack1 = 0  YES
(1555, 0): if l0 < 97 goto $stack1 = 0  YES
(1460, 1): $stack1 = 1  YES
(1460, 2): goto [?= return $stack1]  YES
(1555, 1): if l0 > 122 goto $stack1 = 0  YES
(1555, 2): $stack1 = 1  YES
(1460, 4): return $stack1  YES
(1555, 3): goto [?= return $stack1]  YES
(1555, 4): $stack1 = 0  YES
(1555, 5): return $stack1  YES
(1479, 0): if l0 < 32 goto $stack1 = 0  YES
(1479, 1): if l0 >= 127 goto $stack1 = 0  YES
(1479, 2): $stack1 = 1  YES
(1479, 3): goto [?= return $stack1]  YES
(1479, 4): $stack1 = 0  YES
(1479, 5): return $stack1  YES
(1498, 0): if l0 < 32 goto $stack1 = 1  YES
(1498, 1): if l0 != 127 goto $stack1 = 0  YES
(1498, 2): $stack1 = 1  YES
(1498, 3): goto [?= return $stack1]  YES
(1498, 4): $stack1 = 0  YES
(1498, 5): return $stack1  YES
(1517, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES
(1517, 1): if $stack1 != 0 goto $stack3 = 1  YES
(1517, 2): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaLower(char)>(l0)  YES
(1517, 3): if $stack2 == 0 goto $stack3 = 0  YES
(1517, 4): $stack3 = 1  YES
(1517, 5): goto [?= return $stack3]  YES
(1517, 6): $stack3 = 0  YES
(1517, 7): return $stack3  YES

In the following all of the instructions which were not covered will be shown: 

(1441, 3): $stack2 = l1  NO 
(1536, 2): $stack1 = 1  NO 
(1536, 3): goto [?= return $stack1]  NO 
(1460, 3): $stack1 = 0  NO 


comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the instructions which were covered will be shown: 

(1761, 0): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1728, 0): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1761, 1): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: boolean isLeapYear(int)>(l0)  YES
(1728, 1): if l0 >= 2100 goto $stack1 = l0 & 3  YES
(1761, 2): if $stack6 == 0 goto $stack7 = 28  YES
(1761, 3): $stack7 = 29  YES
(1761, 4): goto [?= return $stack7]  YES
(1819, 0): $stack7 = new java.lang.IllegalArgumentException  YES
(1761, 6): return $stack7  YES
(1819, 1): $stack8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH out of range: \u0001")  YES
(1819, 2): specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack8)  YES
(1819, 3): throw $stack7  YES
(1927, 0): if l0 != 6 goto (branch)  YES
(1894, 0): return l7  YES
(1927, 1): return 10  YES
(1861, 0): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1861, 1): if l2 <= 31 goto $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1762, 0): $stack4 = new java.lang.IllegalArgumentException  YES
(1762, 1): $stack5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid month: \u0001")  YES
(1762, 2): specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack5)  YES
(1762, 3): throw $stack4  YES
(1878, 0): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1812, 0): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1812, 1): if l0 <= 999999999 goto (branch)  YES
(1870, 0): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1928, 0): if l0 != 7 goto (branch)  YES
(1862, 0): $stack8 = new java.lang.IllegalArgumentException  YES
(1862, 1): $stack9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day out of range: \u0001")  YES
(1862, 2): specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9)  YES
(1862, 3): throw $stack8  YES
(1887, 0): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1821, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1821, 1): if l2 <= $stack9 goto return  YES
(1879, 0): l4 = l4 + -1  YES
(1871, 0): l4 = l0 % 100  YES
(1929, 0): if l0 != 8 goto (branch)  YES
(1929, 1): return 15  YES
(1888, 0): $stack14 = l2 + l3  YES
(1888, 1): $stack16 = $stack14 + l4  YES
(1888, 2): $stack15 = l4 / 4  YES
(1888, 3): $stack17 = $stack16 + $stack15  YES
(1888, 4): $stack19 = $stack17 + l6  YES
(1888, 5): $stack18 = 2 * l5  YES
(1888, 6): $stack20 = $stack19 - $stack18  YES
(1888, 7): l7 = $stack20 % 7  YES
(1880, 0): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1872, 0): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1930, 0): if l0 != 9 goto (branch)  YES
(1930, 1): return 18  YES
(1864, 0): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1864, 1): if l2 <= $stack10 goto l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1732, 0): $stack1 = l0 & 3  YES
(1732, 1): if $stack1 == 0 goto $stack4 = 1  YES
(1922, 0): if l0 != 1 goto (branch)  YES
(1732, 2): $stack2 = l0 % 100  YES
(1922, 1): return 28  YES
(1732, 3): if $stack2 != 0 goto $stack4 = 1  YES
(1732, 6): $stack4 = 1  YES
(1732, 7): goto [?= return $stack4]  YES
(1732, 9): return $stack4  YES
(1881, 0): l4 = 99  YES
(1815, 0): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1815, 1): if l1 <= 12 goto (branch)  YES
(1931, 0): if l0 != 10 goto (branch)  YES
(1931, 1): return 20  YES
(1923, 0): if l0 != 2 goto (branch)  YES
(1890, 0): if l7 > 0 goto return l7  YES
(1923, 1): return 31  YES
(1882, 0): l5 = l5 + -1  YES
(1816, 0): $stack5 = new java.lang.IllegalArgumentException  YES
(1816, 1): $stack6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("MONTH out of range: \u0001")  YES
(1816, 2): specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack6)  YES
(1816, 3): throw $stack5  YES
(1684, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1684, 1): return  YES
(1874, 0): if l4 >= 0 goto (branch)  YES
(1932, 0): if l0 != 11 goto (branch)  YES
(1932, 1): return 23  YES
(1924, 0): if l0 != 3 goto (branch)  YES
(1891, 0): l7 = l7 + 7  YES
(1759, 0): if l1 == 1 goto return 31  YES
(1759, 1): if l1 == 3 goto return 31  YES
(1759, 2): if l1 == 5 goto return 31  YES
(1759, 3): if l1 == 7 goto return 31  YES
(1759, 4): if l1 == 8 goto return 31  YES
(1759, 5): if l1 == 10 goto return 31  YES
(1759, 6): if l1 != 12 goto (branch)  YES
(1759, 7): return 31  YES
(1875, 0): l4 = l4 + 100  YES
(1925, 0): if l0 != 4 goto (branch)  YES
(1760, 0): if l1 == 4 goto return 30  YES
(1760, 1): if l1 == 6 goto return 30  YES
(1760, 2): if l1 == 9 goto return 30  YES
(1760, 3): if l1 != 11 goto (branch)  YES
(1760, 4): return 30  YES
(1818, 0): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1818, 1): if l2 <= 31 goto $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1926, 0): if l0 != 5 goto (branch)  YES
(1827, 0): return  YES

In the following all of the instructions which were not covered will be shown: 

(1761, 5): $stack7 = 28  NO 
(1910, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1935, 0): $stack1 = new java.lang.IllegalArgumentException  NO 
(1935, 1): $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Month out of range: \u0001")  NO 
(1902, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  NO 
(1935, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  NO 
(1935, 3): throw $stack1  NO 
(1729, 0): $stack7 = l0 & 3  NO 
(1729, 1): if $stack7 != 0 goto $stack8 = 0  NO 
(1729, 2): $stack8 = 1  NO 
(1729, 3): goto [?= return $stack8]  NO 
(1729, 4): $stack8 = 0  NO 
(1729, 5): return $stack8  NO 
(1903, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  NO 
(1928, 1): return 12  NO 
(1912, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  NO 
(1813, 0): $stack3 = new java.lang.IllegalArgumentException  NO 
(1813, 1): $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("YEAR out of range: \u0001")  NO 
(1813, 2): specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack4)  NO 
(1813, 3): throw $stack3  NO 
(1904, 0): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  NO 
(1822, 0): $stack10 = new java.lang.IllegalArgumentException  NO 
(1913, 0): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(1913, 1): return $stack10  NO 
(1905, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1732, 4): $stack3 = l0 % 400  NO 
(1732, 5): if $stack3 != 0 goto $stack4 = 0  NO 
(1732, 8): $stack4 = 0  NO 
(1865, 0): $stack37 = new java.lang.IllegalArgumentException  NO 
(1824, 0): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1824, 1): $stack12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH exceeds month length in given year: \u0001")  NO 
(1824, 2): specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12)  NO 
(1824, 3): throw $stack10  NO 
(1907, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  NO 
(1924, 1): return 2  NO 
(1908, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  NO 
(1933, 0): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  NO 
(1933, 1): return 25  NO 
(1867, 0): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1867, 1): $stack39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day exceeds month length: \u0001")  NO 
(1867, 2): specialinvoke $stack37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39)  NO 
(1867, 3): throw $stack37  NO 
(1925, 1): return 5  NO 
(1909, 0): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  NO 
(1901, 0): $stack4 = new java.lang.StringBuilder  NO 
(1901, 1): specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()  NO 
(1926, 1): return 7  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the instructions which were covered will be shown: 

(1664, 0): $stack4 = lengthof l0  YES
(1664, 1): if l2 < $stack4 goto (branch)  YES
(1662, 0): return -1  YES
(1619, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1619, 1): if $stack1 != 0 goto $stack2 = 0  YES
(1619, 2): $stack2 = 1  YES
(1619, 3): goto [?= return $stack2]  YES
(1619, 4): $stack2 = 0  YES
(1619, 5): return $stack2  YES
(1675, 0): $stack9 = l0[l3]  YES
(1675, 1): $stack10 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>($stack9)  YES
(1609, 0): if l0 == null goto $stack1 = 0  YES
(1673, 0): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1675, 2): if $stack10 == 0 goto l3 = l3 + -1  YES
(1609, 1): $stack1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(l0)  YES
(1673, 1): $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.Class getComponentType()>()  YES
(1673, 2): $stack7 = virtualinvoke $stack6.<java.lang.Class: boolean isInstance(java.lang.Object)>(l1)  YES
(1609, 2): goto [?= return $stack1]  YES
(1673, 3): if $stack7 == 0 goto return -1  YES
(1574, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1609, 3): $stack1 = 0  YES
(1609, 4): return $stack1  YES
(1574, 1): return  YES
(1669, 0): $stack12 = l0[l3]  YES
(1669, 1): if $stack12 != null goto l3 = l3 + -1  YES
(1667, 0): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1665, 0): $stack14 = lengthof l0  YES
(1665, 1): l2 = $stack14 - 1  YES
(1630, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1661, 0): if l0 == null goto return -1  YES
(1630, 1): return $stack1  YES
(1661, 1): if l2 >= 0 goto $stack4 = lengthof l0  YES
(1680, 0): return -1  YES
(1676, 0): return l3  YES
(1674, 0): l3 = l3 + -1  YES
(1674, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1674, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1641, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1641, 1): return $stack1  YES
(1668, 0): l3 = l3 + -1  YES
(1668, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1668, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1668, 2): goto [?= return -1]  YES

In the following all of the instructions which were not covered will be shown: 

(1579, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(1579, 1): <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(1579, 2): return  NO 
(1670, 0): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the instructions which were covered will be shown: 

(12, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(12, 1): return  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the instructions which were covered will be shown: 

(192, 0): return 0  YES
(213, 0): l2 = l2 + 1  YES
(213, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(213, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(213, 2): if l2 >= $stack4 goto return 1  YES
(81, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(176, 0): l4 = 0  YES
(172, 0): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(168, 0): l5 = l5 + 1  YES
(168, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(168, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(168, 2): if l5 >= $stack14 goto (branch)  YES
(222, 0): return 1  YES
(218, 0): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(57, 0): $stack1 = new java.lang.IllegalArgumentException  YES
(218, 1): $stack7 = l1[l2]  YES
(185, 0): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(57, 1): $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l0)  YES
(152, 0): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(218, 2): $stack9 = virtualinvoke $stack8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack7)  YES
(185, 1): if $stack19 <= 4 goto l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(57, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  YES
(218, 3): $stack10 = virtualinvoke $stack9.<java.util.regex.Matcher: boolean matches()>()  YES
(57, 3): throw $stack1  YES
(214, 0): $stack5 = l1[l2]  YES
(218, 4): if $stack10 != 0 goto l2 = l2 + 1  YES
(214, 1): $stack6 = virtualinvoke $stack5.<java.lang.String: boolean isEmpty()>()  YES
(214, 2): if $stack6 == 0 goto $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(148, 0): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(115, 0): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(148, 1): if $stack10 == 0 goto $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(115, 1): l1 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)  YES
(144, 0): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(169, 0): l6 = l2[l5]  YES
(103, 0): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(198, 0): l3#27 = l3#27 + 1  YES
(190, 0): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(219, 0): return 0  YES
(186, 0): return 0  YES
(153, 0): if l1 == 0 goto $stack13 = lengthof l2  YES
(54, 0): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(149, 0): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(116, 0): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(149, 1): if $stack11 == 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(116, 1): if $stack7 == 0 goto return 0  YES
(178, 0): $stack17 = lengthof l2  YES
(145, 0): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(178, 1): $stack18 = $stack17 - 1  YES
(178, 2): if l5 != $stack18 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(178, 3): $stack24 = virtualinvoke l6.<java.lang.String: boolean contains(java.lang.CharSequence)>(".")  YES
(178, 4): if $stack24 == 0 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(170, 0): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(265, 0): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(170, 1): if $stack16 == 0 goto l4 = 0  YES
(265, 1): if $stack9 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(104, 0): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232, 0): if l0 == 47 goto $stack1 = 1  YES
(265, 2): $stack32 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(42)  YES
(232, 1): if l0 != 92 goto $stack1 = 0  YES
(265, 3): if $stack32 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(166, 0): l3#27 = 0  YES
(100, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(232, 4): $stack1 = 0  YES
(232, 5): return $stack1  YES
(249, 0): return l0  YES
(216, 0): $stack13 = lengthof l1  YES
(216, 1): $stack14 = $stack13 - 1  YES
(216, 2): if l2 != $stack14 goto $stack15 = 0  YES
(117, 0): return 0  YES
(245, 0): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(216, 3): $stack15 = 1  YES
(84, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(245, 1): if $stack1 < 0 goto return l0  YES
(212, 0): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(216, 4): goto [?= return $stack15]  YES
(84, 1): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: int indexOfLastSeparator(java.lang.String)>(l0)  YES
(51, 0): if l0 != 47 goto (branch)  YES
(84, 2): $stack3 = $stack2 + 1  YES
(216, 6): return $stack15  YES
(84, 3): $stack4 = virtualinvoke $stack1.<java.lang.String: java.lang.String substring(int)>($stack3)  YES
(84, 4): return $stack4  YES
(14, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(14, 1): return  YES
(171, 0): l4 = l4 + 1  YES
(266, 0): $stack39 = newarray (java.lang.String)[1]  YES
(266, 1): $stack39[0] = l0  YES
(105, 0): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(266, 2): return $stack39  YES
(105, 1): return $stack5  YES
(200, 0): if l3#27 > 8 goto $stack15 = 0  YES
(167, 0): l4 = 0  YES
(200, 1): if l3#27 >= 8 goto $stack15 = 1  YES
(200, 2): if l1 == 0 goto $stack15 = 0  YES
(163, 0): $stack13 = lengthof l2  YES
(200, 5): $stack15 = 0  YES
(163, 1): if $stack13 <= 8 goto l3#27 = 0  YES
(200, 6): return $stack15  YES

In the following all of the instructions which were not covered will be shown: 

(52, 0): return 92  NO 
(285, 0): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(269, 0): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(154, 0): $stack28 = new java.util.ArrayList  NO 
(121, 0): l2 = l2 + 1  NO 
(154, 1): $stack29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(l2)  NO 
(121, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(121, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  NO 
(154, 2): specialinvoke $stack28.<java.util.ArrayList: void <init>(java.util.Collection)>($stack29)  NO 
(55, 0): return 47  NO 
(270, 0): $stack11 = new java.util.ArrayList  NO 
(270, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  NO 
(287, 0): l4 = l8  NO 
(155, 0): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(122, 0): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(155, 1): if $stack30 == 0 goto $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(271, 0): $stack12 = new java.lang.StringBuilder  NO 
(271, 1): specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>()  NO 
(123, 0): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(272, 0): l4 = 0  NO 
(173, 0): return 0  NO 
(289, 0): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(289, 1): if $stack13 == 0 goto $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(157, 0): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(124, 0): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(157, 1): goto [?= $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>]  NO 
(273, 0): l7 = l7 + 1  NO 
(273, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(273, "comp5111.assignment.cut.Subject$FilenameTasks", 2)]  NO 
(273, 2): if l7 >= l6 goto $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(273, 3): l8 = l1[l7]  NO 
(42, 0): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  NO 
(42, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN> = $stack2  NO 
(42, 2): return  NO 
(290, 0): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(290, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack17)  NO 
(158, 0): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(125, 0): return 0  NO 
(158, 1): if $stack31 == 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(158, 2): $stack36 = interfaceinvoke $stack28.<java.util.List: boolean isEmpty()>()  NO 
(158, 3): if $stack36 != 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(274, 0): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(274, 1): if l8 != 42 goto virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(159, 0): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(275, 0): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275, 1): if $stack20 == 0 goto (branch)  NO 
(193, 0): goto [?= (branch)]  NO 
(276, 0): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(276, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack26)  NO 
(293, 0): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(293, 1): $stack15 = virtualinvoke $stack11.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($stack14)  NO 
(293, 2): $stack16 = (java.lang.String[]) $stack15  NO 
(194, 0): if l7 < 0 goto return 0  NO 
(293, 3): return $stack16  NO 
(161, 0): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(194, 1): if l7 <= 65535 goto l3#27 = l3#27 + 1  NO 
(128, 0): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(161, 1): $stack33 = interfaceinvoke $stack28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack32)  NO 
(128, 1): if $stack11 <= 1 goto l2 = l2 + 1  NO 
(161, 2): l2 = (java.lang.String[]) $stack33  NO 
(128, 2): $stack14 = virtualinvoke l3.<java.lang.String: boolean startsWith(java.lang.String)>("0")  NO 
(128, 3): if $stack14 == 0 goto l2 = l2 + 1  NO 
(277, 0): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(145, 1): $stack49 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>("::")  NO 
(145, 2): $stack50 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String)>("::")  NO 
(145, 3): if $stack49 == $stack50 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(195, 0): return 0  NO 
(129, 0): return 0  NO 
(30, 0): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  NO 
(30, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN> = $stack1  NO 
(179, 0): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(146, 0): return 0  NO 
(179, 1): if $stack27 != 0 goto l3#27 = l3#27 + 2  NO 
(279, 0): if l8 != 63 goto (branch)  NO 
(246, 0): $stack2 = new java.lang.IllegalArgumentException  NO 
(246, 1): specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it")  NO 
(180, 0): return 0  NO 
(246, 2): throw $stack2  NO 
(164, 0): return 0  NO 
(280, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(280, 1): goto [?= l4 = l8]  NO 
(82, 0): return null  NO 
(148, 2): $stack45 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(148, 3): if $stack45 == 0 goto return 0  NO 
(16, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(16, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(281, 0): if l4 == 42 goto l4 = l8  NO 
(182, 0): l3#27 = l3#27 + 2  NO 
(149, 2): $stack41 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(116, 2): $stack8 = virtualinvoke l1.<java.util.regex.Matcher: int groupCount()>()  NO 
(149, 3): if $stack41 != 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  NO 
(116, 3): if $stack8 == 4 goto l2 = 1  NO 
(232, 2): $stack1 = 1  NO 
(232, 3): goto [?= return $stack1]  NO 
(282, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(282, 1): goto [?= l4 = l8]  NO 
(183, 0): goto [?= l5 = l5 + 1]  NO 
(150, 0): return 0  NO 
(216, 5): $stack15 = 0  NO 
(134, 0): return 1  NO 
(101, 0): return -1  NO 
(200, 3): $stack15 = 1  NO 
(200, 4): goto [?= return $stack15]  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the instructions which were covered will be shown: 

(580, 3): specialinvoke $stack16.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack18)  YES
(448, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(580, 4): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack16)  YES
(415, 0): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(349, 0): l2 = l2 + 1  YES
(349, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(349, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(795, 0): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(663, 0): if l0 == null goto return 1  YES
(663, 1): if l1 != null goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(564, 0): $stack23 = l2[l6]  YES
(564, 1): l7 = staticinvoke <java.lang.Character: int getType(char)>($stack23)  YES
(878, 0): l0#4 = l2  YES
(878, 1): goto [?= return l0#4]  YES
(845, 0): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(845, 1): $stack12 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($stack11)  YES
(845, 2): if $stack12 == 0 goto l4 = l4 + 1  YES
(746, 0): return 0  YES
(614, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(581, 0): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(581, 1): $stack21 = interfaceinvoke $stack11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack20)  YES
(581, 2): $stack22 = (java.lang.String[]) $stack21  YES
(581, 3): return $stack22  YES
(416, 0): l2 = l2 + 1  YES
(416, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(416, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(350, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(350, 1): $stack5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack4)  YES
(350, 2): if $stack5 != 0 goto l2 = l2 + 1  YES
(664, 0): return 1  YES
(565, 0): if l7 != l5 goto (branch)  YES
(499, 0): return l0  YES
(846, 0): l2 = 1  YES
(615, 0): l3 = lengthof l1  YES
(417, 0): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(417, 1): $stack6 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack5)  YES
(351, 0): return 0  YES
(863, 0): if l0 == null goto return l0  YES
(417, 2): if $stack6 != 0 goto l2 = l2 + 1  YES
(863, 1): if l1 == null goto return l0  YES
(863, 2): if l2 != null goto l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(566, 0): goto [?= l6 = l6 + 1]  YES
(880, 0): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(748, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(748, 1): $stack5 = interfaceinvoke l1.<java.lang.CharSequence: int length()>()  YES
(748, 2): if $stack4 == $stack5 goto $stack6 = l0 instanceof java.lang.String  YES
(616, 0): l4 = l2 - 1  YES
(451, 0): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(418, 0): return 0  YES
(666, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(881, 0): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881, 1): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack16, l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001")  YES
(881, 2): goto [?= return l0#4]  YES
(749, 0): return 0  YES
(716, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(716, 1): return $stack1  YES
(617, 0): l5 = l3 - 1  YES
(452, 0): if l1 >= 2 goto l2 = l1 - 1  YES
(799, 0): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799, 1): if $stack4 == 0 goto (branch)  YES
(667, 0): l3 = l2 - 1  YES
(568, 0): if l1 == 0 goto $stack25 = new java.lang.String  YES
(535, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(568, 1): if l7 != 2 goto $stack25 = new java.lang.String  YES
(502, 0): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(535, 1): return $stack1  YES
(568, 2): if l5 != 1 goto $stack25 = new java.lang.String  YES
(502, 1): l1#2 = $stack5 - 1  YES
(849, 0): if l1 == 0 goto $stack8 = 0  YES
(849, 4): $stack8 = 0  YES
(849, 5): return $stack8  YES
(618, 0): l6 = l6 + 1  YES
(618, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(618, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(453, 0): return ""  YES
(833, 0): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(833, 1): if $stack5 != 0 goto return 0  YES
(800, 0): return l0  YES
(833, 2): $stack6 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(833, 3): if $stack6 != 1 goto l1 = 0  YES
(668, 0): l4 = lengthof l1  YES
(503, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(751, 0): $stack6 = l0 instanceof java.lang.String  YES
(751, 1): if $stack6 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(751, 2): $stack12 = l1 instanceof java.lang.String  YES
(751, 3): if $stack12 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(619, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(553, 0): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(421, 0): return 1  YES
(867, 0): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(834, 0): return 0  YES
(669, 0): l5 = l4 - 1  YES
(636, 0): return 0  YES
(752, 0): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(752, 1): return $stack15  YES
(620, 0): l8 = l8 + 1  YES
(620, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(620, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(455, 0): l2 = l1 - 1  YES
(323, 0): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(802, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(323, 1): $stack1 = 0  YES
(802, 1): $stack6 = l2 - 1  YES
(323, 2): goto [?= return $stack1]  YES
(323, 3): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(802, 2): $stack7 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack6)  YES
(323, 4): return $stack1  YES
(802, 3): $stack8 = virtualinvoke l1.<java.lang.String: int indexOf(int)>($stack7)  YES
(802, 4): if $stack8 == -1 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(670, 0): l6 = l6 + 1  YES
(670, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(670, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(505, 0): if l2 != 10 goto (branch)  YES
(885, 0): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(621, 0): $stack15 = l1[l8]  YES
(621, 1): if $stack15 != l7 goto l8 = l8 + 1  YES
(456, 0): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(869, 0): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(836, 0): l1 = 0  YES
(803, 0): l2 = l2 + -1  YES
(803, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(802, "comp5111.assignment.cut.Subject$StringTasks", 0)]  YES
(671, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(688, 0): return 1  YES
(556, 0): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(556, 1): if $stack9 == 0 goto l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(490, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(490, 1): if $stack3 == 0 goto $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(457, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(870, 0): return l0  YES
(837, 0): l2 = 0  YES
(672, 0): l8 = l8 + 1  YES
(672, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(672, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(887, 0): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(887, 1): $stack14 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($stack13, l1, l2)  YES
(887, 2): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>($stack12, l2, $stack14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001")  YES
(557, 0): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(557, 1): return $stack41  YES
(491, 0): return l0  YES
(458, 0): if l4 != 10 goto return l3  YES
(838, 0): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(673, 0): $stack13 = l1[l8]  YES
(673, 1): if $stack13 != l7 goto l8 = l8 + 1  YES
(839, 0): l4 = l4 + 1  YES
(839, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(839, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(806, 0): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(806, 1): return $stack5  YES
(575, 0): $stack25 = new java.lang.String  YES
(575, 1): $stack26 = l6 - l4  YES
(509, 0): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(575, 2): specialinvoke $stack25.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack26)  YES
(575, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack25)  YES
(377, 0): if l0 == null goto $stack2 = 1  YES
(377, 1): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(377, 2): if $stack1 != 0 goto $stack2 = 0  YES
(377, 3): $stack2 = 1  YES
(790, 0): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(377, 4): goto [?= return $stack2]  YES
(377, 5): $stack2 = 0  YES
(377, 6): return $stack2  YES
(559, 0): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(873, 0): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(840, 0): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(576, 0): l4 = l6  YES
(510, 0): l1#2 = l1#2 + 1  YES
(890, 0): return l0#4  YES
(345, 0): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(791, 0): if l2 != 0 goto (branch)  YES
(560, 0): $stack11 = new java.util.ArrayList  YES
(560, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  YES
(494, 0): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(494, 1): if $stack4 != 1 goto $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(461, 0): return l3  YES
(742, 0): if l0 != l1 goto (branch)  YES
(412, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(412, 1): if $stack3 == 0 goto l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(346, 0): if l1 != 0 goto l2 = 0  YES
(792, 0): return l0  YES
(561, 0): l4 = 0  YES
(495, 0): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(875, 0): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(875, 1): l6 = l3 + $stack10  YES
(297, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(297, 1): return  YES
(743, 0): return 1  YES
(611, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(611, 1): if $stack9 != 0 goto return 0  YES
(578, 0): l5 = l7  YES
(611, 2): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isEmpty(char[])>(l1)  YES
(512, 0): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(611, 3): if $stack10 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(512, 1): return $stack7  YES
(413, 0): return 0  YES
(347, 0): return 1  YES
(562, 0): $stack12 = l2[0]  YES
(562, 1): l5 = staticinvoke <java.lang.Character: int getType(char)>($stack12)  YES
(496, 0): if l1 == 13 goto return ""  YES
(496, 1): if l1 != 10 goto return l0  YES
(843, 0): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843, 1): $stack10 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($stack9)  YES
(843, 2): if $stack10 == 0 goto $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(612, 0): return 0  YES
(563, 0): l6 = l6 + 1  YES
(563, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(563, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(563, 2): $stack15 = $stack14 - 1  YES
(563, 3): if l6 >= $stack15 goto $stack16 = new java.lang.String  YES
(877, 0): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(877, 1): if l4 != $stack11 goto (branch)  YES
(745, 0): if l0 == null goto return 0  YES
(745, 1): if l1 != null goto $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580, 0): $stack16 = new java.lang.String  YES
(580, 1): $stack17 = lengthof l2  YES
(580, 2): $stack18 = $stack17 - l4  YES

In the following all of the instructions which were not covered will be shown: 

(630, 0): if l6 >= l4 goto l8 = l8 + 1  NO 
(630, 1): $stack19 = l8 + 1  NO 
(630, 2): $stack21 = l1[$stack19]  NO 
(630, 3): $stack20 = l6 + 1  NO 
(630, 4): $stack22 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack20)  NO 
(630, 5): if $stack21 != $stack22 goto l8 = l8 + 1  NO 
(680, 0): return 0  NO 
(449, 0): return null  NO 
(796, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(796, 1): $stack13 = l2 - 1  NO 
(796, 2): $stack14 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack13)  NO 
(796, 3): $stack15 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack14)  NO 
(796, 4): if $stack15 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(631, 0): return 1  NO 
(797, 0): l2 = l2 + -1  NO 
(797, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(796, "comp5111.assignment.cut.Subject$StringTasks", 0)]  NO 
(682, 0): if l6 >= l3 goto l8 = l8 + 1  NO 
(682, 1): $stack17 = l8 + 1  NO 
(682, 2): $stack19 = l1[$stack17]  NO 
(682, 3): $stack18 = l6 + 1  NO 
(682, 4): $stack20 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack18)  NO 
(682, 5): if $stack19 != $stack20 goto l8 = l8 + 1  NO 
(864, 0): return l0  NO 
(683, 0): return 0  NO 
(849, 1): if l2 == 0 goto $stack8 = 0  NO 
(849, 2): $stack8 = 1  NO 
(849, 3): goto [?= return $stack8]  NO 
(354, 0): return 1  NO 
(569, 0): l8 = l6 - 1  NO 
(570, 0): if l8 == l4 goto (branch)  NO 
(554, 0): return null  NO 
(571, 0): $stack38 = new java.lang.String  NO 
(571, 1): $stack39 = l8 - l4  NO 
(571, 2): specialinvoke $stack38.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack39)  NO 
(571, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack38)  NO 
(572, 0): l4 = l8  NO 
(506, 0): $stack11 = l1#2 - 1  NO 
(506, 1): $stack12 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack11)  NO 
(506, 2): if $stack12 != 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  NO 
(622, 0): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(622, 1): if $stack18 != 0 goto (branch)  NO 
(507, 0): l1#2 = l1#2 + -1  NO 
(507, 1): goto [?= $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)]  NO 
(755, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(458, 1): $stack8 = l2 - 1  NO 
(458, 2): $stack9 = virtualinvoke l3.<java.lang.String: char charAt(int)>($stack8)  NO 
(458, 3): if $stack9 != 13 goto return l3  NO 
(574, 0): goto [?= l5 = l7]  NO 
(756, 0): l3 = l3 + 1  NO 
(756, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(756, "comp5111.assignment.cut.Subject$StringTasks", 1)]  NO 
(624, 0): return 1  NO 
(459, 0): $stack11 = l2 - 1  NO 
(459, 1): $stack12 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int,int)>(0, $stack11)  NO 
(459, 2): return $stack12  NO 
(674, 0): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(674, 1): if $stack16 != 0 goto (branch)  NO 
(757, 0): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 1): $stack9 = interfaceinvoke l1.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 2): if $stack8 == $stack9 goto l3 = l3 + 1  NO 
(840, 1): if l2 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(758, 0): return 0  NO 
(626, 0): if l8 != l5 goto (branch)  NO 
(841, 0): return 1  NO 
(676, 0): return 0  NO 
(628, 0): return 1  NO 
(678, 0): if l8 != l5 goto (branch)  NO 
(761, 0): return 1  NO 
(497, 0): return ""  NO 
(844, 0): l1 = 1  NO 
(844, 1): goto [?= l4 = l4 + 1]  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the instructions which were covered will be shown: 

(1393, 0): if l0 != l1 goto (branch)  YES
(1396, 3): $stack2 = -1  YES
(1396, 4): return $stack2  YES
(1381, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1381, 1): return  YES
(1396, 0): if l0 == 0 goto $stack2 = -1  YES
(1396, 1): $stack2 = 1  YES
(1396, 2): goto [?= return $stack2]  YES
(1394, 0): return 0  YES

In the following all of the instructions which were not covered will be shown: 




Coverage of Test Suite: comp5111.assignment.cut.RegressionTest3

comp5111.assignment.cut.Subject$NumberTasks
133 Instructions from a total of 351 Instructions were covered.
Percentage: 37.89173789173789%

comp5111.assignment.cut.Subject$CharTasks
42 Instructions from a total of 46 Instructions were covered.
Percentage: 91.30434782608695%

comp5111.assignment.cut.Subject$GregorianTasks
119 Instructions from a total of 146 Instructions were covered.
Percentage: 81.5068493150685%

comp5111.assignment.cut.Subject$ArrayTasks
41 Instructions from a total of 49 Instructions were covered.
Percentage: 83.6734693877551%

comp5111.assignment.cut.Subject
2 Instructions from a total of 2 Instructions were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
95 Instructions from a total of 204 Instructions were covered.
Percentage: 46.568627450980394%

comp5111.assignment.cut.Subject$StringTasks
207 Instructions from a total of 295 Instructions were covered.
Percentage: 70.16949152542372%

comp5111.assignment.cut.Subject$BooleanTasks
9 Instructions from a total of 9 Instructions were covered.
Percentage: 100.0%

Overall Statement Coverage: 58.802177858439194%



In the following part you can see which instructions were executed. Before every instruction you can see two numbers
in the form of (x,y), for Example (1,5). This indicates that the following Instruction can be found on line x of the Java code. 
y denotes that it is the y-th Jimple Instruction generated from the corresponding Java line.
After each listed instructions you can find a NO if the instruction wasn't executed and a YES if it was. 


comp5111.assignment.cut.Subject$NumberTasks


In the following all of the instructions which were covered will be shown: 

(1340, 0): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1340, 1): if $stack5 != 45 goto $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1299, 0): $stack2 = new java.math.BigDecimal  YES
(1299, 1): specialinvoke $stack2.<java.math.BigDecimal: void <init>(java.lang.String)>(l0)  YES
(1010, 0): $stack60 = l2 - 1  YES
(1010, 1): l12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, $stack60)  YES
(1200, 0): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(944, 0): l4 = 0  YES
(1258, 0): l2 = 10  YES
(969, 0): $stack19 = l2 - 1  YES
(969, 1): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack19)  YES
(1184, 0): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1118, 0): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 3): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 4): return $stack5  YES
(1267, 0): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1267, 1): if $stack8 != 0 goto l2 = 16  YES
(1234, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1267, 2): $stack12 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", l1)  YES
(945, 0): l7 = l7 + 1  YES
(1267, 3): if $stack12 == 0 goto $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(945, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(945, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  YES
(945, 2): if l7 >= l6 goto (branch)  YES
(945, 3): l8 = $stack16[l7]  YES
(1292, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1259, 0): l3 = 0  YES
(1003, 0): if l11 == 0 goto (branch)  YES
(937, 0): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937, 1): if $stack15 == 0 goto $stack16 = newarray (java.lang.String)[3]  YES
(1350, 0): l2 = 0  YES
(1251, 0): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1334, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1334, 1): if $stack1 == 0 goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1012, 0): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(979, 0): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(946, 0): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(979, 1): if $stack25 != 0 goto $stack119 = 0  YES
(946, 1): if $stack138 == 0 goto l7 = l7 + 1  YES
(979, 2): if l5#11 == 46 goto $stack119 = 0  YES
(979, 3): $stack119 = 1  YES
(1359, 0): if l4 != 0 goto l3 = l3 + 1  YES
(979, 4): goto [?= l11 = $stack119]  YES
(1359, 1): $stack9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1359, 2): $stack10 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack9)  YES
(979, 6): l11 = $stack119  YES
(1260, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1359, 3): if $stack10 != 0 goto l3 = l3 + 1  YES
(1004, 0): if l10 <= -1 goto l8 = null  YES
(938, 0): $stack151 = new java.lang.NumberFormatException  YES
(938, 1): specialinvoke $stack151.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(938, 2): throw $stack151  YES
(1351, 0): l3 = l3 + 1  YES
(1351, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1351, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  YES
(1351, 2): if l3 >= $stack5 goto return 1  YES
(1219, 0): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1335, 0): return 0  YES
(980, 0): if l9 <= -1 goto (branch)  YES
(1360, 0): return 0  YES
(1261, 0): if l4 != 45 goto (branch)  YES
(1352, 0): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1352, 1): if $stack6 != 46 goto $stack13 = 0  YES
(1352, 4): $stack13 = 0  YES
(1352, 5): l4 = $stack13  YES
(1377, 0): $stack2 = l0 - l1  YES
(1377, 1): return $stack2  YES
(1278, 0): $stack9 = new java.math.BigInteger  YES
(1278, 1): $stack10 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l1)  YES
(1278, 2): specialinvoke $stack9.<java.math.BigInteger: void <init>(java.lang.String,int)>($stack10, l2)  YES
(1270, 0): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1270, 1): if $stack13 == 0 goto $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1237, 0): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(973, 0): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(1353, 0): if $stack13 == 0 goto (branch)  YES
(1254, 0): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254, 1): if $stack6 == 0 goto l1 = 0  YES
(1337, 0): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1337, 1): $stack3 = $stack2 - 1  YES
(1337, 2): $stack4 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack3)  YES
(1337, 3): if $stack4 != 46 goto $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1296, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296, 1): if $stack1 == 0 goto $stack2 = new java.math.BigDecimal  YES
(1007, 0): l8 = null  YES
(974, 0): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(1197, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941, 0): $stack16 = newarray (java.lang.String)[3]  YES
(974, 1): $stack23 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(69)  YES
(941, 1): $stack16[0] = "0x"  YES
(974, 2): $stack24 = $stack22 + $stack23  YES
(941, 2): $stack16[1] = "0X"  YES
(974, 3): l10 = $stack24 + 1  YES
(941, 3): $stack16[2] = "#"  YES
(1255, 0): $stack25 = new java.lang.NumberFormatException  YES
(999, 0): if $stack119 == 0 goto $stack101 = l2  YES
(1255, 1): specialinvoke $stack25.<java.lang.NumberFormatException: void <init>(java.lang.String)>("An empty string is not a valid number")  YES
(999, 1): $stack101 = l2 - 1  YES
(1255, 2): throw $stack25  YES
(999, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)]  YES
(900, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(999, 4): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)  YES
(900, 1): return  YES
(1346, 0): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1313, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1346, 1): return $stack6  YES
(1313, 1): return $stack1  YES
(1181, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1115, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1297, 0): $stack3 = new java.lang.NumberFormatException  YES
(1264, 0): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1297, 1): specialinvoke $stack3.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(1297, 2): throw $stack3  YES
(942, 0): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(934, 0): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1058, 0): $stack88 = new java.lang.NumberFormatException  YES
(1058, 1): $stack89 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  YES
(992, 0): if l10 <= -1 goto (branch)  YES
(1058, 2): specialinvoke $stack88.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack89)  YES
(1215, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1058, 3): throw $stack88  YES
(1116, 0): if l2 == 45 goto $stack7 = 1  YES
(1116, 1): if l2 != 43 goto $stack7 = 0  YES
(1273, 0): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1273, 1): if $stack14 == 0 goto $stack9 = new java.math.BigInteger  YES
(1116, 4): $stack7 = 0  YES
(951, 0): if l4 <= 0 goto $stack19 = l2 - 1  YES
(943, 0): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(943, 1): if $stack18 == 43 goto $stack145 = 1  YES
(943, 2): $stack144 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1356, 0): if l2 <= 1 goto (branch)  YES
(943, 3): if $stack144 != 45 goto $stack145 = 0  YES
(1257, 0): l1 = 0  YES
(943, 6): $stack145 = 0  YES
(1001, 0): l7#20 = null  YES
(943, 7): l3 = $stack145  YES

In the following all of the instructions which were not covered will be shown: 

(993, 0): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1026, 1): $stack63 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1092, 3): $stack33 = $stack32 cmpl 0.0  NO 
(960, 0): l6 = l2 - l4  NO 
(1026, 2): specialinvoke $stack62.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack63)  NO 
(1092, 4): if $stack33 != 0 goto l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1026, 3): throw $stack62  NO 
(1092, 5): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1092, 6): if $stack38 == 0 goto (branch)  NO 
(1274, 0): l2 = 8  NO 
(1076, 0): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1076, 1): return $stack157  NO 
(1357, 0): return 0  NO 
(1093, 0): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(994, 0): $stack105 = new java.lang.NumberFormatException  NO 
(961, 0): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(994, 1): $stack106 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(961, 1): if l6 != 16 goto (branch)  NO 
(994, 2): specialinvoke $stack105.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack106)  NO 
(961, 2): if l5#11 <= 55 goto (branch)  NO 
(994, 3): throw $stack105  NO 
(1341, 0): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1341, 1): if $stack7 != 1 goto $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1275, 0): l1 = l1 + 1  NO 
(1044, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1160, 0): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1094, 0): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1094, 1): $stack36 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($stack35)  NO 
(1094, 2): $stack37 = virtualinvoke l14.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($stack36)  NO 
(1094, 3): if $stack37 != 0 goto return l14  NO 
(962, 0): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962, 1): return $stack122  NO 
(1342, 0): return 0  NO 
(1045, 0): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1045, 1): if $stack76 != 0 goto (branch)  NO 
(1045, 2): $stack78 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1045, 3): $stack79 = $stack78 cmpl 0.0  NO 
(1045, 4): if $stack79 != 0 goto return l13#69  NO 
(1045, 5): $stack80 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1045, 6): if $stack80 == 0 goto (branch)  NO 
(979, 5): $stack119 = 0  NO 
(1293, 0): return null  NO 
(1161, 0): return 1  NO 
(1095, 0): return l13#69  NO 
(996, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(996, 1): goto [?= l7#20 = null]  NO 
(1046, 0): return l13#69  NO 
(947, 0): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(947, 1): $stack142 = $stack141 + l3  NO 
(947, 2): l4 = 0 + $stack142  NO 
(1063, 0): if l10 <= -1 goto l8 = null  NO 
(1030, 0): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1063, 1): $stack55 = l2 - 1  NO 
(1063, 2): if l10 >= $stack55 goto l8 = null  NO 
(964, 0): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(964, 1): if l6 != 8 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(964, 2): if l5#11 <= 55 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1344, 0): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1344, 1): return $stack8  NO 
(1080, 0): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1080, 1): return $stack155  NO 
(981, 0): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(948, 0): goto [?= (branch)]  NO 
(1262, 0): l3 = 1  NO 
(1163, 0): l1 = l1 + -1  NO 
(1163, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1163, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  NO 
(1097, 0): return l14  NO 
(1163, 2): if l1 < 0 goto return 1  NO 
(1064, 0): $stack58 = l10 + 1  NO 
(1031, 0): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1064, 1): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>($stack58)  NO 
(1031, 1): if $stack74 != 0 goto (branch)  NO 
(1064, 2): goto [?= (branch)]  NO 
(965, 0): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1031, 2): $stack82 = virtualinvoke l13#63.<java.lang.Float: float floatValue()>()  NO 
(965, 1): return $stack123  NO 
(1031, 3): $stack83 = $stack82 cmpl 0.0F  NO 
(1031, 4): if $stack83 != 0 goto return l13#63  NO 
(1031, 5): $stack84 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1031, 6): if $stack84 == 0 goto (branch)  NO 
(1279, 0): if l3 == 0 goto $stack11 = $stack9  NO 
(1279, 1): $stack11 = virtualinvoke $stack9.<java.math.BigInteger: java.math.BigInteger negate()>()  NO 
(1279, 2): goto [?= return $stack11]  NO 
(1279, 3): $stack11 = $stack9  NO 
(1279, 4): return $stack11  NO 
(1015, 0): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 0): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(1015, 1): if l8 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 1): if l10 <= l2 goto $stack116 = l9 + 1  NO 
(1263, 0): l1 = 1  NO 
(1263, 1): goto [?= $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)]  NO 
(1164, 0): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1164, 1): if $stack3 == 48 goto l1 = l1 + -1  NO 
(999, 3): $stack101 = l2  NO 
(1148, 0): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1148, 1): if $stack2 == 0 goto $stack4 = 0  NO 
(1148, 2): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l1)  NO 
(1148, 3): if $stack3 == 0 goto $stack4 = 0  NO 
(1148, 4): $stack4 = 1  NO 
(983, 0): $stack114 = new java.lang.NumberFormatException  NO 
(1148, 5): goto [?= return $stack4]  NO 
(983, 1): $stack115 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1148, 6): $stack4 = 0  NO 
(983, 2): specialinvoke $stack114.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack115)  NO 
(1148, 7): return $stack4  NO 
(983, 3): throw $stack114  NO 
(1363, 0): return 1  NO 
(1198, 0): return null  NO 
(1165, 0): return 0  NO 
(1066, 0): l8 = null  NO 
(967, 0): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(967, 1): return $stack124  NO 
(1182, 0): return null  NO 
(1050, 0): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1116, 2): $stack7 = 1  NO 
(1017, 0): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1116, 3): goto [?= (branch)]  NO 
(1017, 1): if $stack65 != 0 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 2): $stack68 = virtualinvoke l12.<java.lang.String: char charAt(int)>(0)  NO 
(1017, 3): if $stack68 != 45 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 4): $stack70 = virtualinvoke l12.<java.lang.String: java.lang.String substring(int)>(1)  NO 
(1017, 5): $stack71 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>($stack70)  NO 
(1017, 6): if $stack71 != 0 goto $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1017, 7): $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 8): if $stack66 == 0 goto $stack62 = new java.lang.NumberFormatException  NO 
(1265, 0): l1 = 1  NO 
(1034, 0): return l13#63  NO 
(935, 0): return null  NO 
(1216, 0): return null  NO 
(985, 0): $stack116 = l9 + 1  NO 
(952, 0): l5#11 = 0  NO 
(985, 1): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack116, l10)  NO 
(985, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)]  NO 
(1299, 2): return $stack2  NO 
(1200, 1): return $stack1  NO 
(1101, 0): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1068, 0): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1068, 1): if l8 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1184, 1): return $stack1  NO 
(1085, 0): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1118, 1): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(1, l1)  NO 
(1052, 0): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1118, 2): goto [?= return $stack5]  NO 
(1019, 0): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1052, 1): return $stack77  NO 
(1019, 1): return $stack67  NO 
(953, 0): l6 = l6 + 1  NO 
(953, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(953, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  NO 
(1168, 0): return 1  NO 
(1102, 0): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1102, 1): return $stack31  NO 
(1086, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(954, 0): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(1268, 0): l2 = 16  NO 
(1235, 0): return null  NO 
(1004, 1): $stack90 = l2 - 1  NO 
(1004, 2): if l10 >= $stack90 goto l8 = null  NO 
(1252, 0): return null  NO 
(1219, 1): return $stack1  NO 
(1087, 0): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1087, 1): if $stack29 != 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(988, 0): $stack107 = l9 + 1  NO 
(955, 0): if l5#11 == 48 goto l4 = l4 + 1  NO 
(988, 1): if $stack119 == 0 goto $stack110 = l2  NO 
(988, 2): $stack110 = l2 - 1  NO 
(988, 3): goto [?= l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)]  NO 
(988, 4): $stack110 = l2  NO 
(988, 5): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)  NO 
(1269, 0): l1 = l1 + 2  NO 
(1269, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1071, 0): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1071, 1): return $stack54  NO 
(1005, 0): $stack98 = l10 + 1  NO 
(1005, 1): $stack97 = l2 - 1  NO 
(1005, 2): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack98, $stack97)  NO 
(1005, 3): goto [?= $stack60 = l2 - 1]  NO 
(1352, 2): $stack13 = 1  NO 
(1352, 3): goto [?= l4 = $stack13]  NO 
(1088, 0): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1088, 1): $stack43 = $stack42 cmpl 0.0F  NO 
(1088, 2): if $stack43 != 0 goto $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1088, 3): $stack48 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(956, 0): goto [?= l6 = l2 - l4]  NO 
(1088, 4): if $stack48 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1237, 1): return $stack1  NO 
(1039, 0): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1089, 0): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1089, 1): $stack45 = virtualinvoke l13#69.<java.lang.Double: java.lang.String toString()>()  NO 
(1023, 0): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1089, 2): $stack46 = virtualinvoke $stack44.<java.lang.String: boolean equals(java.lang.Object)>($stack45)  NO 
(990, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(1023, 1): return $stack164  NO 
(1089, 3): if $stack46 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(990, 1): goto [?= (branch)]  NO 
(1271, 0): l2 = 16  NO 
(1354, 0): l2 = l2 + 1  NO 
(1090, 0): return l12#81  NO 
(958, 0): l4 = l4 + 1  NO 
(1338, 0): return 0  NO 
(1272, 0): l1 = l1 + 1  NO 
(1272, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1273, 2): $stack19 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1273, 3): $stack20 = l1 + 1  NO 
(1273, 4): if $stack19 <= $stack20 goto $stack9 = new java.math.BigInteger  NO 
(943, 4): $stack145 = 1  NO 
(943, 5): goto [?= l3 = $stack145]  NO 
(1092, 0): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1092, 1): if $stack30 != 0 goto (branch)  NO 
(1026, 0): $stack62 = new java.lang.NumberFormatException  NO 
(1092, 2): $stack32 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the instructions which were covered will be shown: 

(1441, 0): if l0 == null goto $stack2 = l1  YES
(1569, 0): $stack2 = l0 - l1  YES
(1536, 0): if l0 < 65 goto $stack1 = 0  YES
(1441, 1): $stack2 = virtualinvoke l0.<java.lang.Character: char charValue()>()  YES
(1569, 1): return $stack2  YES
(1441, 2): goto [?= return $stack2]  YES
(1536, 1): if l0 > 90 goto $stack1 = 0  YES
(1441, 4): return $stack2  YES
(1536, 4): $stack1 = 0  YES
(1536, 5): return $stack1  YES
(1400, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1400, 1): return  YES
(1460, 0): if l0 >= 128 goto $stack1 = 0  YES
(1555, 0): if l0 < 97 goto $stack1 = 0  YES
(1460, 1): $stack1 = 1  YES
(1460, 2): goto [?= return $stack1]  YES
(1555, 1): if l0 > 122 goto $stack1 = 0  YES
(1555, 2): $stack1 = 1  YES
(1460, 4): return $stack1  YES
(1555, 3): goto [?= return $stack1]  YES
(1555, 4): $stack1 = 0  YES
(1555, 5): return $stack1  YES
(1479, 0): if l0 < 32 goto $stack1 = 0  YES
(1479, 1): if l0 >= 127 goto $stack1 = 0  YES
(1479, 2): $stack1 = 1  YES
(1479, 3): goto [?= return $stack1]  YES
(1479, 4): $stack1 = 0  YES
(1479, 5): return $stack1  YES
(1498, 0): if l0 < 32 goto $stack1 = 1  YES
(1498, 1): if l0 != 127 goto $stack1 = 0  YES
(1498, 2): $stack1 = 1  YES
(1498, 3): goto [?= return $stack1]  YES
(1498, 4): $stack1 = 0  YES
(1498, 5): return $stack1  YES
(1517, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES
(1517, 1): if $stack1 != 0 goto $stack3 = 1  YES
(1517, 2): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaLower(char)>(l0)  YES
(1517, 3): if $stack2 == 0 goto $stack3 = 0  YES
(1517, 4): $stack3 = 1  YES
(1517, 5): goto [?= return $stack3]  YES
(1517, 6): $stack3 = 0  YES
(1517, 7): return $stack3  YES

In the following all of the instructions which were not covered will be shown: 

(1441, 3): $stack2 = l1  NO 
(1536, 2): $stack1 = 1  NO 
(1536, 3): goto [?= return $stack1]  NO 
(1460, 3): $stack1 = 0  NO 


comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the instructions which were covered will be shown: 

(1761, 0): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1728, 0): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1761, 1): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: boolean isLeapYear(int)>(l0)  YES
(1761, 2): if $stack6 == 0 goto $stack7 = 28  YES
(1728, 1): if l0 >= 2100 goto $stack1 = l0 & 3  YES
(1761, 3): $stack7 = 29  YES
(1761, 4): goto [?= return $stack7]  YES
(1761, 6): return $stack7  YES
(1819, 0): $stack7 = new java.lang.IllegalArgumentException  YES
(1819, 1): $stack8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH out of range: \u0001")  YES
(1819, 2): specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack8)  YES
(1819, 3): throw $stack7  YES
(1902, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  YES
(1927, 0): if l0 != 6 goto (branch)  YES
(1894, 0): return l7  YES
(1927, 1): return 10  YES
(1861, 0): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1861, 1): if l2 <= 31 goto $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1762, 0): $stack4 = new java.lang.IllegalArgumentException  YES
(1762, 1): $stack5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid month: \u0001")  YES
(1762, 2): specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack5)  YES
(1762, 3): throw $stack4  YES
(1878, 0): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1812, 0): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1812, 1): if l0 <= 999999999 goto (branch)  YES
(1903, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1870, 0): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1928, 0): if l0 != 7 goto (branch)  YES
(1928, 1): return 12  YES
(1862, 0): $stack8 = new java.lang.IllegalArgumentException  YES
(1862, 1): $stack9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day out of range: \u0001")  YES
(1862, 2): specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9)  YES
(1862, 3): throw $stack8  YES
(1887, 0): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1821, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1821, 1): if l2 <= $stack9 goto return  YES
(1912, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1879, 0): l4 = l4 + -1  YES
(1904, 0): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1871, 0): l4 = l0 % 100  YES
(1929, 0): if l0 != 8 goto (branch)  YES
(1929, 1): return 15  YES
(1888, 0): $stack14 = l2 + l3  YES
(1888, 1): $stack16 = $stack14 + l4  YES
(1888, 2): $stack15 = l4 / 4  YES
(1822, 0): $stack10 = new java.lang.IllegalArgumentException  YES
(1888, 3): $stack17 = $stack16 + $stack15  YES
(1888, 4): $stack19 = $stack17 + l6  YES
(1888, 5): $stack18 = 2 * l5  YES
(1888, 6): $stack20 = $stack19 - $stack18  YES
(1888, 7): l7 = $stack20 % 7  YES
(1913, 0): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  YES
(1880, 0): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1913, 1): return $stack10  YES
(1905, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  YES
(1872, 0): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1930, 0): if l0 != 9 goto (branch)  YES
(1930, 1): return 18  YES
(1864, 0): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1864, 1): if l2 <= $stack10 goto l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1732, 0): $stack1 = l0 & 3  YES
(1732, 1): if $stack1 == 0 goto $stack4 = 1  YES
(1732, 2): $stack2 = l0 % 100  YES
(1922, 0): if l0 != 1 goto (branch)  YES
(1732, 3): if $stack2 != 0 goto $stack4 = 1  YES
(1922, 1): return 28  YES
(1732, 6): $stack4 = 1  YES
(1732, 7): goto [?= return $stack4]  YES
(1732, 9): return $stack4  YES
(1881, 0): l4 = 99  YES
(1815, 0): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1815, 1): if l1 <= 12 goto (branch)  YES
(1931, 0): if l0 != 10 goto (branch)  YES
(1931, 1): return 20  YES
(1923, 0): if l0 != 2 goto (branch)  YES
(1890, 0): if l7 > 0 goto return l7  YES
(1824, 0): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  YES
(1824, 1): $stack12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH exceeds month length in given year: \u0001")  YES
(1824, 2): specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12)  YES
(1824, 3): throw $stack10  YES
(1882, 0): l5 = l5 + -1  YES
(1816, 0): $stack5 = new java.lang.IllegalArgumentException  YES
(1816, 1): $stack6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("MONTH out of range: \u0001")  YES
(1816, 2): specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack6)  YES
(1816, 3): throw $stack5  YES
(1684, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1684, 1): return  YES
(1907, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  YES
(1874, 0): if l4 >= 0 goto (branch)  YES
(1932, 0): if l0 != 11 goto (branch)  YES
(1932, 1): return 23  YES
(1924, 0): if l0 != 3 goto (branch)  YES
(1891, 0): l7 = l7 + 7  YES
(1924, 1): return 2  YES
(1759, 0): if l1 == 1 goto return 31  YES
(1759, 1): if l1 == 3 goto return 31  YES
(1759, 2): if l1 == 5 goto return 31  YES
(1759, 3): if l1 == 7 goto return 31  YES
(1759, 4): if l1 == 8 goto return 31  YES
(1759, 5): if l1 == 10 goto return 31  YES
(1759, 6): if l1 != 12 goto (branch)  YES
(1759, 7): return 31  YES
(1908, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  YES
(1875, 0): l4 = l4 + 100  YES
(1933, 0): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  YES
(1933, 1): return 25  YES
(1925, 0): if l0 != 4 goto (branch)  YES
(1760, 0): if l1 == 4 goto return 30  YES
(1760, 1): if l1 == 6 goto return 30  YES
(1760, 2): if l1 == 9 goto return 30  YES
(1760, 3): if l1 != 11 goto (branch)  YES
(1760, 4): return 30  YES
(1818, 0): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1818, 1): if l2 <= 31 goto $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1909, 0): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  YES
(1901, 0): $stack4 = new java.lang.StringBuilder  YES
(1901, 1): specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()  YES
(1926, 0): if l0 != 5 goto (branch)  YES
(1827, 0): return  YES

In the following all of the instructions which were not covered will be shown: 

(1761, 5): $stack7 = 28  NO 
(1910, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1935, 0): $stack1 = new java.lang.IllegalArgumentException  NO 
(1935, 1): $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Month out of range: \u0001")  NO 
(1935, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  NO 
(1935, 3): throw $stack1  NO 
(1729, 0): $stack7 = l0 & 3  NO 
(1729, 1): if $stack7 != 0 goto $stack8 = 0  NO 
(1729, 2): $stack8 = 1  NO 
(1729, 3): goto [?= return $stack8]  NO 
(1729, 4): $stack8 = 0  NO 
(1729, 5): return $stack8  NO 
(1813, 0): $stack3 = new java.lang.IllegalArgumentException  NO 
(1813, 1): $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("YEAR out of range: \u0001")  NO 
(1813, 2): specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack4)  NO 
(1813, 3): throw $stack3  NO 
(1732, 4): $stack3 = l0 % 400  NO 
(1732, 5): if $stack3 != 0 goto $stack4 = 0  NO 
(1732, 8): $stack4 = 0  NO 
(1865, 0): $stack37 = new java.lang.IllegalArgumentException  NO 
(1923, 1): return 31  NO 
(1867, 0): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1867, 1): $stack39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day exceeds month length: \u0001")  NO 
(1867, 2): specialinvoke $stack37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39)  NO 
(1867, 3): throw $stack37  NO 
(1925, 1): return 5  NO 
(1926, 1): return 7  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the instructions which were covered will be shown: 

(1664, 0): $stack4 = lengthof l0  YES
(1664, 1): if l2 < $stack4 goto (branch)  YES
(1662, 0): return -1  YES
(1619, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1619, 1): if $stack1 != 0 goto $stack2 = 0  YES
(1619, 2): $stack2 = 1  YES
(1619, 3): goto [?= return $stack2]  YES
(1619, 4): $stack2 = 0  YES
(1619, 5): return $stack2  YES
(1675, 0): $stack9 = l0[l3]  YES
(1675, 1): $stack10 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>($stack9)  YES
(1609, 0): if l0 == null goto $stack1 = 0  YES
(1673, 0): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1675, 2): if $stack10 == 0 goto l3 = l3 + -1  YES
(1609, 1): $stack1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(l0)  YES
(1673, 1): $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.Class getComponentType()>()  YES
(1609, 2): goto [?= return $stack1]  YES
(1673, 2): $stack7 = virtualinvoke $stack6.<java.lang.Class: boolean isInstance(java.lang.Object)>(l1)  YES
(1609, 3): $stack1 = 0  YES
(1673, 3): if $stack7 == 0 goto return -1  YES
(1574, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1609, 4): return $stack1  YES
(1669, 0): $stack12 = l0[l3]  YES
(1574, 1): return  YES
(1669, 1): if $stack12 != null goto l3 = l3 + -1  YES
(1667, 0): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1665, 0): $stack14 = lengthof l0  YES
(1665, 1): l2 = $stack14 - 1  YES
(1630, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1630, 1): return $stack1  YES
(1661, 0): if l0 == null goto return -1  YES
(1661, 1): if l2 >= 0 goto $stack4 = lengthof l0  YES
(1680, 0): return -1  YES
(1676, 0): return l3  YES
(1674, 0): l3 = l3 + -1  YES
(1641, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1674, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1674, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1641, 1): return $stack1  YES
(1668, 0): l3 = l3 + -1  YES
(1668, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1668, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1668, 2): goto [?= return -1]  YES

In the following all of the instructions which were not covered will be shown: 

(1579, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(1579, 1): <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(1579, 2): return  NO 
(1670, 0): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the instructions which were covered will be shown: 

(12, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(12, 1): return  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the instructions which were covered will be shown: 

(192, 0): return 0  YES
(213, 0): l2 = l2 + 1  YES
(213, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(213, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(213, 2): if l2 >= $stack4 goto return 1  YES
(81, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(176, 0): l4 = 0  YES
(172, 0): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(168, 0): l5 = l5 + 1  YES
(168, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(168, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(168, 2): if l5 >= $stack14 goto (branch)  YES
(222, 0): return 1  YES
(218, 0): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(57, 0): $stack1 = new java.lang.IllegalArgumentException  YES
(185, 0): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(218, 1): $stack7 = l1[l2]  YES
(57, 1): $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l0)  YES
(152, 0): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(185, 1): if $stack19 <= 4 goto l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(218, 2): $stack9 = virtualinvoke $stack8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack7)  YES
(57, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  YES
(218, 3): $stack10 = virtualinvoke $stack9.<java.util.regex.Matcher: boolean matches()>()  YES
(214, 0): $stack5 = l1[l2]  YES
(57, 3): throw $stack1  YES
(218, 4): if $stack10 != 0 goto l2 = l2 + 1  YES
(214, 1): $stack6 = virtualinvoke $stack5.<java.lang.String: boolean isEmpty()>()  YES
(214, 2): if $stack6 == 0 goto $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(148, 0): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(115, 0): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(148, 1): if $stack10 == 0 goto $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(115, 1): l1 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)  YES
(144, 0): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(169, 0): l6 = l2[l5]  YES
(103, 0): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(198, 0): l3#27 = l3#27 + 1  YES
(190, 0): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(219, 0): return 0  YES
(186, 0): return 0  YES
(153, 0): if l1 == 0 goto $stack13 = lengthof l2  YES
(54, 0): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(149, 0): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(116, 0): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(149, 1): if $stack11 == 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(116, 1): if $stack7 == 0 goto return 0  YES
(178, 0): $stack17 = lengthof l2  YES
(145, 0): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(178, 1): $stack18 = $stack17 - 1  YES
(178, 2): if l5 != $stack18 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(178, 3): $stack24 = virtualinvoke l6.<java.lang.String: boolean contains(java.lang.CharSequence)>(".")  YES
(178, 4): if $stack24 == 0 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(170, 0): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(170, 1): if $stack16 == 0 goto l4 = 0  YES
(265, 0): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(104, 0): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232, 0): if l0 == 47 goto $stack1 = 1  YES
(265, 1): if $stack9 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(232, 1): if l0 != 92 goto $stack1 = 0  YES
(265, 2): $stack32 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(42)  YES
(166, 0): l3#27 = 0  YES
(265, 3): if $stack32 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(100, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(232, 4): $stack1 = 0  YES
(232, 5): return $stack1  YES
(249, 0): return l0  YES
(216, 0): $stack13 = lengthof l1  YES
(216, 1): $stack14 = $stack13 - 1  YES
(216, 2): if l2 != $stack14 goto $stack15 = 0  YES
(245, 0): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(216, 3): $stack15 = 1  YES
(117, 0): return 0  YES
(84, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(245, 1): if $stack1 < 0 goto return l0  YES
(212, 0): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(216, 4): goto [?= return $stack15]  YES
(84, 1): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: int indexOfLastSeparator(java.lang.String)>(l0)  YES
(51, 0): if l0 != 47 goto (branch)  YES
(84, 2): $stack3 = $stack2 + 1  YES
(216, 6): return $stack15  YES
(84, 3): $stack4 = virtualinvoke $stack1.<java.lang.String: java.lang.String substring(int)>($stack3)  YES
(84, 4): return $stack4  YES
(14, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(14, 1): return  YES
(171, 0): l4 = l4 + 1  YES
(266, 0): $stack39 = newarray (java.lang.String)[1]  YES
(105, 0): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(266, 1): $stack39[0] = l0  YES
(105, 1): return $stack5  YES
(200, 0): if l3#27 > 8 goto $stack15 = 0  YES
(266, 2): return $stack39  YES
(167, 0): l4 = 0  YES
(200, 1): if l3#27 >= 8 goto $stack15 = 1  YES
(200, 2): if l1 == 0 goto $stack15 = 0  YES
(163, 0): $stack13 = lengthof l2  YES
(200, 5): $stack15 = 0  YES
(163, 1): if $stack13 <= 8 goto l3#27 = 0  YES
(200, 6): return $stack15  YES

In the following all of the instructions which were not covered will be shown: 

(52, 0): return 92  NO 
(285, 0): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(269, 0): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(154, 0): $stack28 = new java.util.ArrayList  NO 
(121, 0): l2 = l2 + 1  NO 
(154, 1): $stack29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(l2)  NO 
(121, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(121, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  NO 
(154, 2): specialinvoke $stack28.<java.util.ArrayList: void <init>(java.util.Collection)>($stack29)  NO 
(55, 0): return 47  NO 
(270, 0): $stack11 = new java.util.ArrayList  NO 
(270, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  NO 
(287, 0): l4 = l8  NO 
(155, 0): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(122, 0): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(155, 1): if $stack30 == 0 goto $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(271, 0): $stack12 = new java.lang.StringBuilder  NO 
(271, 1): specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>()  NO 
(123, 0): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(272, 0): l4 = 0  NO 
(173, 0): return 0  NO 
(289, 0): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(289, 1): if $stack13 == 0 goto $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(157, 0): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(124, 0): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(157, 1): goto [?= $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>]  NO 
(273, 0): l7 = l7 + 1  NO 
(273, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(273, "comp5111.assignment.cut.Subject$FilenameTasks", 2)]  NO 
(273, 2): if l7 >= l6 goto $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(273, 3): l8 = l1[l7]  NO 
(42, 0): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  NO 
(42, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN> = $stack2  NO 
(42, 2): return  NO 
(290, 0): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(290, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack17)  NO 
(158, 0): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(125, 0): return 0  NO 
(158, 1): if $stack31 == 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(158, 2): $stack36 = interfaceinvoke $stack28.<java.util.List: boolean isEmpty()>()  NO 
(158, 3): if $stack36 != 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(274, 0): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(274, 1): if l8 != 42 goto virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(159, 0): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(275, 0): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275, 1): if $stack20 == 0 goto (branch)  NO 
(193, 0): goto [?= (branch)]  NO 
(276, 0): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(276, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack26)  NO 
(293, 0): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(293, 1): $stack15 = virtualinvoke $stack11.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($stack14)  NO 
(293, 2): $stack16 = (java.lang.String[]) $stack15  NO 
(194, 0): if l7 < 0 goto return 0  NO 
(293, 3): return $stack16  NO 
(161, 0): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(194, 1): if l7 <= 65535 goto l3#27 = l3#27 + 1  NO 
(128, 0): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(161, 1): $stack33 = interfaceinvoke $stack28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack32)  NO 
(128, 1): if $stack11 <= 1 goto l2 = l2 + 1  NO 
(161, 2): l2 = (java.lang.String[]) $stack33  NO 
(128, 2): $stack14 = virtualinvoke l3.<java.lang.String: boolean startsWith(java.lang.String)>("0")  NO 
(128, 3): if $stack14 == 0 goto l2 = l2 + 1  NO 
(277, 0): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(145, 1): $stack49 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>("::")  NO 
(145, 2): $stack50 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String)>("::")  NO 
(145, 3): if $stack49 == $stack50 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(195, 0): return 0  NO 
(129, 0): return 0  NO 
(30, 0): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  NO 
(30, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN> = $stack1  NO 
(179, 0): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(146, 0): return 0  NO 
(179, 1): if $stack27 != 0 goto l3#27 = l3#27 + 2  NO 
(279, 0): if l8 != 63 goto (branch)  NO 
(246, 0): $stack2 = new java.lang.IllegalArgumentException  NO 
(246, 1): specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it")  NO 
(180, 0): return 0  NO 
(246, 2): throw $stack2  NO 
(164, 0): return 0  NO 
(280, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(280, 1): goto [?= l4 = l8]  NO 
(82, 0): return null  NO 
(148, 2): $stack45 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(148, 3): if $stack45 == 0 goto return 0  NO 
(16, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(16, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(281, 0): if l4 == 42 goto l4 = l8  NO 
(182, 0): l3#27 = l3#27 + 2  NO 
(149, 2): $stack41 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(116, 2): $stack8 = virtualinvoke l1.<java.util.regex.Matcher: int groupCount()>()  NO 
(149, 3): if $stack41 != 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  NO 
(116, 3): if $stack8 == 4 goto l2 = 1  NO 
(232, 2): $stack1 = 1  NO 
(232, 3): goto [?= return $stack1]  NO 
(282, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(282, 1): goto [?= l4 = l8]  NO 
(183, 0): goto [?= l5 = l5 + 1]  NO 
(150, 0): return 0  NO 
(216, 5): $stack15 = 0  NO 
(134, 0): return 1  NO 
(101, 0): return -1  NO 
(200, 3): $stack15 = 1  NO 
(200, 4): goto [?= return $stack15]  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the instructions which were covered will be shown: 

(580, 3): specialinvoke $stack16.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack18)  YES
(448, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(580, 4): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack16)  YES
(415, 0): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(349, 0): l2 = l2 + 1  YES
(349, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(349, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(795, 0): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(663, 0): if l0 == null goto return 1  YES
(663, 1): if l1 != null goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(564, 0): $stack23 = l2[l6]  YES
(564, 1): l7 = staticinvoke <java.lang.Character: int getType(char)>($stack23)  YES
(878, 0): l0#4 = l2  YES
(845, 0): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(878, 1): goto [?= return l0#4]  YES
(845, 1): $stack12 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($stack11)  YES
(845, 2): if $stack12 == 0 goto l4 = l4 + 1  YES
(746, 0): return 0  YES
(614, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(581, 0): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(581, 1): $stack21 = interfaceinvoke $stack11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack20)  YES
(581, 2): $stack22 = (java.lang.String[]) $stack21  YES
(581, 3): return $stack22  YES
(416, 0): l2 = l2 + 1  YES
(416, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(416, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(350, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(350, 1): $stack5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack4)  YES
(350, 2): if $stack5 != 0 goto l2 = l2 + 1  YES
(664, 0): return 1  YES
(565, 0): if l7 != l5 goto (branch)  YES
(499, 0): return l0  YES
(846, 0): l2 = 1  YES
(615, 0): l3 = lengthof l1  YES
(417, 0): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(417, 1): $stack6 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack5)  YES
(351, 0): return 0  YES
(417, 2): if $stack6 != 0 goto l2 = l2 + 1  YES
(863, 0): if l0 == null goto return l0  YES
(863, 1): if l1 == null goto return l0  YES
(863, 2): if l2 != null goto l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(566, 0): goto [?= l6 = l6 + 1]  YES
(880, 0): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(748, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(748, 1): $stack5 = interfaceinvoke l1.<java.lang.CharSequence: int length()>()  YES
(748, 2): if $stack4 == $stack5 goto $stack6 = l0 instanceof java.lang.String  YES
(616, 0): l4 = l2 - 1  YES
(451, 0): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(418, 0): return 0  YES
(666, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(881, 0): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881, 1): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack16, l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001")  YES
(881, 2): goto [?= return l0#4]  YES
(749, 0): return 0  YES
(716, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(716, 1): return $stack1  YES
(617, 0): l5 = l3 - 1  YES
(452, 0): if l1 >= 2 goto l2 = l1 - 1  YES
(799, 0): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799, 1): if $stack4 == 0 goto (branch)  YES
(667, 0): l3 = l2 - 1  YES
(568, 0): if l1 == 0 goto $stack25 = new java.lang.String  YES
(535, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(568, 1): if l7 != 2 goto $stack25 = new java.lang.String  YES
(502, 0): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(535, 1): return $stack1  YES
(568, 2): if l5 != 1 goto $stack25 = new java.lang.String  YES
(502, 1): l1#2 = $stack5 - 1  YES
(849, 0): if l1 == 0 goto $stack8 = 0  YES
(849, 4): $stack8 = 0  YES
(849, 5): return $stack8  YES
(618, 0): l6 = l6 + 1  YES
(618, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(618, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(453, 0): return ""  YES
(833, 0): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(833, 1): if $stack5 != 0 goto return 0  YES
(800, 0): return l0  YES
(833, 2): $stack6 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(833, 3): if $stack6 != 1 goto l1 = 0  YES
(668, 0): l4 = lengthof l1  YES
(503, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(751, 0): $stack6 = l0 instanceof java.lang.String  YES
(751, 1): if $stack6 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(751, 2): $stack12 = l1 instanceof java.lang.String  YES
(751, 3): if $stack12 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(619, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(553, 0): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(421, 0): return 1  YES
(867, 0): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(834, 0): return 0  YES
(669, 0): l5 = l4 - 1  YES
(636, 0): return 0  YES
(752, 0): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(752, 1): return $stack15  YES
(620, 0): l8 = l8 + 1  YES
(620, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(620, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(455, 0): l2 = l1 - 1  YES
(323, 0): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(802, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(323, 1): $stack1 = 0  YES
(802, 1): $stack6 = l2 - 1  YES
(323, 2): goto [?= return $stack1]  YES
(323, 3): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(802, 2): $stack7 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack6)  YES
(323, 4): return $stack1  YES
(802, 3): $stack8 = virtualinvoke l1.<java.lang.String: int indexOf(int)>($stack7)  YES
(802, 4): if $stack8 == -1 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(670, 0): l6 = l6 + 1  YES
(670, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(670, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(505, 0): if l2 != 10 goto (branch)  YES
(885, 0): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(621, 0): $stack15 = l1[l8]  YES
(621, 1): if $stack15 != l7 goto l8 = l8 + 1  YES
(456, 0): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(869, 0): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(836, 0): l1 = 0  YES
(803, 0): l2 = l2 + -1  YES
(803, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(802, "comp5111.assignment.cut.Subject$StringTasks", 0)]  YES
(671, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(688, 0): return 1  YES
(556, 0): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(556, 1): if $stack9 == 0 goto l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(490, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(490, 1): if $stack3 == 0 goto $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(457, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(870, 0): return l0  YES
(837, 0): l2 = 0  YES
(672, 0): l8 = l8 + 1  YES
(672, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(672, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(887, 0): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(887, 1): $stack14 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($stack13, l1, l2)  YES
(887, 2): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>($stack12, l2, $stack14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001")  YES
(557, 0): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(557, 1): return $stack41  YES
(491, 0): return l0  YES
(458, 0): if l4 != 10 goto return l3  YES
(838, 0): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(673, 0): $stack13 = l1[l8]  YES
(673, 1): if $stack13 != l7 goto l8 = l8 + 1  YES
(839, 0): l4 = l4 + 1  YES
(806, 0): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(839, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(839, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(806, 1): return $stack5  YES
(575, 0): $stack25 = new java.lang.String  YES
(575, 1): $stack26 = l6 - l4  YES
(509, 0): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(575, 2): specialinvoke $stack25.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack26)  YES
(575, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack25)  YES
(377, 0): if l0 == null goto $stack2 = 1  YES
(377, 1): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(377, 2): if $stack1 != 0 goto $stack2 = 0  YES
(377, 3): $stack2 = 1  YES
(790, 0): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(377, 4): goto [?= return $stack2]  YES
(377, 5): $stack2 = 0  YES
(377, 6): return $stack2  YES
(559, 0): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(873, 0): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(840, 0): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(576, 0): l4 = l6  YES
(510, 0): l1#2 = l1#2 + 1  YES
(890, 0): return l0#4  YES
(345, 0): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(791, 0): if l2 != 0 goto (branch)  YES
(560, 0): $stack11 = new java.util.ArrayList  YES
(560, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  YES
(494, 0): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(494, 1): if $stack4 != 1 goto $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(461, 0): return l3  YES
(742, 0): if l0 != l1 goto (branch)  YES
(412, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(412, 1): if $stack3 == 0 goto l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(346, 0): if l1 != 0 goto l2 = 0  YES
(792, 0): return l0  YES
(561, 0): l4 = 0  YES
(495, 0): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(875, 0): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(875, 1): l6 = l3 + $stack10  YES
(297, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(297, 1): return  YES
(743, 0): return 1  YES
(611, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(611, 1): if $stack9 != 0 goto return 0  YES
(578, 0): l5 = l7  YES
(611, 2): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isEmpty(char[])>(l1)  YES
(512, 0): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(611, 3): if $stack10 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(512, 1): return $stack7  YES
(413, 0): return 0  YES
(347, 0): return 1  YES
(562, 0): $stack12 = l2[0]  YES
(562, 1): l5 = staticinvoke <java.lang.Character: int getType(char)>($stack12)  YES
(496, 0): if l1 == 13 goto return ""  YES
(496, 1): if l1 != 10 goto return l0  YES
(843, 0): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843, 1): $stack10 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($stack9)  YES
(843, 2): if $stack10 == 0 goto $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(612, 0): return 0  YES
(563, 0): l6 = l6 + 1  YES
(563, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(563, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(563, 2): $stack15 = $stack14 - 1  YES
(563, 3): if l6 >= $stack15 goto $stack16 = new java.lang.String  YES
(877, 0): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(877, 1): if l4 != $stack11 goto (branch)  YES
(745, 0): if l0 == null goto return 0  YES
(745, 1): if l1 != null goto $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580, 0): $stack16 = new java.lang.String  YES
(580, 1): $stack17 = lengthof l2  YES
(580, 2): $stack18 = $stack17 - l4  YES

In the following all of the instructions which were not covered will be shown: 

(630, 0): if l6 >= l4 goto l8 = l8 + 1  NO 
(630, 1): $stack19 = l8 + 1  NO 
(630, 2): $stack21 = l1[$stack19]  NO 
(630, 3): $stack20 = l6 + 1  NO 
(630, 4): $stack22 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack20)  NO 
(630, 5): if $stack21 != $stack22 goto l8 = l8 + 1  NO 
(680, 0): return 0  NO 
(449, 0): return null  NO 
(796, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(796, 1): $stack13 = l2 - 1  NO 
(796, 2): $stack14 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack13)  NO 
(796, 3): $stack15 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack14)  NO 
(796, 4): if $stack15 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(631, 0): return 1  NO 
(797, 0): l2 = l2 + -1  NO 
(797, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(796, "comp5111.assignment.cut.Subject$StringTasks", 0)]  NO 
(682, 0): if l6 >= l3 goto l8 = l8 + 1  NO 
(682, 1): $stack17 = l8 + 1  NO 
(682, 2): $stack19 = l1[$stack17]  NO 
(682, 3): $stack18 = l6 + 1  NO 
(682, 4): $stack20 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack18)  NO 
(682, 5): if $stack19 != $stack20 goto l8 = l8 + 1  NO 
(864, 0): return l0  NO 
(683, 0): return 0  NO 
(849, 1): if l2 == 0 goto $stack8 = 0  NO 
(849, 2): $stack8 = 1  NO 
(849, 3): goto [?= return $stack8]  NO 
(354, 0): return 1  NO 
(569, 0): l8 = l6 - 1  NO 
(570, 0): if l8 == l4 goto (branch)  NO 
(554, 0): return null  NO 
(571, 0): $stack38 = new java.lang.String  NO 
(571, 1): $stack39 = l8 - l4  NO 
(571, 2): specialinvoke $stack38.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack39)  NO 
(571, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack38)  NO 
(572, 0): l4 = l8  NO 
(506, 0): $stack11 = l1#2 - 1  NO 
(506, 1): $stack12 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack11)  NO 
(506, 2): if $stack12 != 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  NO 
(622, 0): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(622, 1): if $stack18 != 0 goto (branch)  NO 
(507, 0): l1#2 = l1#2 + -1  NO 
(507, 1): goto [?= $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)]  NO 
(755, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(458, 1): $stack8 = l2 - 1  NO 
(458, 2): $stack9 = virtualinvoke l3.<java.lang.String: char charAt(int)>($stack8)  NO 
(458, 3): if $stack9 != 13 goto return l3  NO 
(574, 0): goto [?= l5 = l7]  NO 
(756, 0): l3 = l3 + 1  NO 
(756, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(756, "comp5111.assignment.cut.Subject$StringTasks", 1)]  NO 
(624, 0): return 1  NO 
(459, 0): $stack11 = l2 - 1  NO 
(459, 1): $stack12 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int,int)>(0, $stack11)  NO 
(459, 2): return $stack12  NO 
(674, 0): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(674, 1): if $stack16 != 0 goto (branch)  NO 
(757, 0): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 1): $stack9 = interfaceinvoke l1.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 2): if $stack8 == $stack9 goto l3 = l3 + 1  NO 
(840, 1): if l2 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(758, 0): return 0  NO 
(626, 0): if l8 != l5 goto (branch)  NO 
(841, 0): return 1  NO 
(676, 0): return 0  NO 
(628, 0): return 1  NO 
(678, 0): if l8 != l5 goto (branch)  NO 
(761, 0): return 1  NO 
(497, 0): return ""  NO 
(844, 0): l1 = 1  NO 
(844, 1): goto [?= l4 = l4 + 1]  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the instructions which were covered will be shown: 

(1393, 0): if l0 != l1 goto (branch)  YES
(1396, 3): $stack2 = -1  YES
(1396, 4): return $stack2  YES
(1381, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1396, 0): if l0 == 0 goto $stack2 = -1  YES
(1381, 1): return  YES
(1396, 1): $stack2 = 1  YES
(1396, 2): goto [?= return $stack2]  YES
(1394, 0): return 0  YES

In the following all of the instructions which were not covered will be shown: 




Coverage of Test Suite: comp5111.assignment.cut.RegressionTest4

comp5111.assignment.cut.Subject$NumberTasks
133 Instructions from a total of 351 Instructions were covered.
Percentage: 37.89173789173789%

comp5111.assignment.cut.Subject$CharTasks
42 Instructions from a total of 46 Instructions were covered.
Percentage: 91.30434782608695%

comp5111.assignment.cut.Subject$GregorianTasks
99 Instructions from a total of 146 Instructions were covered.
Percentage: 67.8082191780822%

comp5111.assignment.cut.Subject$ArrayTasks
41 Instructions from a total of 49 Instructions were covered.
Percentage: 83.6734693877551%

comp5111.assignment.cut.Subject
2 Instructions from a total of 2 Instructions were covered.
Percentage: 100.0%

comp5111.assignment.cut.Subject$FilenameTasks
95 Instructions from a total of 204 Instructions were covered.
Percentage: 46.568627450980394%

comp5111.assignment.cut.Subject$StringTasks
207 Instructions from a total of 295 Instructions were covered.
Percentage: 70.16949152542372%

comp5111.assignment.cut.Subject$BooleanTasks
9 Instructions from a total of 9 Instructions were covered.
Percentage: 100.0%

Overall Statement Coverage: 56.98729582577132%



In the following part you can see which instructions were executed. Before every instruction you can see two numbers
in the form of (x,y), for Example (1,5). This indicates that the following Instruction can be found on line x of the Java code. 
y denotes that it is the y-th Jimple Instruction generated from the corresponding Java line.
After each listed instructions you can find a NO if the instruction wasn't executed and a YES if it was. 


comp5111.assignment.cut.Subject$NumberTasks


In the following all of the instructions which were covered will be shown: 

(1340, 0): $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1340, 1): if $stack5 != 45 goto $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1299, 0): $stack2 = new java.math.BigDecimal  YES
(1299, 1): specialinvoke $stack2.<java.math.BigDecimal: void <init>(java.lang.String)>(l0)  YES
(1010, 0): $stack60 = l2 - 1  YES
(1010, 1): l12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, $stack60)  YES
(1200, 0): $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(944, 0): l4 = 0  YES
(1258, 0): l2 = 10  YES
(969, 0): $stack19 = l2 - 1  YES
(969, 1): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack19)  YES
(1184, 0): $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1118, 0): if $stack7 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 3): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1)  YES
(1118, 4): return $stack5  YES
(1267, 0): $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1267, 1): if $stack8 != 0 goto l2 = 16  YES
(1234, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(1267, 2): $stack12 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", l1)  YES
(945, 0): l7 = l7 + 1  YES
(1267, 3): if $stack12 == 0 goto $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(945, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(945, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  YES
(945, 2): if l7 >= l6 goto (branch)  YES
(945, 3): l8 = $stack16[l7]  YES
(1292, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1259, 0): l3 = 0  YES
(1003, 0): if l11 == 0 goto (branch)  YES
(937, 0): $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(937, 1): if $stack15 == 0 goto $stack16 = newarray (java.lang.String)[3]  YES
(1350, 0): l2 = 0  YES
(1251, 0): if l0 != null goto $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1334, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(1334, 1): if $stack1 == 0 goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1012, 0): lookupswitch(l5#11) {     case 68: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 70: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 76: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     case 100: goto l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0);     case 102: goto l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0);     case 108: goto if l7#20 != null goto $stack62 = new java.lang.NumberFormatException;     default: goto $stack88 = new java.lang.NumberFormatException; }  YES
(979, 0): $stack25 = staticinvoke <java.lang.Character: boolean isDigit(char)>(l5#11)  YES
(946, 0): $stack138 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l8, l3)  YES
(979, 1): if $stack25 != 0 goto $stack119 = 0  YES
(946, 1): if $stack138 == 0 goto l7 = l7 + 1  YES
(979, 2): if l5#11 == 46 goto $stack119 = 0  YES
(979, 3): $stack119 = 1  YES
(1359, 0): if l4 != 0 goto l3 = l3 + 1  YES
(979, 4): goto [?= l11 = $stack119]  YES
(1359, 1): $stack9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1359, 2): $stack10 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack9)  YES
(979, 6): l11 = $stack119  YES
(1359, 3): if $stack10 != 0 goto l3 = l3 + 1  YES
(1260, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1004, 0): if l10 <= -1 goto l8 = null  YES
(938, 0): $stack151 = new java.lang.NumberFormatException  YES
(938, 1): specialinvoke $stack151.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(938, 2): throw $stack151  YES
(1351, 0): l3 = l3 + 1  YES
(1351, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1351, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  YES
(1351, 2): if l3 >= $stack5 goto return 1  YES
(1219, 0): $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1335, 0): return 0  YES
(980, 0): if l9 <= -1 goto (branch)  YES
(1360, 0): return 0  YES
(1261, 0): if l4 != 45 goto (branch)  YES
(1352, 0): $stack6 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3)  YES
(1352, 1): if $stack6 != 46 goto $stack13 = 0  YES
(1352, 4): $stack13 = 0  YES
(1352, 5): l4 = $stack13  YES
(1377, 0): $stack2 = l0 - l1  YES
(1377, 1): return $stack2  YES
(1278, 0): $stack9 = new java.math.BigInteger  YES
(1278, 1): $stack10 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l1)  YES
(1278, 2): specialinvoke $stack9.<java.math.BigInteger: void <init>(java.lang.String,int)>($stack10, l2)  YES
(1270, 0): $stack13 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", l1)  YES
(1270, 1): if $stack13 == 0 goto $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1237, 0): $stack1 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(l0)  YES
(973, 0): l9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(46)  YES
(1353, 0): if $stack13 == 0 goto (branch)  YES
(1254, 0): $stack6 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(1254, 1): if $stack6 == 0 goto l1 = 0  YES
(1337, 0): $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(1337, 1): $stack3 = $stack2 - 1  YES
(1337, 2): $stack4 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack3)  YES
(1337, 3): if $stack4 != 46 goto $stack5 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1296, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1296, 1): if $stack1 == 0 goto $stack2 = new java.math.BigDecimal  YES
(1007, 0): l8 = null  YES
(974, 0): $stack22 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(101)  YES
(1197, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(l0)  YES
(941, 0): $stack16 = newarray (java.lang.String)[3]  YES
(974, 1): $stack23 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(69)  YES
(941, 1): $stack16[0] = "0x"  YES
(974, 2): $stack24 = $stack22 + $stack23  YES
(941, 2): $stack16[1] = "0X"  YES
(974, 3): l10 = $stack24 + 1  YES
(941, 3): $stack16[2] = "#"  YES
(1255, 0): $stack25 = new java.lang.NumberFormatException  YES
(999, 0): if $stack119 == 0 goto $stack101 = l2  YES
(1255, 1): specialinvoke $stack25.<java.lang.NumberFormatException: void <init>(java.lang.String)>("An empty string is not a valid number")  YES
(999, 1): $stack101 = l2 - 1  YES
(1255, 2): throw $stack25  YES
(999, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)]  YES
(900, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(999, 4): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, $stack101)  YES
(900, 1): return  YES
(1346, 0): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 0)  YES
(1313, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isNumeric(java.lang.CharSequence)>(l0)  YES
(1346, 1): return $stack6  YES
(1313, 1): return $stack1  YES
(1181, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(l0)  YES
(1115, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1297, 0): $stack3 = new java.lang.NumberFormatException  YES
(1264, 0): if l4 != 43 goto $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)  YES
(1297, 1): specialinvoke $stack3.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number")  YES
(1297, 2): throw $stack3  YES
(942, 0): l2 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(934, 0): if l0 != null goto $stack15 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isBlank(java.lang.CharSequence)>(l0)  YES
(1058, 0): $stack88 = new java.lang.NumberFormatException  YES
(1058, 1): $stack89 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  YES
(992, 0): if l10 <= -1 goto (branch)  YES
(1058, 2): specialinvoke $stack88.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack89)  YES
(1215, 0): if l0 != null goto $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(l0)  YES
(1058, 3): throw $stack88  YES
(1116, 0): if l2 == 45 goto $stack7 = 1  YES
(1116, 1): if l2 != 43 goto $stack7 = 0  YES
(1273, 0): $stack14 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", l1)  YES
(1273, 1): if $stack14 == 0 goto $stack9 = new java.math.BigInteger  YES
(1116, 4): $stack7 = 0  YES
(951, 0): if l4 <= 0 goto $stack19 = l2 - 1  YES
(943, 0): $stack18 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(943, 1): if $stack18 == 43 goto $stack145 = 1  YES
(943, 2): $stack144 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(1356, 0): if l2 <= 1 goto (branch)  YES
(943, 3): if $stack144 != 45 goto $stack145 = 0  YES
(1257, 0): l1 = 0  YES
(943, 6): $stack145 = 0  YES
(1001, 0): l7#20 = null  YES
(943, 7): l3 = $stack145  YES

In the following all of the instructions which were not covered will be shown: 

(993, 0): if l10 <= l2 goto l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(1026, 1): $stack63 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1092, 3): $stack33 = $stack32 cmpl 0.0  NO 
(960, 0): l6 = l2 - l4  NO 
(1026, 2): specialinvoke $stack62.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack63)  NO 
(1092, 4): if $stack33 != 0 goto l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1026, 3): throw $stack62  NO 
(1092, 5): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1092, 6): if $stack38 == 0 goto (branch)  NO 
(1274, 0): l2 = 8  NO 
(1076, 0): $stack157 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1076, 1): return $stack157  NO 
(1357, 0): return 0  NO 
(1093, 0): l14 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(994, 0): $stack105 = new java.lang.NumberFormatException  NO 
(961, 0): if l6 > 16 goto $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(994, 1): $stack106 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(961, 1): if l6 != 16 goto (branch)  NO 
(994, 2): specialinvoke $stack105.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack106)  NO 
(961, 2): if l5#11 <= 55 goto (branch)  NO 
(994, 3): throw $stack105  NO 
(1341, 0): $stack7 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1341, 1): if $stack7 != 1 goto $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1275, 0): l1 = l1 + 1  NO 
(1044, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(1160, 0): if l0 != null goto $stack2 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1094, 0): $stack35 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1094, 1): $stack36 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($stack35)  NO 
(1094, 2): $stack37 = virtualinvoke l14.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($stack36)  NO 
(1094, 3): if $stack37 != 0 goto return l14  NO 
(962, 0): $stack122 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(962, 1): return $stack122  NO 
(1342, 0): return 0  NO 
(1045, 0): $stack76 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1045, 1): if $stack76 != 0 goto (branch)  NO 
(1045, 2): $stack78 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 
(1045, 3): $stack79 = $stack78 cmpl 0.0  NO 
(1045, 4): if $stack79 != 0 goto return l13#69  NO 
(1045, 5): $stack80 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1045, 6): if $stack80 == 0 goto (branch)  NO 
(979, 5): $stack119 = 0  NO 
(1293, 0): return null  NO 
(1161, 0): return 1  NO 
(1095, 0): return l13#69  NO 
(996, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l10)  NO 
(996, 1): goto [?= l7#20 = null]  NO 
(1046, 0): return l13#69  NO 
(947, 0): $stack141 = virtualinvoke l8.<java.lang.String: int length()>()  NO 
(947, 1): $stack142 = $stack141 + l3  NO 
(947, 2): l4 = 0 + $stack142  NO 
(1063, 0): if l10 <= -1 goto l8 = null  NO 
(1030, 0): l13#63 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1063, 1): $stack55 = l2 - 1  NO 
(1063, 2): if l10 >= $stack55 goto l8 = null  NO 
(964, 0): if l6 > 8 goto $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(964, 1): if l6 != 8 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(964, 2): if l5#11 <= 55 goto $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1344, 0): $stack8 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean withDecimalsParsing(java.lang.String,int)>(l0, 1)  NO 
(1344, 1): return $stack8  NO 
(1080, 0): $stack155 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l0)  NO 
(1080, 1): return $stack155  NO 
(981, 0): if l10 <= -1 goto $stack107 = l9 + 1  NO 
(948, 0): goto [?= (branch)]  NO 
(1262, 0): l3 = 1  NO 
(1163, 0): l1 = l1 + -1  NO 
(1163, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1163, "comp5111.assignment.cut.Subject$NumberTasks", 2)]  NO 
(1097, 0): return l14  NO 
(1163, 2): if l1 < 0 goto return 1  NO 
(1064, 0): $stack58 = l10 + 1  NO 
(1031, 0): $stack74 = virtualinvoke l13#63.<java.lang.Float: boolean isInfinite()>()  NO 
(1064, 1): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>($stack58)  NO 
(1031, 1): if $stack74 != 0 goto (branch)  NO 
(1064, 2): goto [?= (branch)]  NO 
(965, 0): $stack123 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l0)  NO 
(1031, 2): $stack82 = virtualinvoke l13#63.<java.lang.Float: float floatValue()>()  NO 
(965, 1): return $stack123  NO 
(1031, 3): $stack83 = $stack82 cmpl 0.0F  NO 
(1031, 4): if $stack83 != 0 goto return l13#63  NO 
(1031, 5): $stack84 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(1031, 6): if $stack84 == 0 goto (branch)  NO 
(1279, 0): if l3 == 0 goto $stack11 = $stack9  NO 
(1279, 1): $stack11 = virtualinvoke $stack9.<java.math.BigInteger: java.math.BigInteger negate()>()  NO 
(1279, 2): goto [?= return $stack11]  NO 
(1279, 3): $stack11 = $stack9  NO 
(1279, 4): return $stack11  NO 
(1015, 0): if l7#20 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 0): if l10 < l9 goto $stack114 = new java.lang.NumberFormatException  NO 
(1015, 1): if l8 != null goto $stack62 = new java.lang.NumberFormatException  NO 
(982, 1): if l10 <= l2 goto $stack116 = l9 + 1  NO 
(1263, 0): l1 = 1  NO 
(1263, 1): goto [?= $stack8 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", l1)]  NO 
(1164, 0): $stack3 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1)  NO 
(1164, 1): if $stack3 == 48 goto l1 = l1 + -1  NO 
(999, 3): $stack101 = l2  NO 
(1148, 0): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l0)  NO 
(1148, 1): if $stack2 == 0 goto $stack4 = 0  NO 
(1148, 2): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isAllZeros(java.lang.String)>(l1)  NO 
(1148, 3): if $stack3 == 0 goto $stack4 = 0  NO 
(1148, 4): $stack4 = 1  NO 
(983, 0): $stack114 = new java.lang.NumberFormatException  NO 
(1148, 5): goto [?= return $stack4]  NO 
(983, 1): $stack115 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a valid number.")  NO 
(1148, 6): $stack4 = 0  NO 
(983, 2): specialinvoke $stack114.<java.lang.NumberFormatException: void <init>(java.lang.String)>($stack115)  NO 
(1148, 7): return $stack4  NO 
(983, 3): throw $stack114  NO 
(1363, 0): return 1  NO 
(1198, 0): return null  NO 
(1165, 0): return 0  NO 
(1066, 0): l8 = null  NO 
(967, 0): $stack124 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(967, 1): return $stack124  NO 
(1182, 0): return null  NO 
(1050, 0): goto [?= $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)]  NO 
(1116, 2): $stack7 = 1  NO 
(1017, 0): $stack65 = virtualinvoke l12.<java.lang.String: boolean isEmpty()>()  NO 
(1116, 3): goto [?= (branch)]  NO 
(1017, 1): if $stack65 != 0 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 2): $stack68 = virtualinvoke l12.<java.lang.String: char charAt(int)>(0)  NO 
(1017, 3): if $stack68 != 45 goto $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 4): $stack70 = virtualinvoke l12.<java.lang.String: java.lang.String substring(int)>(1)  NO 
(1017, 5): $stack71 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>($stack70)  NO 
(1017, 6): if $stack71 != 0 goto $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1017, 7): $stack66 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isDigits(java.lang.String)>(l12)  NO 
(1017, 8): if $stack66 == 0 goto $stack62 = new java.lang.NumberFormatException  NO 
(1265, 0): l1 = 1  NO 
(1034, 0): return l13#63  NO 
(935, 0): return null  NO 
(1216, 0): return null  NO 
(985, 0): $stack116 = l9 + 1  NO 
(952, 0): l5#11 = 0  NO 
(985, 1): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack116, l10)  NO 
(985, 2): goto [?= l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)]  NO 
(1299, 2): return $stack2  NO 
(1200, 1): return $stack1  NO 
(1101, 0): goto [?= $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)]  NO 
(1068, 0): if l7#20 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1068, 1): if l8 != null goto l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1184, 1): return $stack1  NO 
(1085, 0): l12#81 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Float createFloat(java.lang.String)>(l0)  NO 
(1118, 1): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(1, l1)  NO 
(1052, 0): $stack77 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l12)  NO 
(1118, 2): goto [?= return $stack5]  NO 
(1019, 0): $stack67 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Long createLong(java.lang.String)>(l12)  NO 
(1052, 1): return $stack77  NO 
(1019, 1): return $stack67  NO 
(953, 0): l6 = l6 + 1  NO 
(953, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(953, "comp5111.assignment.cut.Subject$NumberTasks", 1)]  NO 
(1168, 0): return 1  NO 
(1102, 0): $stack31 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigDecimal createBigDecimal(java.lang.String)>(l0)  NO 
(1102, 1): return $stack31  NO 
(1086, 0): l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)  NO 
(954, 0): l5#11 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l6)  NO 
(1268, 0): l2 = 16  NO 
(1235, 0): return null  NO 
(1004, 1): $stack90 = l2 - 1  NO 
(1004, 2): if l10 >= $stack90 goto l8 = null  NO 
(1252, 0): return null  NO 
(1219, 1): return $stack1  NO 
(1087, 0): $stack29 = virtualinvoke l12#81.<java.lang.Float: boolean isInfinite()>()  NO 
(1087, 1): if $stack29 != 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(988, 0): $stack107 = l9 + 1  NO 
(955, 0): if l5#11 == 48 goto l4 = l4 + 1  NO 
(988, 1): if $stack119 == 0 goto $stack110 = l2  NO 
(988, 2): $stack110 = l2 - 1  NO 
(988, 3): goto [?= l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)]  NO 
(988, 4): $stack110 = l2  NO 
(988, 5): l7#20 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack107, $stack110)  NO 
(1269, 0): l1 = l1 + 2  NO 
(1269, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1071, 0): $stack54 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Integer createInteger(java.lang.String)>(l0)  NO 
(1071, 1): return $stack54  NO 
(1005, 0): $stack98 = l10 + 1  NO 
(1005, 1): $stack97 = l2 - 1  NO 
(1005, 2): l8 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>($stack98, $stack97)  NO 
(1005, 3): goto [?= $stack60 = l2 - 1]  NO 
(1352, 2): $stack13 = 1  NO 
(1352, 3): goto [?= l4 = $stack13]  NO 
(1088, 0): $stack42 = virtualinvoke l12#81.<java.lang.Float: float floatValue()>()  NO 
(1088, 1): $stack43 = $stack42 cmpl 0.0F  NO 
(1088, 2): if $stack43 != 0 goto $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1088, 3): $stack48 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: boolean isZero(java.lang.String,java.lang.String)>(l6#28, l7#20)  NO 
(956, 0): goto [?= l6 = l2 - l4]  NO 
(1088, 4): if $stack48 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1237, 1): return $stack1  NO 
(1039, 0): goto [?= l13#69 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.Double createDouble(java.lang.String)>(l0)]  NO 
(1089, 0): $stack44 = virtualinvoke l12#81.<java.lang.Float: java.lang.String toString()>()  NO 
(1089, 1): $stack45 = virtualinvoke l13#69.<java.lang.Double: java.lang.String toString()>()  NO 
(1023, 0): $stack164 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.math.BigInteger createBigInteger(java.lang.String)>(l12)  NO 
(1089, 2): $stack46 = virtualinvoke $stack44.<java.lang.String: boolean equals(java.lang.Object)>($stack45)  NO 
(990, 0): l6#28 = staticinvoke <comp5111.assignment.cut.Subject$NumberTasks: java.lang.String getMantissa(java.lang.String,int)>(l0, l9)  NO 
(1023, 1): return $stack164  NO 
(1089, 3): if $stack46 == 0 goto $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(990, 1): goto [?= (branch)]  NO 
(1271, 0): l2 = 16  NO 
(1354, 0): l2 = l2 + 1  NO 
(1090, 0): return l12#81  NO 
(958, 0): l4 = l4 + 1  NO 
(1338, 0): return 0  NO 
(1272, 0): l1 = l1 + 1  NO 
(1272, 1): goto [?= $stack9 = new java.math.BigInteger]  NO 
(1273, 2): $stack19 = virtualinvoke l0.<java.lang.String: int length()>()  NO 
(1273, 3): $stack20 = l1 + 1  NO 
(1273, 4): if $stack19 <= $stack20 goto $stack9 = new java.math.BigInteger  NO 
(943, 4): $stack145 = 1  NO 
(943, 5): goto [?= l3 = $stack145]  NO 
(1092, 0): $stack30 = virtualinvoke l13#69.<java.lang.Double: boolean isInfinite()>()  NO 
(1092, 1): if $stack30 != 0 goto (branch)  NO 
(1026, 0): $stack62 = new java.lang.NumberFormatException  NO 
(1092, 2): $stack32 = virtualinvoke l13#69.<java.lang.Double: double doubleValue()>()  NO 


comp5111.assignment.cut.Subject$CharTasks


In the following all of the instructions which were covered will be shown: 

(1441, 0): if l0 == null goto $stack2 = l1  YES
(1569, 0): $stack2 = l0 - l1  YES
(1536, 0): if l0 < 65 goto $stack1 = 0  YES
(1441, 1): $stack2 = virtualinvoke l0.<java.lang.Character: char charValue()>()  YES
(1569, 1): return $stack2  YES
(1441, 2): goto [?= return $stack2]  YES
(1536, 1): if l0 > 90 goto $stack1 = 0  YES
(1441, 4): return $stack2  YES
(1536, 4): $stack1 = 0  YES
(1536, 5): return $stack1  YES
(1400, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1400, 1): return  YES
(1460, 0): if l0 >= 128 goto $stack1 = 0  YES
(1555, 0): if l0 < 97 goto $stack1 = 0  YES
(1460, 1): $stack1 = 1  YES
(1460, 2): goto [?= return $stack1]  YES
(1555, 1): if l0 > 122 goto $stack1 = 0  YES
(1555, 2): $stack1 = 1  YES
(1460, 4): return $stack1  YES
(1555, 3): goto [?= return $stack1]  YES
(1555, 4): $stack1 = 0  YES
(1555, 5): return $stack1  YES
(1479, 0): if l0 < 32 goto $stack1 = 0  YES
(1479, 1): if l0 >= 127 goto $stack1 = 0  YES
(1479, 2): $stack1 = 1  YES
(1479, 3): goto [?= return $stack1]  YES
(1479, 4): $stack1 = 0  YES
(1479, 5): return $stack1  YES
(1498, 0): if l0 < 32 goto $stack1 = 1  YES
(1498, 1): if l0 != 127 goto $stack1 = 0  YES
(1498, 2): $stack1 = 1  YES
(1498, 3): goto [?= return $stack1]  YES
(1498, 4): $stack1 = 0  YES
(1498, 5): return $stack1  YES
(1517, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaUpper(char)>(l0)  YES
(1517, 1): if $stack1 != 0 goto $stack3 = 1  YES
(1517, 2): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$CharTasks: boolean isAsciiAlphaLower(char)>(l0)  YES
(1517, 3): if $stack2 == 0 goto $stack3 = 0  YES
(1517, 4): $stack3 = 1  YES
(1517, 5): goto [?= return $stack3]  YES
(1517, 6): $stack3 = 0  YES
(1517, 7): return $stack3  YES

In the following all of the instructions which were not covered will be shown: 

(1441, 3): $stack2 = l1  NO 
(1536, 2): $stack1 = 1  NO 
(1536, 3): goto [?= return $stack1]  NO 
(1460, 3): $stack1 = 0  NO 


comp5111.assignment.cut.Subject$GregorianTasks


In the following all of the instructions which were covered will be shown: 

(1761, 0): if l1 != 2 goto $stack4 = new java.lang.IllegalArgumentException  YES
(1728, 0): if l0 <= 1900 goto $stack1 = l0 & 3  YES
(1761, 1): $stack6 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: boolean isLeapYear(int)>(l0)  YES
(1761, 2): if $stack6 == 0 goto $stack7 = 28  YES
(1728, 1): if l0 >= 2100 goto $stack1 = l0 & 3  YES
(1761, 3): $stack7 = 29  YES
(1761, 4): goto [?= return $stack7]  YES
(1819, 0): $stack7 = new java.lang.IllegalArgumentException  YES
(1761, 6): return $stack7  YES
(1819, 1): $stack8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH out of range: \u0001")  YES
(1819, 2): specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack8)  YES
(1819, 3): throw $stack7  YES
(1927, 0): if l0 != 6 goto (branch)  YES
(1894, 0): return l7  YES
(1927, 1): return 10  YES
(1861, 0): if l2 < 1 goto $stack8 = new java.lang.IllegalArgumentException  YES
(1861, 1): if l2 <= 31 goto $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1762, 0): $stack4 = new java.lang.IllegalArgumentException  YES
(1762, 1): $stack5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid month: \u0001")  YES
(1762, 2): specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack5)  YES
(1762, 3): throw $stack4  YES
(1878, 0): if l1 > 2 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1812, 0): if l0 < -999999999 goto $stack3 = new java.lang.IllegalArgumentException  YES
(1812, 1): if l0 <= 999999999 goto (branch)  YES
(1870, 0): l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1928, 0): if l0 != 7 goto (branch)  YES
(1928, 1): return 12  YES
(1862, 0): $stack8 = new java.lang.IllegalArgumentException  YES
(1862, 1): $stack9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day out of range: \u0001")  YES
(1862, 2): specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9)  YES
(1862, 3): throw $stack8  YES
(1887, 0): l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1821, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1821, 1): if l2 <= $stack9 goto return  YES
(1879, 0): l4 = l4 + -1  YES
(1871, 0): l4 = l0 % 100  YES
(1929, 0): if l0 != 8 goto (branch)  YES
(1888, 0): $stack14 = l2 + l3  YES
(1888, 1): $stack16 = $stack14 + l4  YES
(1888, 2): $stack15 = l4 / 4  YES
(1888, 3): $stack17 = $stack16 + $stack15  YES
(1888, 4): $stack19 = $stack17 + l6  YES
(1888, 5): $stack18 = 2 * l5  YES
(1888, 6): $stack20 = $stack19 - $stack18  YES
(1888, 7): l7 = $stack20 % 7  YES
(1880, 0): if l4 >= 0 goto l6 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l5, 4)  YES
(1872, 0): l5 = staticinvoke <java.lang.Math: int floorDiv(int,int)>(l0, 100)  YES
(1930, 0): if l0 != 9 goto (branch)  YES
(1864, 0): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1864, 1): if l2 <= $stack10 goto l3 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int gaussianWeekTerm(int)>(l1)  YES
(1732, 0): $stack1 = l0 & 3  YES
(1732, 1): if $stack1 == 0 goto $stack4 = 1  YES
(1732, 2): $stack2 = l0 % 100  YES
(1922, 0): if l0 != 1 goto (branch)  YES
(1732, 3): if $stack2 != 0 goto $stack4 = 1  YES
(1922, 1): return 28  YES
(1732, 6): $stack4 = 1  YES
(1732, 7): goto [?= return $stack4]  YES
(1732, 9): return $stack4  YES
(1881, 0): l4 = 99  YES
(1815, 0): if l1 < 1 goto $stack5 = new java.lang.IllegalArgumentException  YES
(1815, 1): if l1 <= 12 goto (branch)  YES
(1931, 0): if l0 != 10 goto (branch)  YES
(1931, 1): return 20  YES
(1923, 0): if l0 != 2 goto (branch)  YES
(1890, 0): if l7 > 0 goto return l7  YES
(1923, 1): return 31  YES
(1882, 0): l5 = l5 + -1  YES
(1816, 0): $stack5 = new java.lang.IllegalArgumentException  YES
(1816, 1): $stack6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("MONTH out of range: \u0001")  YES
(1816, 2): specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack6)  YES
(1816, 3): throw $stack5  YES
(1684, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1684, 1): return  YES
(1874, 0): if l4 >= 0 goto (branch)  YES
(1932, 0): if l0 != 11 goto (branch)  YES
(1932, 1): return 23  YES
(1924, 0): if l0 != 3 goto (branch)  YES
(1891, 0): l7 = l7 + 7  YES
(1759, 0): if l1 == 1 goto return 31  YES
(1759, 1): if l1 == 3 goto return 31  YES
(1759, 2): if l1 == 5 goto return 31  YES
(1759, 3): if l1 == 7 goto return 31  YES
(1759, 4): if l1 == 8 goto return 31  YES
(1759, 5): if l1 == 10 goto return 31  YES
(1759, 6): if l1 != 12 goto (branch)  YES
(1759, 7): return 31  YES
(1875, 0): l4 = l4 + 100  YES
(1925, 0): if l0 != 4 goto (branch)  YES
(1760, 0): if l1 == 4 goto return 30  YES
(1760, 1): if l1 == 6 goto return 30  YES
(1760, 2): if l1 == 9 goto return 30  YES
(1760, 3): if l1 != 11 goto (branch)  YES
(1760, 4): return 30  YES
(1818, 0): if l2 < 1 goto $stack7 = new java.lang.IllegalArgumentException  YES
(1818, 1): if l2 <= 31 goto $stack9 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: int getLengthOfMonth(int,int)>(l0, l1)  YES
(1926, 0): if l0 != 5 goto (branch)  YES
(1926, 1): return 7  YES
(1827, 0): return  YES

In the following all of the instructions which were not covered will be shown: 

(1761, 5): $stack7 = 28  NO 
(1910, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1935, 0): $stack1 = new java.lang.IllegalArgumentException  NO 
(1935, 1): $stack2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Month out of range: \u0001")  NO 
(1902, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l0)  NO 
(1935, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  NO 
(1935, 3): throw $stack1  NO 
(1729, 0): $stack7 = l0 & 3  NO 
(1729, 1): if $stack7 != 0 goto $stack8 = 0  NO 
(1729, 2): $stack8 = 1  NO 
(1729, 3): goto [?= return $stack8]  NO 
(1729, 4): $stack8 = 0  NO 
(1729, 5): return $stack8  NO 
(1903, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  NO 
(1912, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  NO 
(1813, 0): $stack3 = new java.lang.IllegalArgumentException  NO 
(1813, 1): $stack4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(l0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("YEAR out of range: \u0001")  NO 
(1813, 2): specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack4)  NO 
(1813, 3): throw $stack3  NO 
(1904, 0): if l1 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  NO 
(1929, 1): return 15  NO 
(1822, 0): $stack10 = new java.lang.IllegalArgumentException  NO 
(1913, 0): $stack10 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(1913, 1): return $stack10  NO 
(1905, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)  NO 
(1930, 1): return 18  NO 
(1732, 4): $stack3 = l0 % 400  NO 
(1732, 5): if $stack3 != 0 goto $stack4 = 0  NO 
(1732, 8): $stack4 = 0  NO 
(1865, 0): $stack37 = new java.lang.IllegalArgumentException  NO 
(1824, 0): $stack11 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1824, 1): $stack12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DAY_OF_MONTH exceeds month length in given year: \u0001")  NO 
(1824, 2): specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12)  NO 
(1824, 3): throw $stack10  NO 
(1907, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1)  NO 
(1924, 1): return 2  NO 
(1908, 0): virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45)  NO 
(1933, 0): if l0 != 12 goto $stack1 = new java.lang.IllegalArgumentException  NO 
(1933, 1): return 25  NO 
(1867, 0): $stack38 = staticinvoke <comp5111.assignment.cut.Subject$GregorianTasks: java.lang.String toString(int,int,int)>(l0, l1, l2)  NO 
(1867, 1): $stack39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($stack38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Day exceeds month length: \u0001")  NO 
(1867, 2): specialinvoke $stack37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39)  NO 
(1867, 3): throw $stack37  NO 
(1925, 1): return 5  NO 
(1909, 0): if l2 >= 10 goto virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l2)  NO 
(1901, 0): $stack4 = new java.lang.StringBuilder  NO 
(1901, 1): specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>()  NO 


comp5111.assignment.cut.Subject$ArrayTasks


In the following all of the instructions which were covered will be shown: 

(1664, 0): $stack4 = lengthof l0  YES
(1664, 1): if l2 < $stack4 goto (branch)  YES
(1662, 0): return -1  YES
(1619, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: int getLength(java.lang.Object)>(l0)  YES
(1619, 1): if $stack1 != 0 goto $stack2 = 0  YES
(1619, 2): $stack2 = 1  YES
(1619, 3): goto [?= return $stack2]  YES
(1619, 4): $stack2 = 0  YES
(1619, 5): return $stack2  YES
(1675, 0): $stack9 = l0[l3]  YES
(1675, 1): $stack10 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>($stack9)  YES
(1609, 0): if l0 == null goto $stack1 = 0  YES
(1673, 0): $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1675, 2): if $stack10 == 0 goto l3 = l3 + -1  YES
(1609, 1): $stack1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(l0)  YES
(1673, 1): $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.Class getComponentType()>()  YES
(1609, 2): goto [?= return $stack1]  YES
(1673, 2): $stack7 = virtualinvoke $stack6.<java.lang.Class: boolean isInstance(java.lang.Object)>(l1)  YES
(1609, 3): $stack1 = 0  YES
(1673, 3): if $stack7 == 0 goto return -1  YES
(1574, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1609, 4): return $stack1  YES
(1669, 0): $stack12 = l0[l3]  YES
(1574, 1): return  YES
(1669, 1): if $stack12 != null goto l3 = l3 + -1  YES
(1667, 0): if l1 != null goto $stack5 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>()  YES
(1665, 0): $stack14 = lengthof l0  YES
(1665, 1): l2 = $stack14 - 1  YES
(1630, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1630, 1): return $stack1  YES
(1661, 0): if l0 == null goto return -1  YES
(1661, 1): if l2 >= 0 goto $stack4 = lengthof l0  YES
(1680, 0): return -1  YES
(1676, 0): return l3  YES
(1674, 0): l3 = l3 + -1  YES
(1641, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isArrayEmpty(java.lang.Object)>(l0)  YES
(1674, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1674, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1641, 1): return $stack1  YES
(1668, 0): l3 = l3 + -1  YES
(1668, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(1668, "comp5111.assignment.cut.Subject$ArrayTasks", 1)]  YES
(1668, 2): goto [?= return -1]  YES

In the following all of the instructions which were not covered will be shown: 

(1579, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(1579, 1): <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(1579, 2): return  NO 
(1670, 0): return l3  NO 


comp5111.assignment.cut.Subject


In the following all of the instructions which were covered will be shown: 

(12, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(12, 1): return  YES

In the following all of the instructions which were not covered will be shown: 



comp5111.assignment.cut.Subject$FilenameTasks


In the following all of the instructions which were covered will be shown: 

(192, 0): return 0  YES
(213, 0): l2 = l2 + 1  YES
(213, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(213, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(213, 2): if l2 >= $stack4 goto return 1  YES
(81, 0): if l0 != null goto $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(176, 0): l4 = 0  YES
(172, 0): if l4 <= 1 goto l3#27 = l3#27 + 1  YES
(168, 0): l5 = l5 + 1  YES
(168, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(168, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  YES
(168, 2): if l5 >= $stack14 goto (branch)  YES
(222, 0): return 1  YES
(218, 0): $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(218, 1): $stack7 = l1[l2]  YES
(185, 0): $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(57, 0): $stack1 = new java.lang.IllegalArgumentException  YES
(152, 0): l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(218, 2): $stack9 = virtualinvoke $stack8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack7)  YES
(185, 1): if $stack19 <= 4 goto l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(57, 1): $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l0)  YES
(218, 3): $stack10 = virtualinvoke $stack9.<java.util.regex.Matcher: boolean matches()>()  YES
(57, 2): specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack2)  YES
(214, 0): $stack5 = l1[l2]  YES
(218, 4): if $stack10 != 0 goto l2 = l2 + 1  YES
(57, 3): throw $stack1  YES
(214, 1): $stack6 = virtualinvoke $stack5.<java.lang.String: boolean isEmpty()>()  YES
(148, 0): $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(214, 2): if $stack6 == 0 goto $stack8 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN>  YES
(115, 0): $stack5 = <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN>  YES
(148, 1): if $stack10 == 0 goto $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(115, 1): l1 = virtualinvoke $stack5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0)  YES
(144, 0): l1 = virtualinvoke l0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::")  YES
(169, 0): l6 = l2[l5]  YES
(103, 0): l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(198, 0): l3#27 = l3#27 + 1  YES
(190, 0): l7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l6, 16)  YES
(219, 0): return 0  YES
(186, 0): return 0  YES
(153, 0): if l1 == 0 goto $stack13 = lengthof l2  YES
(54, 0): if l0 != 92 goto $stack1 = new java.lang.IllegalArgumentException  YES
(149, 0): $stack11 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>(":")  YES
(116, 0): $stack7 = virtualinvoke l1.<java.util.regex.Matcher: boolean matches()>()  YES
(149, 1): if $stack11 == 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  YES
(116, 1): if $stack7 == 0 goto return 0  YES
(178, 0): $stack17 = lengthof l2  YES
(145, 0): if l1 == 0 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  YES
(178, 1): $stack18 = $stack17 - 1  YES
(178, 2): if l5 != $stack18 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(178, 3): $stack24 = virtualinvoke l6.<java.lang.String: boolean contains(java.lang.CharSequence)>(".")  YES
(178, 4): if $stack24 == 0 goto $stack19 = virtualinvoke l6.<java.lang.String: int length()>()  YES
(170, 0): $stack16 = virtualinvoke l6.<java.lang.String: boolean isEmpty()>()  YES
(170, 1): if $stack16 == 0 goto l4 = 0  YES
(265, 0): $stack9 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(63)  YES
(104, 0): l2 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(92)  YES
(232, 0): if l0 == 47 goto $stack1 = 1  YES
(265, 1): if $stack9 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(232, 1): if l0 != 92 goto $stack1 = 0  YES
(265, 2): $stack32 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(42)  YES
(166, 0): l3#27 = 0  YES
(265, 3): if $stack32 != -1 goto l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(100, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int lastIndexOf(int)>(47)  YES
(232, 4): $stack1 = 0  YES
(232, 5): return $stack1  YES
(249, 0): return l0  YES
(216, 0): $stack13 = lengthof l1  YES
(216, 1): $stack14 = $stack13 - 1  YES
(216, 2): if l2 != $stack14 goto $stack15 = 0  YES
(117, 0): return 0  YES
(245, 0): $stack1 = virtualinvoke l0.<java.lang.String: int indexOf(int)>(0)  YES
(216, 3): $stack15 = 1  YES
(212, 0): l1 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", -1)  YES
(84, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String requireNonNullChars(java.lang.String)>(l0)  YES
(245, 1): if $stack1 < 0 goto return l0  YES
(216, 4): goto [?= return $stack15]  YES
(84, 1): $stack2 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: int indexOfLastSeparator(java.lang.String)>(l0)  YES
(51, 0): if l0 != 47 goto (branch)  YES
(84, 2): $stack3 = $stack2 + 1  YES
(216, 6): return $stack15  YES
(84, 3): $stack4 = virtualinvoke $stack1.<java.lang.String: java.lang.String substring(int)>($stack3)  YES
(84, 4): return $stack4  YES
(14, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(14, 1): return  YES
(171, 0): l4 = l4 + 1  YES
(266, 0): $stack39 = newarray (java.lang.String)[1]  YES
(105, 0): $stack5 = staticinvoke <java.lang.Math: int max(int,int)>(l1, l2)  YES
(266, 1): $stack39[0] = l0  YES
(105, 1): return $stack5  YES
(200, 0): if l3#27 > 8 goto $stack15 = 0  YES
(266, 2): return $stack39  YES
(167, 0): l4 = 0  YES
(200, 1): if l3#27 >= 8 goto $stack15 = 1  YES
(200, 2): if l1 == 0 goto $stack15 = 0  YES
(163, 0): $stack13 = lengthof l2  YES
(200, 5): $stack15 = 0  YES
(163, 1): if $stack13 <= 8 goto l3#27 = 0  YES
(200, 6): return $stack15  YES

In the following all of the instructions which were not covered will be shown: 

(52, 0): return 92  NO 
(285, 0): virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(269, 0): l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  NO 
(154, 0): $stack28 = new java.util.ArrayList  NO 
(121, 0): l2 = l2 + 1  NO 
(154, 1): $stack29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(l2)  NO 
(121, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(121, "comp5111.assignment.cut.Subject$FilenameTasks", 1)]  NO 
(154, 2): specialinvoke $stack28.<java.util.ArrayList: void <init>(java.util.Collection)>($stack29)  NO 
(55, 0): return 47  NO 
(270, 0): $stack11 = new java.util.ArrayList  NO 
(270, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  NO 
(287, 0): l4 = l8  NO 
(155, 0): $stack30 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(122, 0): l3 = virtualinvoke l1.<java.util.regex.Matcher: java.lang.String group(int)>(l2)  NO 
(155, 1): if $stack30 == 0 goto $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(271, 0): $stack12 = new java.lang.StringBuilder  NO 
(271, 1): specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>()  NO 
(123, 0): l4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l3)  NO 
(272, 0): l4 = 0  NO 
(173, 0): return 0  NO 
(289, 0): $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(289, 1): if $stack13 == 0 goto $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(157, 0): interfaceinvoke $stack28.<java.util.List: boolean add(java.lang.Object)>("")  NO 
(124, 0): if l4 <= 255 goto $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(157, 1): goto [?= $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>]  NO 
(273, 0): l7 = l7 + 1  NO 
(273, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(273, "comp5111.assignment.cut.Subject$FilenameTasks", 2)]  NO 
(273, 2): if l7 >= l6 goto $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(273, 3): l8 = l1[l7]  NO 
(42, 0): $stack2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$")  NO 
(42, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern REG_NAME_PART_PATTERN> = $stack2  NO 
(42, 2): return  NO 
(290, 0): $stack17 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(290, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack17)  NO 
(158, 0): $stack31 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(125, 0): return 0  NO 
(158, 1): if $stack31 == 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(158, 2): $stack36 = interfaceinvoke $stack28.<java.util.List: boolean isEmpty()>()  NO 
(158, 3): if $stack36 != 0 goto $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(274, 0): if l8 == 63 goto $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(274, 1): if l8 != 42 goto virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l8)  NO 
(159, 0): interfaceinvoke $stack28.<java.util.List: java.lang.Object remove(int)>(0)  NO 
(275, 0): $stack20 = virtualinvoke $stack12.<java.lang.StringBuilder: int length()>()  NO 
(275, 1): if $stack20 == 0 goto (branch)  NO 
(193, 0): goto [?= (branch)]  NO 
(276, 0): $stack26 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()  NO 
(276, 1): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>($stack26)  NO 
(293, 0): $stack14 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(293, 1): $stack15 = virtualinvoke $stack11.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($stack14)  NO 
(293, 2): $stack16 = (java.lang.String[]) $stack15  NO 
(194, 0): if l7 < 0 goto return 0  NO 
(293, 3): return $stack16  NO 
(161, 0): $stack32 = <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY>  NO 
(194, 1): if l7 <= 65535 goto l3#27 = l3#27 + 1  NO 
(128, 0): $stack11 = virtualinvoke l3.<java.lang.String: int length()>()  NO 
(161, 1): $stack33 = interfaceinvoke $stack28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack32)  NO 
(128, 1): if $stack11 <= 1 goto l2 = l2 + 1  NO 
(161, 2): l2 = (java.lang.String[]) $stack33  NO 
(128, 2): $stack14 = virtualinvoke l3.<java.lang.String: boolean startsWith(java.lang.String)>("0")  NO 
(128, 3): if $stack14 == 0 goto l2 = l2 + 1  NO 
(277, 0): virtualinvoke $stack12.<java.lang.StringBuilder: void setLength(int)>(0)  NO 
(145, 1): $stack49 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>("::")  NO 
(145, 2): $stack50 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String)>("::")  NO 
(145, 3): if $stack49 == $stack50 goto $stack10 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>(":")  NO 
(195, 0): return 0  NO 
(129, 0): return 0  NO 
(30, 0): $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$")  NO 
(30, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.util.regex.Pattern IPV4_PATTERN> = $stack1  NO 
(179, 0): $stack27 = staticinvoke <comp5111.assignment.cut.Subject$FilenameTasks: boolean isIPv4Address(java.lang.String)>(l6)  NO 
(146, 0): return 0  NO 
(179, 1): if $stack27 != 0 goto l3#27 = l3#27 + 2  NO 
(279, 0): if l8 != 63 goto (branch)  NO 
(246, 0): $stack2 = new java.lang.IllegalArgumentException  NO 
(246, 1): specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null character present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it")  NO 
(180, 0): return 0  NO 
(246, 2): throw $stack2  NO 
(164, 0): return 0  NO 
(280, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("?")  NO 
(280, 1): goto [?= l4 = l8]  NO 
(82, 0): return null  NO 
(148, 2): $stack45 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String)>("::")  NO 
(148, 3): if $stack45 == 0 goto return 0  NO 
(16, 0): $stack0 = newarray (java.lang.String)[0]  NO 
(16, 1): <comp5111.assignment.cut.Subject$FilenameTasks: java.lang.String[] EMPTY_STRING_ARRAY> = $stack0  NO 
(281, 0): if l4 == 42 goto l4 = l8  NO 
(182, 0): l3#27 = l3#27 + 2  NO 
(149, 2): $stack41 = virtualinvoke l0.<java.lang.String: boolean endsWith(java.lang.String)>("::")  NO 
(116, 2): $stack8 = virtualinvoke l1.<java.util.regex.Matcher: int groupCount()>()  NO 
(149, 3): if $stack41 != 0 goto l2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")  NO 
(116, 3): if $stack8 == 4 goto l2 = 1  NO 
(232, 2): $stack1 = 1  NO 
(232, 3): goto [?= return $stack1]  NO 
(282, 0): virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>("*")  NO 
(282, 1): goto [?= l4 = l8]  NO 
(183, 0): goto [?= l5 = l5 + 1]  NO 
(150, 0): return 0  NO 
(216, 5): $stack15 = 0  NO 
(134, 0): return 1  NO 
(101, 0): return -1  NO 
(200, 3): $stack15 = 1  NO 
(200, 4): goto [?= return $stack15]  NO 


comp5111.assignment.cut.Subject$StringTasks


In the following all of the instructions which were covered will be shown: 

(580, 3): specialinvoke $stack16.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack18)  YES
(448, 0): if l0 != null goto l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(580, 4): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack16)  YES
(415, 0): l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(349, 0): l2 = l2 + 1  YES
(349, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(349, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(795, 0): if l1 != null goto $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(663, 0): if l0 == null goto return 1  YES
(663, 1): if l1 != null goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(564, 0): $stack23 = l2[l6]  YES
(564, 1): l7 = staticinvoke <java.lang.Character: int getType(char)>($stack23)  YES
(878, 0): l0#4 = l2  YES
(878, 1): goto [?= return l0#4]  YES
(845, 0): $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(845, 1): $stack12 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($stack11)  YES
(845, 2): if $stack12 == 0 goto l4 = l4 + 1  YES
(746, 0): return 0  YES
(614, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(581, 0): $stack20 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(581, 1): $stack21 = interfaceinvoke $stack11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack20)  YES
(581, 2): $stack22 = (java.lang.String[]) $stack21  YES
(581, 3): return $stack22  YES
(416, 0): l2 = l2 + 1  YES
(416, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(416, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(350, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(350, 1): $stack5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack4)  YES
(350, 2): if $stack5 != 0 goto l2 = l2 + 1  YES
(664, 0): return 1  YES
(565, 0): if l7 != l5 goto (branch)  YES
(499, 0): return l0  YES
(846, 0): l2 = 1  YES
(615, 0): l3 = lengthof l1  YES
(417, 0): $stack5 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l2)  YES
(417, 1): $stack6 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack5)  YES
(351, 0): return 0  YES
(863, 0): if l0 == null goto return l0  YES
(417, 2): if $stack6 != 0 goto l2 = l2 + 1  YES
(863, 1): if l1 == null goto return l0  YES
(863, 2): if l2 != null goto l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(566, 0): goto [?= l6 = l6 + 1]  YES
(880, 0): if l6 != l4 goto $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(748, 0): $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(748, 1): $stack5 = interfaceinvoke l1.<java.lang.CharSequence: int length()>()  YES
(748, 2): if $stack4 == $stack5 goto $stack6 = l0 instanceof java.lang.String  YES
(616, 0): l4 = l2 - 1  YES
(451, 0): l1 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(418, 0): return 0  YES
(666, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(881, 0): $stack16 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(881, 1): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($stack16, l2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001")  YES
(881, 2): goto [?= return l0#4]  YES
(749, 0): return 0  YES
(716, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 1)  YES
(716, 1): return $stack1  YES
(617, 0): l5 = l3 - 1  YES
(452, 0): if l1 >= 2 goto l2 = l1 - 1  YES
(799, 0): $stack4 = virtualinvoke l1.<java.lang.String: boolean isEmpty()>()  YES
(799, 1): if $stack4 == 0 goto (branch)  YES
(667, 0): l3 = l2 - 1  YES
(568, 0): if l1 == 0 goto $stack25 = new java.lang.String  YES
(568, 1): if l7 != 2 goto $stack25 = new java.lang.String  YES
(535, 0): $stack1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(l0, 0)  YES
(502, 0): $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(568, 2): if l5 != 1 goto $stack25 = new java.lang.String  YES
(535, 1): return $stack1  YES
(502, 1): l1#2 = $stack5 - 1  YES
(849, 0): if l1 == 0 goto $stack8 = 0  YES
(849, 4): $stack8 = 0  YES
(849, 5): return $stack8  YES
(618, 0): l6 = l6 + 1  YES
(618, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(618, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(453, 0): return ""  YES
(833, 0): $stack5 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(833, 1): if $stack5 != 0 goto return 0  YES
(800, 0): return l0  YES
(833, 2): $stack6 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(833, 3): if $stack6 != 1 goto l1 = 0  YES
(668, 0): l4 = lengthof l1  YES
(503, 0): l2 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l1#2)  YES
(751, 0): $stack6 = l0 instanceof java.lang.String  YES
(751, 1): if $stack6 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(751, 2): $stack12 = l1 instanceof java.lang.String  YES
(751, 3): if $stack12 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(619, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(553, 0): if l0 != null goto $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(421, 0): return 1  YES
(867, 0): l3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>(l1)  YES
(834, 0): return 0  YES
(669, 0): l5 = l4 - 1  YES
(636, 0): return 0  YES
(752, 0): $stack15 = virtualinvoke l0.<java.lang.Object: boolean equals(java.lang.Object)>(l1)  YES
(752, 1): return $stack15  YES
(620, 0): l8 = l8 + 1  YES
(620, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(620, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(455, 0): l2 = l1 - 1  YES
(323, 0): if l0 != null goto $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(802, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(323, 1): $stack1 = 0  YES
(802, 1): $stack6 = l2 - 1  YES
(323, 2): goto [?= return $stack1]  YES
(323, 3): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(802, 2): $stack7 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack6)  YES
(323, 4): return $stack1  YES
(802, 3): $stack8 = virtualinvoke l1.<java.lang.String: int indexOf(int)>($stack7)  YES
(802, 4): if $stack8 == -1 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(670, 0): l6 = l6 + 1  YES
(670, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(670, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(505, 0): if l2 != 10 goto (branch)  YES
(885, 0): $stack12 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l3)  YES
(621, 0): $stack15 = l1[l8]  YES
(621, 1): if $stack15 != l7 goto l8 = l8 + 1  YES
(456, 0): l3 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(869, 0): if l3 >= 0 goto l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(836, 0): l1 = 0  YES
(803, 0): l2 = l2 + -1  YES
(803, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(802, "comp5111.assignment.cut.Subject$StringTasks", 0)]  YES
(671, 0): l7 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l6)  YES
(688, 0): return 1  YES
(556, 0): $stack9 = virtualinvoke l0.<java.lang.String: boolean isEmpty()>()  YES
(556, 1): if $stack9 == 0 goto l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(490, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(490, 1): if $stack3 == 0 goto $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(457, 0): l4 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l2)  YES
(870, 0): return l0  YES
(837, 0): l2 = 0  YES
(672, 0): l8 = l8 + 1  YES
(672, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(672, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(887, 0): $stack13 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int)>(l6)  YES
(887, 1): $stack14 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($stack13, l1, l2)  YES
(887, 2): l0#4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>($stack12, l2, $stack14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001")  YES
(557, 0): $stack41 = <comp5111.assignment.cut.Subject$ArrayTasks: java.lang.String[] EMPTY_STRING_ARRAY>  YES
(557, 1): return $stack41  YES
(491, 0): return l0  YES
(458, 0): if l4 != 10 goto return l3  YES
(838, 0): l3 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(673, 0): $stack13 = l1[l8]  YES
(673, 1): if $stack13 != l7 goto l8 = l8 + 1  YES
(839, 0): l4 = l4 + 1  YES
(806, 0): $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  YES
(839, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(839, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(806, 1): return $stack5  YES
(575, 0): $stack25 = new java.lang.String  YES
(575, 1): $stack26 = l6 - l4  YES
(509, 0): if l2 == 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(575, 2): specialinvoke $stack25.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack26)  YES
(575, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack25)  YES
(377, 0): if l0 == null goto $stack2 = 1  YES
(377, 1): $stack1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(377, 2): if $stack1 != 0 goto $stack2 = 0  YES
(377, 3): $stack2 = 1  YES
(790, 0): l2 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(377, 4): goto [?= return $stack2]  YES
(377, 5): $stack2 = 0  YES
(377, 6): return $stack2  YES
(559, 0): l2 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>()  YES
(873, 0): l4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(840, 0): if l1 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(576, 0): l4 = l6  YES
(510, 0): l1#2 = l1#2 + 1  YES
(890, 0): return l0#4  YES
(345, 0): l1 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: int length(java.lang.CharSequence)>(l0)  YES
(791, 0): if l2 != 0 goto (branch)  YES
(560, 0): $stack11 = new java.util.ArrayList  YES
(560, 1): specialinvoke $stack11.<java.util.ArrayList: void <init>()>()  YES
(494, 0): $stack4 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(494, 1): if $stack4 != 1 goto $stack5 = virtualinvoke l0.<java.lang.String: int length()>()  YES
(461, 0): return l3  YES
(742, 0): if l0 != l1 goto (branch)  YES
(412, 0): $stack3 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(412, 1): if $stack3 == 0 goto l1 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(346, 0): if l1 != 0 goto l2 = 0  YES
(792, 0): return l0  YES
(561, 0): l4 = 0  YES
(495, 0): l1 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0)  YES
(875, 0): $stack10 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(875, 1): l6 = l3 + $stack10  YES
(297, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(297, 1): return  YES
(743, 0): return 1  YES
(611, 0): $stack9 = staticinvoke <comp5111.assignment.cut.Subject$StringTasks: boolean isEmpty(java.lang.CharSequence)>(l0)  YES
(611, 1): if $stack9 != 0 goto return 0  YES
(578, 0): l5 = l7  YES
(611, 2): $stack10 = staticinvoke <comp5111.assignment.cut.Subject$ArrayTasks: boolean isEmpty(char[])>(l1)  YES
(512, 0): $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  YES
(611, 3): if $stack10 == 0 goto l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(512, 1): return $stack7  YES
(413, 0): return 0  YES
(347, 0): return 1  YES
(562, 0): $stack12 = l2[0]  YES
(562, 1): l5 = staticinvoke <java.lang.Character: int getType(char)>($stack12)  YES
(496, 0): if l1 == 13 goto return ""  YES
(496, 1): if l1 != 10 goto return l0  YES
(843, 0): $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(843, 1): $stack10 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($stack9)  YES
(843, 2): if $stack10 == 0 goto $stack11 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  YES
(612, 0): return 0  YES
(563, 0): l6 = l6 + 1  YES
(563, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(563, "comp5111.assignment.cut.Subject$StringTasks", 1)]  YES
(563, 2): $stack15 = $stack14 - 1  YES
(563, 3): if l6 >= $stack15 goto $stack16 = new java.lang.String  YES
(877, 0): $stack11 = virtualinvoke l1.<java.lang.String: int length()>()  YES
(877, 1): if l4 != $stack11 goto (branch)  YES
(745, 0): if l0 == null goto return 0  YES
(745, 1): if l1 != null goto $stack4 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  YES
(580, 0): $stack16 = new java.lang.String  YES
(580, 1): $stack17 = lengthof l2  YES
(580, 2): $stack18 = $stack17 - l4  YES

In the following all of the instructions which were not covered will be shown: 

(630, 0): if l6 >= l4 goto l8 = l8 + 1  NO 
(630, 1): $stack19 = l8 + 1  NO 
(630, 2): $stack21 = l1[$stack19]  NO 
(630, 3): $stack20 = l6 + 1  NO 
(630, 4): $stack22 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack20)  NO 
(630, 5): if $stack21 != $stack22 goto l8 = l8 + 1  NO 
(680, 0): return 0  NO 
(449, 0): return null  NO 
(796, 0): if l2 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(796, 1): $stack13 = l2 - 1  NO 
(796, 2): $stack14 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack13)  NO 
(796, 3): $stack15 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack14)  NO 
(796, 4): if $stack15 == 0 goto $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l2)  NO 
(631, 0): return 1  NO 
(797, 0): l2 = l2 + -1  NO 
(797, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(796, "comp5111.assignment.cut.Subject$StringTasks", 0)]  NO 
(682, 0): if l6 >= l3 goto l8 = l8 + 1  NO 
(682, 1): $stack17 = l8 + 1  NO 
(682, 2): $stack19 = l1[$stack17]  NO 
(682, 3): $stack18 = l6 + 1  NO 
(682, 4): $stack20 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>($stack18)  NO 
(682, 5): if $stack19 != $stack20 goto l8 = l8 + 1  NO 
(864, 0): return l0  NO 
(683, 0): return 0  NO 
(849, 1): if l2 == 0 goto $stack8 = 0  NO 
(849, 2): $stack8 = 1  NO 
(849, 3): goto [?= return $stack8]  NO 
(354, 0): return 1  NO 
(569, 0): l8 = l6 - 1  NO 
(570, 0): if l8 == l4 goto (branch)  NO 
(554, 0): return null  NO 
(571, 0): $stack38 = new java.lang.String  NO 
(571, 1): $stack39 = l8 - l4  NO 
(571, 2): specialinvoke $stack38.<java.lang.String: void <init>(char[],int,int)>(l2, l4, $stack39)  NO 
(571, 3): interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack38)  NO 
(572, 0): l4 = l8  NO 
(506, 0): $stack11 = l1#2 - 1  NO 
(506, 1): $stack12 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack11)  NO 
(506, 2): if $stack12 != 13 goto $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)  NO 
(622, 0): $stack18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(622, 1): if $stack18 != 0 goto (branch)  NO 
(507, 0): l1#2 = l1#2 + -1  NO 
(507, 1): goto [?= $stack7 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(0, l1#2)]  NO 
(755, 0): l2 = interfaceinvoke l0.<java.lang.CharSequence: int length()>()  NO 
(458, 1): $stack8 = l2 - 1  NO 
(458, 2): $stack9 = virtualinvoke l3.<java.lang.String: char charAt(int)>($stack8)  NO 
(458, 3): if $stack9 != 13 goto return l3  NO 
(574, 0): goto [?= l5 = l7]  NO 
(756, 0): l3 = l3 + 1  NO 
(756, 1): goto [?= staticinvoke <comp5111.assignment.Counter2: void add(int,java.lang.String,int)>(756, "comp5111.assignment.cut.Subject$StringTasks", 1)]  NO 
(624, 0): return 1  NO 
(459, 0): $stack11 = l2 - 1  NO 
(459, 1): $stack12 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int,int)>(0, $stack11)  NO 
(459, 2): return $stack12  NO 
(674, 0): $stack16 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l7)  NO 
(674, 1): if $stack16 != 0 goto (branch)  NO 
(757, 0): $stack8 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 1): $stack9 = interfaceinvoke l1.<java.lang.CharSequence: char charAt(int)>(l3)  NO 
(757, 2): if $stack8 == $stack9 goto l3 = l3 + 1  NO 
(840, 1): if l2 == 0 goto $stack9 = interfaceinvoke l0.<java.lang.CharSequence: char charAt(int)>(l4)  NO 
(758, 0): return 0  NO 
(626, 0): if l8 != l5 goto (branch)  NO 
(841, 0): return 1  NO 
(676, 0): return 0  NO 
(628, 0): return 1  NO 
(678, 0): if l8 != l5 goto (branch)  NO 
(761, 0): return 1  NO 
(497, 0): return ""  NO 
(844, 0): l1 = 1  NO 
(844, 1): goto [?= l4 = l4 + 1]  NO 


comp5111.assignment.cut.Subject$BooleanTasks


In the following all of the instructions which were covered will be shown: 

(1393, 0): if l0 != l1 goto (branch)  YES
(1396, 3): $stack2 = -1  YES
(1396, 4): return $stack2  YES
(1381, 0): specialinvoke l0.<java.lang.Object: void <init>()>()  YES
(1396, 0): if l0 == 0 goto $stack2 = -1  YES
(1381, 1): return  YES
(1396, 1): $stack2 = 1  YES
(1396, 2): goto [?= return $stack2]  YES
(1394, 0): return 0  YES

In the following all of the instructions which were not covered will be shown: 

